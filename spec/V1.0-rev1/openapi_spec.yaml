components:
  parameters:
    apiVersionParam:
      description: "Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n"
      in: "header"
      name: "x-api-version"
      required: true
      schema:
        default: "1.0-rev1"
        type: "string"
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid."
    Deleted:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EmptySuccessResponse'
      description: "Removed."
    Forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request."
    InternalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: "Internal server error. The request has been received but could not be completed because of an internal error at the server side."
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: "Not found. No object was found with the path parameter specified in the request."
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: "Unauthorized. The authorization header has been expected but not found (or found but is expired)."
  schemas:
    ActiveFullSettingsModel:
      description: "Active full backup settings."
      properties:
        isEnabled:
          description: "If *true*, active full backups are enabled."
          type: "boolean"
        monthly:
          $ref: '#/components/schemas/AdvancedStorageScheduleMonthlyModel'
        weekly:
          $ref: '#/components/schemas/AdvancedStorageScheduleWeeklyModel'
      required:
        - isEnabled
      type: "object"
    AdvancedSmtpOptionsModel:
      description: "advanced global email notification settings."
      properties:
        SSLEnabled:
          description: "If *true*, secure connection for email operations is used."
          type: "boolean"
        authRequred:
          description: "If *true*, the `credentialsId` credentials are used to connect to the SMTP server."
          type: "boolean"
        credentialsId:
          description: "ID of the credentials used to connect to the server."
          format: "uuid"
          type: "string"
        port:
          description: "Port number for the SMTP server."
          format: "int32"
          type: "integer"
        timeoutMs:
          description: "Connection timeout for the SMTP server."
          format: "int32"
          type: "integer"
      required:
        - port
        - timeoutMs
        - SSLEnabled
        - authRequred
      type: "object"
    AdvancedStorageScheduleMonthlyModel:
      description: "Monthly schedule settings."
      properties:
        dayNumberInMonth:
          $ref: '#/components/schemas/EDayNumberInMonth'
        dayOfMonths:
          description: "Day of the month when the operation is performed."
          type: "integer"
        dayOfWeek:
          $ref: '#/components/schemas/EDayOfWeek'
        isEnabled:
          description: "If *true*, the monthly schedule is enabled."
          type: "boolean"
        months:
          description: "Months when the operation is performed."
          items:
            $ref: '#/components/schemas/EMonth'
          type: "array"
          uniqueItems: true
      required:
        - isEnabled
      type: "object"
    AdvancedStorageScheduleWeeklyModel:
      description: "Weekly schedule settings."
      properties:
        days:
          description: "Days of the week when the operation is performed."
          items:
            $ref: '#/components/schemas/EDayOfWeek'
          type: "array"
          uniqueItems: true
        isEnabled:
          default: false
          description: "If *true*, the weekly schedule is enabled."
          type: "boolean"
      required:
        - isEnabled
      type: "object"
    ArchiveTierAdvancedSettingsModel:
      description: "Advanced settings of the archive tier."
      properties:
        archiveDeduplicationEnabled:
          description: "If *true*, each backup is stored as a delta to the previous one."
          type: "boolean"
        costOptimizedArchiveEnabled:
          description: "If *true*, backups are archived if the remaining retention time is above minimum storage period for the repository."
          type: "boolean"
      type: "object"
    ArchiveTierModel:
      description: "Archive tier."
      properties:
        advancedSettings:
          $ref: '#/components/schemas/ArchiveTierAdvancedSettingsModel'
        archivePeriodDays:
          description: "Number of days after which backup chains on the capacity extent are moved to the archive extent. Specify *0* to offload inactive backup chains on the same day they are created."
          type: "integer"
        extentId:
          description: "ID of an object storage repository added as an archive extent."
          format: "uuid"
          type: "string"
        isEnabled:
          description: "If *true*, the archive tier is enabled."
          type: "boolean"
      required:
        - isEnabled
      type: "object"
    AuthorizationCodeModel:
      properties:
        code:
          description: "String that is used to obtain an access token. Lifetime of the authorization code is 60 seconds."
          type: "string"
      required:
        - code
      type: "object"
    BackupApplicationAwareProcessingImportModel:
      description: "Application-aware processing settings."
      properties:
        appSettings:
          description: "Array of VMware objects and their application settings."
          items:
            $ref: '#/components/schemas/BackupApplicationSettingsImportModel'
          type: "array"
        isEnabled:
          description: "If *true*, application-aware processing is enabled."
          type: "boolean"
      required:
        - isEnabled
      type: "object"
    BackupApplicationAwareProcessingModel:
      description: "Application-aware processing settings."
      properties:
        appSettings:
          description: "Array of VMware objects and their application settings."
          items:
            $ref: '#/components/schemas/BackupApplicationSettingsModel'
          type: "array"
        isEnabled:
          description: "If *true*, application-aware processing is enabled."
          type: "boolean"
      required:
        - isEnabled
      type: "object"
    BackupApplicationSettingsImportModel:
      properties:
        exclusions:
          $ref: '#/components/schemas/BackupFSExclusionsModel'
        oracle:
          $ref: '#/components/schemas/BackupOracleSettingsImportModel'
        scripts:
          $ref: '#/components/schemas/BackupScriptSettingsModel'
        sql:
          $ref: '#/components/schemas/BackupSQLSettingsImportModel'
        transactionLogs:
          $ref: '#/components/schemas/ETransactionLogsSettings'
        usePersistentGuestAgent:
          description: "If *true*, persistent guest agent is used."
          type: "boolean"
        vmObject:
          $ref: '#/components/schemas/VmwareObjectModel'
        vss:
          $ref: '#/components/schemas/EApplicationSettingsVSS'
      required:
        - vmObject
        - vss
      type: "object"
    BackupApplicationSettingsModel:
      properties:
        exclusions:
          $ref: '#/components/schemas/BackupFSExclusionsModel'
        oracle:
          $ref: '#/components/schemas/BackupOracleSettingsModel'
        scripts:
          $ref: '#/components/schemas/BackupScriptSettingsModel'
        sql:
          $ref: '#/components/schemas/BackupSQLSettingsModel'
        transactionLogs:
          $ref: '#/components/schemas/ETransactionLogsSettings'
        usePersistentGuestAgent:
          description: "If *true*, persistent guest agent is used."
          type: "boolean"
        vmObject:
          $ref: '#/components/schemas/VmwareObjectModel'
        vss:
          $ref: '#/components/schemas/EApplicationSettingsVSS'
      required:
        - vmObject
        - vss
      type: "object"
    BackupFSExclusionsModel:
      description: "VM guest OS file exclusion."
      properties:
        exclusionPolicy:
          $ref: '#/components/schemas/EBackupExclusionPolicy'
        itemsList:
          description: "Array of files and folders. Full paths to files and folders, environmental variables and file masks with the asterisk (*) and question mark (?) characters can be used."
          items:
            type: "string"
          type: "array"
      required:
        - exclusionPolicy
      type: "object"
    BackupHealthCheckSettingsModels:
      description: "Health check settings for the for the latest restore point in the backup chain."
      properties:
        isEnabled:
          description: "If *true*, the health check is enabled."
          type: "boolean"
        monthly:
          $ref: '#/components/schemas/AdvancedStorageScheduleMonthlyModel'
        weekly:
          $ref: '#/components/schemas/AdvancedStorageScheduleWeeklyModel'
      required:
        - isEnabled
      type: "object"
    BackupIndexingSettingsModel:
      properties:
        LinuxIndexing:
          $ref: '#/components/schemas/BackupObjectIndexingModel'
        WindowsIndexing:
          $ref: '#/components/schemas/BackupObjectIndexingModel'
        vmObject:
          $ref: '#/components/schemas/VmwareObjectModel'
      required:
        - vmObject
      type: "object"
    BackupJobAdvancedSettingsModel:
      description: "Advanced settings of the backup job."
      properties:
        activeFulls:
          $ref: '#/components/schemas/ActiveFullSettingsModel'
        backupHealth:
          $ref: '#/components/schemas/BackupHealthCheckSettingsModels'
        backupModeType:
          $ref: '#/components/schemas/EBackupModeType'
        fullBackupMaintenance:
          $ref: '#/components/schemas/FullBackupMaintenanceModel'
        notifications:
          $ref: '#/components/schemas/NotificationSettingsModel'
        scripts:
          $ref: '#/components/schemas/JobScriptsSettingsModel'
        storageData:
          $ref: '#/components/schemas/BackupStorageSettingModel'
        storageIntegration:
          $ref: '#/components/schemas/PrimaryStorageIntegrationSettingsModel'
        synthenticFulls:
          $ref: '#/components/schemas/SyntheticFullSettingsModel'
        vSphere:
          $ref: '#/components/schemas/BackupJobAdvancedSettingsVSphereModel'
      required:
        - backupModeType
      type: "object"
    BackupJobAdvancedSettingsVSphereModel:
      description: "VMware vSphere settings for the backup job."
      properties:
        changedBlockTracking:
          $ref: '#/components/schemas/VSphereChangedBlockTrackingSettingsModel'
        enableVMWareToolsQuiescence:
          description: "If *true*, VMware Tools quiescence is enabled for freezing the VM file system and application data."
          type: "boolean"
      type: "object"
    BackupJobExclusions:
      properties:
        disks:
          description: "Array of VM disks excluded from the backup."
          items:
            $ref: '#/components/schemas/VmwareObjectDiskModel'
          type: "array"
        templates:
          $ref: '#/components/schemas/BackupJobExclusionsTemplates'
        vms:
          description: "Array of VMs excluded from the backup."
          items:
            $ref: '#/components/schemas/VmwareObjectSizeModel'
          type: "array"
      type: "object"
    BackupJobExclusionsSpec:
      properties:
        disks:
          items:
            $ref: '#/components/schemas/VmwareObjectDiskModel'
          type: "array"
        templates:
          $ref: '#/components/schemas/BackupJobExclusionsTemplates'
        vms:
          items:
            $ref: '#/components/schemas/VmwareObjectModel'
          type: "array"
      type: "object"
    BackupJobExclusionsTemplates:
      description: "Array of VM templates excluded from the backup."
      properties:
        excludeFromIncremental:
          description: "If *true*, the template is excluded from the incremental backup."
          type: "boolean"
        isEnabled:
          description: "If *true*, the template is included into the backup."
          type: "boolean"
      type: "object"
    BackupJobGuestProcessingImportModel:
      description: "Guest processing settings."
      properties:
        applicationAwareProcessing:
          $ref: '#/components/schemas/BackupApplicationAwareProcessingImportModel'
        guestCredentials:
          $ref: '#/components/schemas/GuestOsCredentialsImportModel'
        guestFileSystemIndexing:
          $ref: '#/components/schemas/GuestFileSystemIndexingModel'
        guestInteractionProxies:
          $ref: '#/components/schemas/GuestInteractionProxiesSettingsImportModel'
      required:
        - applicationAwareProcessing
        - guestFileSystemIndexing
      type: "object"
    BackupJobGuestProcessingModel:
      description: "Guest processing settings."
      properties:
        appAwareProcessing:
          $ref: '#/components/schemas/BackupApplicationAwareProcessingModel'
        guestCredentials:
          $ref: '#/components/schemas/GuestOsCredentialsModel'
        guestFSIndexing:
          $ref: '#/components/schemas/GuestFileSystemIndexingModel'
        guestInteractionProxies:
          $ref: '#/components/schemas/GuestInteractionProxiesSettingsModel'
      required:
        - appAwareProcessing
        - guestFSIndexing
      type: "object"
    BackupJobImportProxiesModel:
      description: "Backup proxies."
      properties:
        automaticSelection:
          default: true
          description: "If *true*, backup proxies are detected and assigned automatically."
          type: "boolean"
        proxies:
          description: "Array of backup proxies."
          items:
            $ref: '#/components/schemas/BackupProxyImportModel'
          type: "array"
      required:
        - automaticSelection
      type: "object"
    BackupJobModel:
      allOf:
        - $ref: '#/components/schemas/JobModel'
        - properties:
            guestProcessing:
              $ref: '#/components/schemas/BackupJobGuestProcessingModel'
            isHighPriority:
              description: "If *true*, the job has a high priority in getting backup infrastructure resources."
              type: "boolean"
            schedule:
              $ref: '#/components/schemas/BackupScheduleModel'
            storage:
              $ref: '#/components/schemas/BackupJobStorageModel'
            virtualMachines:
              $ref: '#/components/schemas/BackupJobVirtualMachinesModel'
          required:
            - guestProcessing
            - isHighPriority
            - schedule
            - storage
            - virtualMachines
          type: "object"
    BackupJobRetentionPolicySettingsModel:
      description: "Retention policy settings."
      properties:
        quantity:
          description: "Number of restore points or days to keep."
          type: "integer"
        type:
          $ref: '#/components/schemas/ERetentionPolicyType'
      required:
        - quantity
        - type
      type: "object"
    BackupJobSpec:
      allOf:
        - $ref: '#/components/schemas/JobSpec'
        - properties:
            guestProcessing:
              $ref: '#/components/schemas/BackupJobGuestProcessingModel'
            isHighPriority:
              default: false
              description: "If *true*, the job has a high priority in getting backup infrastructure resources."
              type: "boolean"
            schedule:
              $ref: '#/components/schemas/BackupScheduleModel'
            storage:
              $ref: '#/components/schemas/BackupJobStorageModel'
            virtualMachines:
              $ref: '#/components/schemas/BackupJobVirtualMachinesSpec'
          required:
            - guestProcessing
            - isHighPriority
            - schedule
            - storage
            - virtualMachines
          type: "object"
    BackupJobStorageImportModel:
      description: "Backup storage settings."
      properties:
        advancedSettings:
          $ref: '#/components/schemas/BackupJobAdvancedSettingsModel'
        backupProxies:
          $ref: '#/components/schemas/BackupJobImportProxiesModel'
        backupRepository:
          $ref: '#/components/schemas/BackupRepositoryImportModel'
        gfsPolicy:
          $ref: '#/components/schemas/GFSPolicySettingsModel'
        retentionPolicy:
          $ref: '#/components/schemas/BackupJobRetentionPolicySettingsModel'
      required:
        - backupProxies
        - backupRepository
        - retentionPolicy
      type: "object"
    BackupJobStorageModel:
      description: "Backup storage settings."
      properties:
        advancedSettings:
          $ref: '#/components/schemas/BackupJobAdvancedSettingsModel'
        backupProxies:
          $ref: '#/components/schemas/BackupProxiesSettingsModel'
        backupRepositoryId:
          description: "ID of the backup repository."
          format: "uuid"
          type: "string"
        gfsPolicy:
          $ref: '#/components/schemas/GFSPolicySettingsModel'
        retentionPolicy:
          $ref: '#/components/schemas/BackupJobRetentionPolicySettingsModel'
      required:
        - backupProxies
        - backupRepositoryId
        - retentionPolicy
      type: "object"
    BackupJobVirtualMachinesModel:
      properties:
        excludes:
          $ref: '#/components/schemas/BackupJobExclusions'
        includes:
          description: "Array of VM and VM containers processed by the job."
          items:
            $ref: '#/components/schemas/VmwareObjectSizeModel'
          type: "array"
      required:
        - includes
      type: "object"
    BackupJobVirtualMachinesSpec:
      properties:
        excludes:
          $ref: '#/components/schemas/BackupJobExclusionsSpec'
        includes:
          items:
            $ref: '#/components/schemas/VmwareObjectModel'
          type: "array"
      required:
        - includes
      type: "object"
    BackupLinuxScriptModel:
      description: "Paths to pre-freeze and post-thaw scripts for Linux VMs."
      properties:
        postThawScript:
          description: "Path to a post-thaw script."
          type: "string"
        preFreezeScript:
          description: "Path to a pre-freeze script."
          type: "string"
      type: "object"
    BackupLogShippingServersImportModel:
      description: "Log shipping server used to transport logs."
      properties:
        autoSelection:
          description: "If *true*, Veeam Backup & Replication chooses an optimal log shipping server automatically."
          type: "boolean"
        shippingServerNames:
          description: "Array of servers that are explicitly selected for log shipping."
          items:
            type: "string"
          type: "array"
      required:
        - autoSelection
      type: "object"
    BackupLogShippingServersModel:
      description: "Log shipping server used to transport logs."
      properties:
        autoSelection:
          description: "If *true*, Veeam Backup & Replication chooses an optimal log shipping server automatically."
          type: "boolean"
        shippingServerIds:
          description: "Array of servers that are explicitly selected for log shipping."
          items:
            format: "uuid"
            type: "string"
          type: "array"
      required:
        - autoSelection
      type: "object"
    BackupModel:
      properties:
        creationTime:
          description: "Date and time when the backup was created."
          format: "date-time"
          type: "string"
        id:
          description: "ID of the backup."
          format: "uuid"
          type: "string"
        jobId:
          description: "ID of the job that created the backup."
          format: "uuid"
          type: "string"
        name:
          description: "Name of the job that created the backup."
          type: "string"
        platformId:
          description: "ID of the platform of the backup resource."
          format: "uuid"
          type: "string"
        platformName:
          $ref: '#/components/schemas/EPlatformType'
        policyTag:
          description: "Tag that identifies retention policy."
          type: "string"
        repositoryId:
          description: "ID of the backup repository where the backup is stored."
          format: "uuid"
          type: "string"
      required:
        - id
        - name
        - type
        - platformName
        - platformId
        - creationTime
        - repositoryId
      type: "object"
    BackupObjectIndexingModel:
      description: "Guest OS indexing options for the VM."
      properties:
        guestFSIndexingMode:
          $ref: '#/components/schemas/EGuestFSIndexingMode'
        indexingList:
          description: "Array of folders. Environmental variables and full paths to folders can be used."
          items:
            type: "string"
          type: "array"
      required:
        - guestFSIndexingMode
      type: "object"
    BackupObjectModel:
      discriminator:
        mapping:
          VmWare: '#/components/schemas/ViBackupObjectModel'
        propertyName: "platformName"
      properties:
        id:
          description: "ID of the object."
          format: "uuid"
          type: "string"
        name:
          description: "Name of the object."
          type: "string"
        platformId:
          description: "Id of the platform where the object was created."
          format: "uuid"
          type: "string"
        platformName:
          $ref: '#/components/schemas/EPlatformType'
        restorePointsCount:
          description: "Number of restore points."
          type: "integer"
        type:
          description: "Type of the object."
          type: "string"
      required:
        - id
        - platformName
      type: "object"
    BackupObjectsFilters:
      properties:
        limit:
          format: "int32"
          type: "integer"
        nameFilter:
          type: "string"
        orderAsc:
          type: "boolean"
        orderColumn:
          $ref: '#/components/schemas/EBackupObjectsFiltersOrderColumn'
        platformIdFilter:
          format: "uuid"
          type: "string"
        platformNameFilter:
          $ref: '#/components/schemas/EPlatformType'
        skip:
          format: "int32"
          type: "integer"
        typeFilter:
          type: "string"
        viTypeFilter:
          type: "string"
      type: "object"
    BackupObjectsResult:
      properties:
        data:
          description: "Array of backup objects."
          items:
            $ref: '#/components/schemas/BackupObjectModel'
          type: "array"
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
        - data
        - pagination
      type: "object"
    BackupOracleSettingsImportModel:
      description: "Oracle archived log settings."
      properties:
        archiveLogs:
          $ref: '#/components/schemas/EBackupOracleLogsSettings'
        backupLogs:
          description: "If *true*, archived logs are backed up."
          type: "boolean"
        backupMinsCount:
          description: "Frequency of archived log backup, in minutes."
          type: "integer"
        credentials:
          $ref: '#/components/schemas/CredentialsImportModel'
        deleteGBsCount:
          description: "Maximum size for archived logs in GB. This parameter should be specified if the `EBackupOracleLogsSettings` value is *deleteExpiredGBs*."
          type: "integer"
        deleteHoursCount:
          description: "Time period in hours to keep archived logs. This parameter should be specified if the `EBackupOracleLogsSettings` value is *deleteExpiredHours*."
          type: "integer"
        keepDaysCount:
          description: "Number of days to keep archived logs."
          type: "integer"
        logShippingServers:
          $ref: '#/components/schemas/BackupLogShippingServersImportModel'
        retainLogBackups:
          $ref: '#/components/schemas/ERetainLogBackupsType'
        useGuestCredentials:
          description: "If *true*, Veeam Backup & Replication uses credentials specified in the guest processing settings."
          type: "boolean"
      required:
        - archiveLogs
        - useGuestCredentials
      type: "object"
    BackupOracleSettingsModel:
      description: "Oracle archived log settings."
      properties:
        archiveLogs:
          $ref: '#/components/schemas/EBackupOracleLogsSettings'
        backupLogs:
          description: "If *true*, archived logs are backed up."
          type: "boolean"
        backupMinsCount:
          description: "Frequency of archived log backup, in minutes."
          type: "integer"
        credentialsId:
          description: "ID of the credentials record that is used if `useGuestCredentials` is *false*."
          format: "uuid"
          type: "string"
        deleteGBsCount:
          description: "Maximum size for archived logs in GB. This parameter should be specified if the `EBackupOracleLogsSettings` value is *deleteExpiredGBs*."
          type: "integer"
        deleteHoursCount:
          description: "Time period in hours to keep archived logs. This parameter should be specified if the `EBackupOracleLogsSettings` value is *deleteExpiredHours*."
          type: "integer"
        keepDaysCount:
          description: "Number of days to keep archived logs."
          type: "integer"
        logShippingServers:
          $ref: '#/components/schemas/BackupLogShippingServersModel'
        retainLogBackups:
          $ref: '#/components/schemas/ERetainLogBackupsType'
        useGuestCredentials:
          description: "If *true*, Veeam Backup & Replication uses credentials specified in the guest processing settings."
          type: "boolean"
      required:
        - archiveLogs
        - useGuestCredentials
      type: "object"
    BackupPlacementSettingsModel:
      description: "Settings of the performance placement policy."
      properties:
        allowedBackups:
          $ref: '#/components/schemas/EAllowedBackupsType'
        extentName:
          description: "Name of a performance extent."
          type: "string"
      required:
        - extentName
        - allowedBackups
      type: "object"
    BackupProxiesSettingsModel:
      description: "Backup proxy settings."
      properties:
        autoSelection:
          default: true
          description: "If *true*, backup proxies are detected and assigned automatically."
          type: "boolean"
        proxyIds:
          description: "Array of proxy IDs."
          items:
            format: "uuid"
            type: "string"
          type: "array"
          uniqueItems: true
      required:
        - autoSelection
      type: "object"
    BackupProxyImportModel:
      properties:
        name:
          description: "Name of the backup proxy."
          type: "string"
        tag:
          description: "Tag assigned to the backup proxy."
          type: "string"
        type:
          $ref: '#/components/schemas/EBackupProxyImportType'
      required:
        - name
        - type
      type: "object"
    BackupRepositoryImportModel:
      description: "Backup repository."
      properties:
        name:
          description: "Name of the backup repository."
          type: "string"
        tag:
          description: "Tag assigned to the backup repository."
          type: "string"
      required:
        - name
      type: "object"
    BackupSQLSettingsImportModel:
      description: "Microsoft SQL Server transaction log settings."
      properties:
        backupMinsCount:
          description: "Frequency of transaction log backup, in minutes."
          type: "integer"
        keepDaysCount:
          description: "Number of days to keep transaction logs in the backup repository."
          type: "integer"
        logShippingServers:
          $ref: '#/components/schemas/BackupLogShippingServersImportModel'
        logsProcessing:
          $ref: '#/components/schemas/ESQLLogsProcessing'
        retainLogBackups:
          $ref: '#/components/schemas/ERetainLogBackupsType'
      required:
        - logsProcessing
      type: "object"
    BackupSQLSettingsModel:
      description: "Microsoft SQL Server transaction log settings."
      properties:
        backupMinsCount:
          description: "Frequency of transaction log backup, in minutes."
          type: "integer"
        keepDaysCount:
          description: "Number of days to keep transaction logs in the backup repository."
          type: "integer"
        logShippingServers:
          $ref: '#/components/schemas/BackupLogShippingServersModel'
        logsProcessing:
          $ref: '#/components/schemas/ESQLLogsProcessing'
        retainLogBackups:
          $ref: '#/components/schemas/ERetainLogBackupsType'
      required:
        - logsProcessing
      type: "object"
    BackupScheduleModel:
      description: "Job scheduling options."
      properties:
        afterThisJob:
          $ref: '#/components/schemas/ScheduleAfterThisJobModel'
        backupWindow:
          $ref: '#/components/schemas/ScheduleBackupWindowModel'
        continuously:
          $ref: '#/components/schemas/ScheduleBackupWindowModel'
        daily:
          $ref: '#/components/schemas/ScheduleDailyModel'
        monthly:
          $ref: '#/components/schemas/ScheduleMonthlyModel'
        periodically:
          $ref: '#/components/schemas/SchedulePeriodicallyModel'
        retry:
          $ref: '#/components/schemas/ScheduleRetryModel'
        runAutomatically:
          default: false
          description: "If *true*, job scheduling is enabled."
          type: "boolean"
      required:
        - runAutomatically
      type: "object"
    BackupScriptSettingsModel:
      description: "Pre-freeze and post-thaw scripts."
      properties:
        linuxScripts:
          $ref: '#/components/schemas/BackupLinuxScriptModel'
        scriptProcessingMode:
          $ref: '#/components/schemas/EBackupScriptProcessingMode'
        windowsScripts:
          $ref: '#/components/schemas/BackupWindowsScriptModel'
      required:
        - scriptProcessingMode
      type: "object"
    BackupStorageSettingModel:
      description: "Storage settings."
      properties:
        compressionLevel:
          $ref: '#/components/schemas/ECompressionLevel'
        enableInlineDataDedup:
          description: "If *true*, Veeam Backup & Replication deduplicates VM data before storing it in the backup repository."
          type: "boolean"
        encryption:
          $ref: '#/components/schemas/BackupStorageSettingsEncryptionModel'
        excludeDeletedFileBlocks:
          description: "If *true*, Veeam Backup & Replication does not copy deleted file blocks."
          type: "boolean"
        excludeSwapFileBlocks:
          description: "If *true*, Veeam Backup & Replication excludes swap file blocks from processing."
          type: "boolean"
        storageOptimization:
          $ref: '#/components/schemas/EStorageOptimization'
      type: "object"
    BackupStorageSettingsEncryptionModel:
      description: "Encription of backup files."
      properties:
        encryptionPasswordIdOrNull:
          description: "ID of the password used for encryption. The value is *null* for exported objects."
          format: "uuid"
          type: "string"
        encryptionPasswordTag:
          description: "Tag used to identify the password."
          type: "string"
        isEnabled:
          description: "If *true*, the content of backup files is encrypted."
          type: "boolean"
      required:
        - isEnabled
      type: "object"
    BackupWindowDayHoursModel:
      description: "Hourly scheme for a day."
      properties:
        day:
          $ref: '#/components/schemas/EDayOfWeek'
        hours:
          description: "String of hours in the following format:\n*1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1*\nwhere *1* means enabled, *0* means disabled.\n"
          type: "string"
      required:
        - day
        - hours
      type: "object"
    BackupWindowSettingModel:
      description: "Time scheme."
      properties:
        days:
          description: "Array of per-day schemes."
          items:
            $ref: '#/components/schemas/BackupWindowDayHoursModel'
          type: "array"
      required:
        - days
      type: "object"
    BackupWindowsScriptModel:
      description: "Paths to pre-freeze and post-thaw scripts for Microsoft Windows VMs."
      properties:
        postThawScript:
          description: "Path to a post-thaw script."
          type: "string"
        preFreezeScript:
          description: "Path to a pre-freeze script."
          type: "string"
      type: "object"
    BackupsFilters:
      properties:
        createdAfterFilter:
          format: "date-time"
          type: "string"
        createdBeforeFilter:
          format: "date-time"
          type: "string"
        jobIdFilter:
          format: "uuid"
          type: "string"
        limit:
          format: "int32"
          type: "integer"
        nameFilter:
          type: "string"
        orderAsc:
          type: "boolean"
        orderColumn:
          $ref: '#/components/schemas/EBackupsFiltersOrderColumn'
        platformIdFilter:
          format: "uuid"
          type: "string"
        policyTagFilter:
          type: "string"
        skip:
          format: "int32"
          type: "integer"
      type: "object"
    BackupsResult:
      properties:
        data:
          description: "Array of backups."
          items:
            $ref: '#/components/schemas/BackupModel'
          type: "array"
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
        - data
        - pagination
      type: "object"
    CapacityTierModel:
      description: "Capacity tier."
      properties:
        copyPolicyEnabled:
          description: "If *true*, Veeam Backup & Replication copies backups from the performance extents to the capacity extent as soon as the backups are created."
          type: "boolean"
        enabled:
          description: "If *true*, the capacity tier is enabled."
          type: "boolean"
        encryption:
          $ref: '#/components/schemas/BackupStorageSettingsEncryptionModel'
        extentId:
          description: "ID of an object storage repository added as a capacity extent."
          format: "uuid"
          type: "string"
        movePolicyEnabled:
          description: "If *true*, Veeam Backup & Replication moves backup files that belong to inactive backup chains from the performance extents to the capacity extent."
          type: "boolean"
        offloadWindow:
          $ref: '#/components/schemas/BackupWindowSettingModel'
        operationalRestorePeriodDays:
          description: "Number of days after which inactive backup chains on the performance extents are moved to the capacity extent. Specify *0* to offload inactive backup chains on the same day they are created."
          type: "integer"
        overridePolicy:
          $ref: '#/components/schemas/CapacityTierOverridePolicyModel'
      type: "object"
    CapacityTierOverridePolicyModel:
      description: "Override policy."
      properties:
        isEnabled:
          description: "If *true*, Veeam Backup & Replication moves oldest backup files sooner if scale-out backup repository is reaching the threshold."
          type: "boolean"
        overrideSpaceThresholdPercents:
          description: "Space threshold of the scale-out backup repository, in percent."
          type: "integer"
      type: "object"
    CertificateModel:
      properties:
        issuedBy:
          description: "Issuer of the certificate."
          type: "string"
        issuedTo:
          description: "Acquirer of the certificate."
          type: "string"
        keyAlgorithm:
          description: "Key algorithm of the certificate."
          type: "string"
        keySize:
          description: "Key size of the certificate."
          type: "string"
        serialNumber:
          description: "Serial number of the certificate."
          type: "string"
        subject:
          description: "Subject of the certificate."
          type: "string"
        thumbprint:
          description: "Thumbprint of the certificate."
          type: "string"
        validBy:
          description: "Expiration date and time of the certificate."
          format: "date-time"
          type: "string"
        validFrom:
          description: "Date and time the certificate is valid from."
          format: "date-time"
          type: "string"
      required:
        - issuedBy
        - issuedTo
        - keyAlgorithm
        - keySize
        - serialNumber
        - subject
        - thumbprint
        - validBy
        - validFrom
      type: "object"
    ConfigBackupEncryptionModel:
      description: "Encryption settings."
      properties:
        isEnabled:
          description: "If *true*, backup encryption is enabled."
          type: "boolean"
        passwordId:
          description: "ID of the password used for encryption."
          format: "uuid"
          type: "string"
      required:
        - isEnabled
        - passwordId
      type: "object"
    ConfigBackupLastSuccessfulModel:
      description: "Last successful backup."
      properties:
        lastSuccessfulTime:
          description: "Date and time when the last successful backup was created."
          format: "date-time"
          type: "string"
        sessionId:
          description: "ID of the job session."
          format: "uuid"
          type: "string"
      type: "object"
    ConfigBackupModel:
      properties:
        backupRepositoryId:
          description: "ID of the backup repository on which the configuration backup is stored."
          format: "uuid"
          type: "string"
        encryption:
          $ref: '#/components/schemas/ConfigBackupEncryptionModel'
        isEnabled:
          description: "If *true*, configuration backup is enabled."
          type: "boolean"
        lastSuccessfulBackup:
          $ref: '#/components/schemas/ConfigBackupLastSuccessfulModel'
        notifications:
          $ref: '#/components/schemas/ConfigBackupNotificationsModel'
        restorePointsToKeep:
          description: "Number of restore points to keep in the backup repository."
          format: "int32"
          type: "integer"
        schedule:
          $ref: '#/components/schemas/ConfigBackupScheduleModel'
      required:
        - isEnabled
        - backupRepositoryId
        - restorePointsToKeep
        - notifications
        - schedule
        - lastSuccessfulBackup
        - encryption
      type: "object"
    ConfigBackupNotificationsModel:
      description: "Notification settings."
      properties:
        SMTPSettings:
          $ref: '#/components/schemas/ConfigBackupSMTPSettigsModel'
        SNMPEnabled:
          description: "If *true*, SNMP traps are enabled for this job."
          type: "boolean"
      required:
        - SNMPEnabled
      type: "object"
    ConfigBackupSMTPSettigsModel:
      description: "Email notification settings."
      properties:
        isEnabled:
          description: "If *true*, email notifications are enabled for this job."
          type: "boolean"
        notifyOnError:
          description: "If *true*, email notifications are sent when the job fails."
          type: "boolean"
        notifyOnSuccess:
          description: "If *true*, email notifications are sent when the job completes successfully."
          type: "boolean"
        notifyOnWarning:
          description: "If *true*, email notifications are sent when the job completes with a warning."
          type: "boolean"
        recipients:
          description: "Array of recipients' email addresses."
          items:
            type: "string"
          type: "array"
        settingsType:
          $ref: '#/components/schemas/EConfigBackupSMTPSettingsType'
        subject:
          description: "Notification subject. Use the following variables in the subject: *%JobResult%*, *%JobName%*, *%Time%* (completion time).\n"
          type: "string"
      required:
        - isEnabled
        - recipients
        - settingsType
        - subject
        - notifyOnSuccess
        - notifyOnWarning
        - notifyOnError
      type: "object"
    ConfigBackupScheduleModel:
      description: "Scheduling settings."
      properties:
        daily:
          $ref: '#/components/schemas/ScheduleDailyModel'
        isEnabled:
          description: "If *true*, backup scheduling is enabled."
          type: "boolean"
        monthly:
          $ref: '#/components/schemas/ScheduleMonthlyModel'
      required:
        - isEnabled
      type: "object"
    ConnectionCertificateModel:
      properties:
        certificate:
          $ref: '#/components/schemas/CertificateModel'
        fingerprint:
          description: "SSH key fingerprint used to verify the server identity."
          type: "string"
      type: "object"
    CredentialsExportSpec:
      properties:
        ids:
          description: "Array of credentials IDs."
          items:
            format: "uuid"
            type: "string"
          type: "array"
          uniqueItems: true
        names:
          description: "Array of credentials user names. Wildcard characters are supported."
          items:
            type: "string"
          type: "array"
          uniqueItems: true
        showHiddenCreds:
          description: "If *true*, service credentials are exported."
          type: "boolean"
        types:
          description: "Array of credentials types."
          items:
            $ref: '#/components/schemas/ECredentialsType'
          type: "array"
          uniqueItems: true
      type: "object"
    CredentialsFilters:
      properties:
        limit:
          description: "Maximum number of credentials records to return."
          format: "int32"
          type: "integer"
        nameFilter:
          description: "Filters credentials by the `nameFilter` pattern. The pattern can match any credentials parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
          type: "string"
        orderAsc:
          description: "Sorts credentials in the ascending order by the `orderColumn` parameter."
          type: "boolean"
        orderColumn:
          $ref: '#/components/schemas/ECredentialsFiltersOrderColumn'
        skip:
          description: "Number of credentials records to skip."
          format: "int32"
          type: "integer"
      type: "object"
    CredentialsImportModel:
      properties:
        credentialsName:
          description: "User name, account name or access key."
          type: "string"
        credentialsTag:
          description: "Tag used to identify the credentials record."
          type: "string"
      required:
        - credentialsName
      type: "object"
    CredentialsImportSpec:
      properties:
        description:
          description: "Description of the credentials record."
          type: "string"
        linuxAdditionalSettings:
          $ref: '#/components/schemas/CredentialsLinuxSettingsImportModel'
        password:
          description: "Password."
          type: "string"
        tag:
          description: "Tag used to identify the credentials record."
          type: "string"
        type:
          $ref: '#/components/schemas/ECredentialsType'
        username:
          description: "User name."
          type: "string"
      required:
        - tag
        - type
        - username
      type: "object"
    CredentialsImportSpecCollection:
      properties:
        credentials:
          description: "Array of credentials."
          items:
            $ref: '#/components/schemas/CredentialsImportSpec'
          type: "array"
          uniqueItems: true
      required:
        - credentials
      type: "object"
    CredentialsLinuxSettingsImportModel:
      properties:
        SSHPort:
          description: "SSH port used to connect to a Linux server."
          type: "integer"
        addToSudoers:
          description: "If *true*, the account is automatically added to the sudoers file."
          type: "boolean"
        autoElevated:
          description: "If *true*, the permissions of the account are automatically elevated to the root user."
          type: "boolean"
        passphrase:
          description: "Passphrase that protects the private key."
          type: "string"
        privateKey:
          description: "Private key."
          type: "string"
        rootPassword:
          description: "Password for the root account."
          type: "string"
        useSu:
          description: "If *true*, the `su` command is used for Linux distributions where the `sudo` command is not available."
          type: "boolean"
      type: "object"
    CredentialsModel:
      discriminator:
        mapping:
          Linux: '#/components/schemas/LinuxCredentialsModel'
          Standard: '#/components/schemas/StandardCredentialsModel'
        propertyName: "type"
      properties:
        creationTime:
          description: "Date and time when the credentials were created."
          format: "date-time"
          type: "string"
        description:
          description: "Description of the credentials record."
          type: "string"
        id:
          description: "ID of the credentials record."
          format: "uuid"
          type: "string"
        type:
          $ref: '#/components/schemas/ECredentialsType'
        username:
          description: "User name."
          type: "string"
      required:
        - id
        - username
        - description
        - type
        - creationTime
      type: "object"
    CredentialsPasswordChangeSpec:
      properties:
        password:
          description: "New password."
          type: "string"
      required:
        - password
      type: "object"
    CredentialsResult:
      properties:
        data:
          description: "Array of credentials."
          items:
            $ref: '#/components/schemas/CredentialsModel'
          type: "array"
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
        - data
        - pagination
      type: "object"
    CredentialsSpec:
      discriminator:
        mapping:
          Linux: '#/components/schemas/LinuxCredentialsSpec'
          Standard: '#/components/schemas/StandardCredentialsSpec'
        propertyName: "type"
      properties:
        description:
          description: "Description of the credentials record."
          type: "string"
        password:
          description: "Password."
          type: "string"
        type:
          $ref: '#/components/schemas/ECredentialsType'
        username:
          description: "User name."
          type: "string"
      required:
        - username
        - type
      type: "object"
    DeleteRepositoryFilters:
      properties:
        deleteBackups:
          type: "boolean"
      type: "object"
    EAllowedBackupsType:
      description: "Type of backup files that can be stored on the extent."
      enum:
        - All
        - FullsOnly
        - IncrementsOnly
      type: "string"
    EApplicationSettingsVSS:
      description: "Behavior scenario for application-aware processing."
      enum:
        - requireSuccess
        - ignoreFailures
        - disabled
      type: "string"
    EBackupExclusionPolicy:
      description: "Exclusion policy."
      enum:
        - disabled
        - excludeOnly
        - includeOnly
      type: "string"
    EBackupModeType:
      description: "Type of the backup method used to create a restore point."
      enum:
        - Full
        - Incremental
        - ReverseIncremental
        - Transofrm
        - TransformForeverIncremental
      type: "string"
    EBackupObjectsFiltersOrderColumn:
      enum:
        - Name
        - ObjectId
        - PlatformId
        - Type
      type: "string"
    EBackupOracleLogsSettings:
      description: "Type of archived logs processing."
      enum:
        - preserve
        - deleteExpiredHours
        - deleteExpiredGBs
      type: "string"
    EBackupProxyImportType:
      enum:
        - vmware
      type: "string"
    EBackupProxyTransportMode:
      description: "Transport mode of the backup proxy."
      enum:
        - auto
        - directAccess
        - virtualAppliance
        - network
      type: "string"
    EBackupScriptProcessingMode:
      description: "Scenario for scripts execution."
      enum:
        - disableExec
        - ignoreExecFailures
        - requireSuccess
      type: "string"
    EBackupsFiltersOrderColumn:
      enum:
        - Name
        - CreationTime
        - PlatformId
        - JobId
        - PolicyTag
      type: "string"
    ECompressionLevel:
      description: "Compression level."
      enum:
        - Auto
        - None
        - DedupFriendly
        - Optimal
        - High
        - Extreme
      type: "string"
    EConfigBackupSMTPSettingsType:
      description: "Type of notification settings."
      enum:
        - Global
        - Custom
      type: "string"
    ECredentialsFiltersOrderColumn:
      enum:
        - Username
        - Description
      type: "string"
    ECredentialsType:
      description: "Credentials type."
      enum:
        - Standard
        - Linux
      type: "string"
    EDailyKinds:
      description: "Kind of daily scheduling scheme."
      enum:
        - Everyday
        - WeekDays
        - SelectedDays
      type: "string"
    EDayNumberInMonth:
      enum:
        - First
        - Second
        - Third
        - Fourth
        - Last
        - OnDay
      type: "string"
    EDayOfWeek:
      enum:
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday
      type: "string"
    EDiskInfoProcessState:
      description: "Process state of the disk."
      enum:
        - NotProcessed
        - InProcessing
        - PartiallyProcessed
        - Processed
      type: "string"
    EDiskInfoType:
      description: "Type of the disk."
      enum:
        - Unknown
        - Simple
        - Vi
        - Hv
        - HvRawDiskFile
        - EndPoint
      type: "string"
    EEmailNotificationType:
      description: "Type of email notification settings: global notification settings specified for the backup server, or custom notification settings specified for this job.\n"
      enum:
        - UseGlobalNotificationSettings
        - UseCustomNotificationSettings
      type: "string"
    EEncryptionPasswordsFiltersOrderColumn:
      enum:
        - Hint
        - ModificationTime
      type: "string"
    EGuestFSIndexingMode:
      description: "Indexing mode."
      enum:
        - disable
        - indexAll
        - indexAllExcept
        - indexOnly
      type: "string"
    EGuestOSType:
      description: "Type of the guest OS."
      enum:
        - Windows
        - Linux
      type: "string"
    EHierarchyType:
      description: "Hierarchy type."
      enum:
        - HostsAndClusters
        - DatastoresAndVms
        - HostsAndDatastores
        - VmsAndTemplates
        - VmsAndTags
      type: "string"
    EInstantRecoveryMountState:
      description: "Mount state."
      enum:
        - Failed
        - Mounting
        - Mounted
        - Dismounting
      type: "string"
    EJobFiltersOrderColumn:
      description: "Orders jobs by the specified column."
      enum:
        - Name
        - Type
        - Description
      type: "string"
    EJobStatesFiltersOrderColumn:
      description: "Orders job states by the specified column."
      enum:
        - Name
        - Type
        - Status
        - LastRun
        - LastResult
        - NextRun
        - Description
        - RepositoryId
        - ObjectsCount
      type: "string"
    EJobStatus:
      description: "Current status of the job."
      enum:
        - running
        - inactive
        - disabled
      type: "string"
    EJobType:
      description: "Type of the job."
      enum:
        - Backup
      type: "string"
    EJobWorkload:
      description: "Workload which the job must process."
      enum:
        - application
        - cloudVm
        - file
        - server
        - workstation
        - vm
      type: "string"
    ELoginGrantType:
      default: "password"
      description: "Authorization grant type.\n\nAvailable values:\n- `password` — used to obtain an access token by providing a user name and password.\n- `refresh_token` — used to refresh an expired or lost access token by providing a refresh token.\n- `authorization_code` — used to obtain an access token by providing an authorization code.\n"
      enum:
        - password
        - refresh_token
        - authorization_code
      type: "string"
    EManagedServerType:
      description: "Type of the server."
      enum:
        - WindowsHost
        - LinuxHost
        - ViHost
      type: "string"
    EManagedServersFiltersOrderColumn:
      enum:
        - Name
        - Type
        - Description
      type: "string"
    EMonth:
      enum:
        - January
        - February
        - March
        - April
        - May
        - June
        - July
        - August
        - September
        - October
        - November
        - December
      type: "string"
    EObjectRestorePointOperation:
      enum:
        - VmwareInstantRecoveryFcd
      type: "string"
    EObjectRestorePointsFiltersOrderColumn:
      enum:
        - CreationTime
        - PlatformId
        - BackupId
      type: "string"
    EPeriodicallyKinds:
      description: "Time unit for periodic job scheduling."
      enum:
        - Hours
        - Minutes
        - Seconds
        - Days
      type: "string"
    EPlacementPolicyType:
      description: "Type of placement policy."
      enum:
        - DataLocality
        - Performance
      type: "string"
    EPlatform:
      enum:
        - Vmware
        - HyperV
        - Test
        - Vcd
        - Tape
        - EndPoint
        - LinuxPhysical
        - CustomPlatform
        - Conf
        - NasBackup
        - EmulatedVmWare
        - Extension0
        - Extension1
        - Extension
      type: "string"
    EPlatformType:
      enum:
        - VmWare
        - HyperV
        - Vcd
        - WindowsPhysical
        - LinuxPhysical
        - Tape
        - NasBackup
        - CustomPlatform
      type: "string"
    EProxiesFiltersOrderColumn:
      enum:
        - Name
        - Type
        - Description
      type: "string"
    EProxyType:
      description: "Type of the backup proxy."
      enum:
        - ViProxy
      type: "string"
    ERepositoryExtentStatusType:
      enum:
        - Normal
        - Evacuate
        - Pending
        - Sealed
        - Maintenance
      type: "string"
    ERepositoryFiltersOrderColumn:
      enum:
        - Name
        - Description
        - Type
        - Host
        - Path
      type: "string"
    ERepositoryStatesFiltersOrderColumn:
      description: "Orders repositories by the specified column."
      enum:
        - Name
        - Type
        - Host
        - Path
        - CapacityGB
        - FreeGB
        - UsedSpaceGB
        - Description
      type: "string"
    ERepositoryType:
      description: "Repository type."
      enum:
        - WinLocal
        - LinuxLocal
        - Smb
        - Nfs
        - AzureBlob
        - AzureArchive
        - AmazonS3
        - AmazonS3Glacier
        - S3Compatible
        - GoogleCloud
        - IBMCloud
      type: "string"
    ERetainLogBackupsType:
      description: "Retention policy for the logs stored in the backup repository."
      enum:
        - untilBackupDeleted
        - KeepOnlyDays
      type: "string"
    ERetentionPolicyType:
      description: "Type of the retention policy."
      enum:
        - RestorePoints
        - Days
      type: "string"
    ESQLLogsProcessing:
      description: "Type of transaction logs processing."
      enum:
        - truncate
        - preserve
        - backup
        - neverTruncate
      type: "string"
    EScaleOutRepositoryFiltersOrderColumn:
      enum:
        - Name
        - Description
        - Type
        - Host
        - Path
      type: "string"
    EScriptPeriodicityType:
      description: "Type of script periodicity."
      enum:
        - Days
        - BackupSessions
      type: "string"
    ESennightOfMonth:
      description: "Sennight of the month."
      enum:
        - First
        - Second
        - Third
        - Fourth
        - Fifth
        - Last
      type: "string"
    EServicesFiltersOrderColumn:
      enum:
        - Name
        - Port
      type: "string"
    ESessionResult:
      description: "Result of the session."
      enum:
        - None
        - Success
        - Warning
        - Failed
      type: "string"
    ESessionState:
      description: "State of the session."
      enum:
        - Stopped
        - Starting
        - Stopping
        - Working
        - Pausing
        - Resuming
        - WaitingTape
        - Idle
        - Postprocessing
        - WaitingRepository
        - WaitingSlot
      type: "string"
    ESessionType:
      description: "Type of the session."
      enum:
        - Infrastructure
        - Job
        - Automation
        - ConfigurationBackup
        - RepositoryMaintenance
        - RepositoryEvacuate
        - InfrastructureItemDeletion
      type: "string"
    ESessionsFiltersOrderColumn:
      enum:
        - Name
        - SessionType
        - CreationTime
        - EndTime
        - State
        - Result
      type: "string"
    ESpeedUnit:
      description: "Traffic speed unit."
      enum:
        - KbytePerSec
        - MbitPerSpec
        - MbytePerSec
      type: "string"
    EStorageOptimization:
      description: "Storage optimization that depends on the target type."
      enum:
        - Auto
        - LocalTargetLarge
        - LocalTarget
        - LANTarget
        - WANTarget
      type: "string"
    ETaskLogRecordStatus:
      enum:
        - None
        - Succeeded
        - Warning
        - Failed
      type: "string"
    ETransactionLogsSettings:
      description: "Transaction logs settings that define whether copy-only backups must be created or transaction logs for Microsoft Exchange, Microsoft SQL and Oracle VMs must be processed.</br>\nIf transaction log processing is selected, specify the following parameters:</br>\n<ul>\n<li>[For Microsoft SQL Server VMs] Microsoft SQL Server transaction log settings</li>\n<li>[For Oracle VMs] Oracle archived log settings</li>\n</ul>\n"
      enum:
        - process
        - copyOnly
      type: "string"
    EViHostType:
      description: "Type of the VMware vSphere server."
      enum:
        - ESX
        - ESXi
        - VC
      type: "string"
    EViRootFiltersOrderColumn:
      description: "Sorts VMware vSphere servers by one of the VMware vSphere server parameters."
      enum:
        - Name
        - Type
      type: "string"
    EVmwareDisksTypeToProcess:
      description: "Type of disk selection."
      enum:
        - AllDisks
        - SystemOnly
        - SelectedDisks
      type: "string"
    EVmwareInventoryType:
      description: "Type of the VMware vSphere object."
      enum:
        - Unknown
        - VirtualMachine
        - vCenterServer
        - Datacenter
        - Cluster
        - Host
        - ResourcePool
        - Folder
        - Datastore
        - DatastoreCluster
        - StoragePolicy
        - Template
        - ComputeResource
        - VirtualApp
        - Tag
        - Category
        - Multitag
      type: "string"
    EWindowsHostComponentType:
      description: "Veeam Backup & Replication component."
      enum:
        - Transport
        - Nfs
        - HvIntegration
        - DeployerSvc
        - WanAccelerator
        - Tape
        - CloudGate
        - CloudServiceInvoker
        - CloudServiceRemoting
        - RestoreProxy
        - EpAgent
        - EpAgentSqlLocalDB
        - EpAgentSharedManagementObjects
        - EpAgentSqlSysClrTypes
        - AgentConfigureService
        - VawRedist
        - ValRedist
        - GuestControl
        - FileSystemVssIntegration
        - VssHwSnapshotProvider
        - Cdp
        - VamRedist
      type: "string"
    EmailCustomNotificationType:
      properties:
        SuppressNotificationUntilLastRetry:
          description: "If *true*, email notifications are sent about the final job status only (not per every job retry)."
          type: "boolean"
        notifyOnError:
          description: "If *true*, email notifications are sent when the job fails."
          type: "boolean"
        notifyOnSuccess:
          description: "If *true*, email notifications are sent when the job completes successfully."
          type: "boolean"
        notifyOnWarning:
          description: "If *true*, email notifications are sent when the job completes with a warning."
          type: "boolean"
        subject:
          description: "Notification subject. Use the following variables in the subject: *%Time%* (completion time), *%JobName%*, *%JobResult%*, *%ObjectCount%* (number of VMs in the job) and *%Issues%* (number of VMs in the job that have finished with the Warning or Failed status).\n"
          type: "string"
      type: "object"
    EmailNotificationSettingsModel:
      description: "Email notification settings for the backup job."
      properties:
        customNotificationSettings:
          $ref: '#/components/schemas/EmailCustomNotificationType'
        isEnabled:
          description: "If *true*, email notifications are enabled for this job."
          type: "boolean"
        notificationType:
          $ref: '#/components/schemas/EEmailNotificationType'
        recipients:
          description: "Array of recipient’s email addresses."
          items:
            type: "string"
          type: "array"
          uniqueItems: true
      required:
        - isEnabled
      type: "object"
    EmptySuccessResponse:
      description: "Empty success response (200, 201, 204)."
      type: "object"
    EncryptionPasswordExportSpec:
      properties:
        hints:
          description: "Array of password hints."
          items:
            type: "string"
          type: "array"
          uniqueItems: true
        ids:
          description: "Array of password IDs."
          items:
            format: "uuid"
            type: "string"
          type: "array"
          uniqueItems: true
        modificationTimeFrom:
          description: "Date and time the password was last modified."
          format: "date-time"
          type: "string"
        tags:
          description: "Array of password tags."
          items:
            type: "string"
          type: "array"
          uniqueItems: true
      type: "object"
    EncryptionPasswordImportSpec:
      properties:
        hint:
          description: "Hint for the encryption password."
          type: "string"
        password:
          description: "Password."
          type: "string"
        tag:
          description: "Tag for the encryption password."
          type: "string"
      required:
        - hint
        - password
      type: "object"
    EncryptionPasswordImportSpecCollection:
      properties:
        encryptionPasswords:
          description: "Array of encryption passwords."
          items:
            $ref: '#/components/schemas/EncryptionPasswordImportSpec'
          type: "array"
          uniqueItems: true
      type: "object"
    EncryptionPasswordModel:
      properties:
        hint:
          description: "Hint for the encryption password."
          type: "string"
        id:
          description: "ID of the encryption password."
          format: "uuid"
          type: "string"
        modificationTime:
          description: "Date and time the password was last modified."
          format: "date-time"
          type: "string"
        tag:
          description: "Tag for the encryption password."
          type: "string"
      required:
        - hint
        - id
      type: "object"
    EncryptionPasswordSpec:
      properties:
        hint:
          description: "Hint for the encryption password. Provide a meaningful hint that will help you recall the password."
          type: "string"
        password:
          description: "Password for data encryption. If you lose the password, you will not be able to restore it."
          type: "string"
        tag:
          description: "Tag for the encryption password."
          type: "string"
      required:
        - hint
        - password
      type: "object"
    EncryptionPasswordsFilters:
      properties:
        limit:
          format: "int32"
          type: "integer"
        orderAsc:
          type: "boolean"
        orderColumn:
          $ref: '#/components/schemas/EEncryptionPasswordsFiltersOrderColumn'
        skip:
          format: "int32"
          type: "integer"
      type: "object"
    EncryptionPasswordsResult:
      properties:
        data:
          description: "Array of encryption passwords."
          items:
            $ref: '#/components/schemas/EncryptionPasswordModel'
          type: "array"
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
        - data
        - pagination
      type: "object"
    Error:
      properties:
        errorCode:
          description: "The error code is a string that uniquely identifies an error condition and should be understood by programs that detect and handle errors by type"
          enum:
            - AccessDenied
            - ExpiredToken
            - InvalidToken
            - InvalidURI
            - MethodNotAllowed
            - NotFound
            - NotImplemented
            - ServiceUnavailable
            - UnexpectedContent
            - UnknownError
          type: "string"
        message:
          description: "The error message contains a generic description of the error condition in English. It is intended for a human audience"
          type: "string"
        resourceId:
          description: "ID of the object that is involved in the error (or empty)"
          type: "string"
      required:
        - errorCode
        - message
      type: "object"
    EvCentersInventoryFiltersOrderColumn:
      description: "Sorts vCenter Servers by one of the job parameters."
      enum:
        - Name
        - ObjectId
        - Type
      type: "string"
    FullBackupMaintenanceDefragmentAndCompactModel:
      description: "Compact operation settings."
      properties:
        isEnabled:
          description: "If *true*, Veeam Backup & Replication compacts full backup files."
          type: "boolean"
        monthly:
          $ref: '#/components/schemas/AdvancedStorageScheduleMonthlyModel'
        weekly:
          $ref: '#/components/schemas/AdvancedStorageScheduleWeeklyModel'
      required:
        - isEnabled
      type: "object"
    FullBackupMaintenanceModel:
      description: "Maintenance settings for full backup files."
      properties:
        RemoveData:
          $ref: '#/components/schemas/FullBackupMaintenanceRemoveDataModel'
        defragmentAndCompact:
          $ref: '#/components/schemas/FullBackupMaintenanceDefragmentAndCompactModel'
      type: "object"
    FullBackupMaintenanceRemoveDataModel:
      description: "Backup data setting for deleted VMs."
      properties:
        afterDays:
          description: "Number of days."
          type: "integer"
        isEnabled:
          description: "If *true*, Veeam Backup & Replication keeps the backup data of deleted VMs for the `afterDays` number of days."
          type: "boolean"
      required:
        - isEnabled
      type: "object"
    GFSPolicySettingsModel:
      description: "GFS retention policy settings."
      properties:
        isEnabled:
          description: "If *true*, the long-term (GFS) retention policy is enabled."
          type: "boolean"
        monthly:
          $ref: '#/components/schemas/GFSPolicySettingsMonthlyModel'
        weekly:
          $ref: '#/components/schemas/GFSPolicySettingsWeeklyModel'
        yearly:
          $ref: '#/components/schemas/GFSPolicySettingsYearlyModel'
      required:
        - isEnabled
      type: "object"
    GFSPolicySettingsMonthlyModel:
      description: "Monthly GFS retention policy."
      properties:
        desiredTime:
          $ref: '#/components/schemas/ESennightOfMonth'
        isEnabled:
          description: "If *true*, the monthly GFS retention policy is enabled."
          type: "boolean"
        keepForNumberOfMonths:
          description: "Number of months to keep full backups for archival purposes."
          type: "integer"
      required:
        - isEnabled
      type: "object"
    GFSPolicySettingsWeeklyModel:
      description: "Weekly GFS retention policy."
      properties:
        desiredTime:
          $ref: '#/components/schemas/EDayOfWeek'
        isEnabled:
          description: "If *true*, the weekly GFS retention policy is enabled."
          type: "boolean"
        keepForNumberOfWeeks:
          description: "Number of weeks to keep full backups for archival purposes."
          type: "integer"
      required:
        - isEnabled
      type: "object"
    GFSPolicySettingsYearlyModel:
      description: "Yearly GFS retention policy."
      properties:
        desiredTime:
          $ref: '#/components/schemas/EMonth'
        isEnabled:
          description: "If *true*, the yearly GFS retention policy is enabled."
          type: "boolean"
        keepForNumberOfYears:
          description: "Number of years to keep full backups for archival purposes."
          type: "integer"
      required:
        - isEnabled
      type: "object"
    GeneralOptionsEmailNotificationsModel:
      description: "Global email notification settings."
      properties:
        advancedSmtpOptions:
          $ref: '#/components/schemas/AdvancedSmtpOptionsModel'
        from:
          description: "Email address from which email notifications must be sent."
          type: "string"
        isEnabled:
          description: "If *true*, global email notification settings are enabled."
          type: "boolean"
        notifyOnFailure:
          description: "If *true*, email notifications are sent when the job fails."
          type: "boolean"
        notifyOnLastRetry:
          description: "If *true*, email notifications are sent about the final job status only (not per every job retry)."
          type: "boolean"
        notifyOnSuccess:
          description: "If *true*, email notifications are sent when the job completes successfully."
          type: "boolean"
        notifyOnWarning:
          description: "If *true*, email notifications are sent when the job completes with a warning."
          type: "boolean"
        sendDailyReportsAt:
          description: "Time when Veeam Backup & Replication sends daily email reports."
          format: "date-time"
          type: "string"
        smtpServerName:
          description: "Full DNS name or IP address of the SMTP server."
          type: "string"
        subject:
          description: "Notification subject. Use the following variables in the subject:<br> <ol>\n  <li>%Time% — completion time</li>\n  <li>%JobName%</li>\n  <li>%JobResult%</li>\n  <li>%ObjectCount% — number of VMs in the job</li>\n  <li>%Issues% — number of VMs in the job that have been processed with the Warning or Failed status</li>\n</ol>\n"
          type: "string"
        to:
          description: "Recipient email addresses. Use a semicolon to separate multiple addresses."
          type: "string"
      required:
        - isEnabled
        - smtpServerName
        - advancedSmtpOptions
        - from
        - to
        - subject
        - sendDailyReportsAt
        - notifyOnSuccess
        - notifyOnWarning
        - notifyOnFailure
        - notifyOnLastRetry
      type: "object"
    GeneralOptionsModel:
      properties:
        emailSettings:
          $ref: '#/components/schemas/GeneralOptionsEmailNotificationsModel'
        notifications:
          $ref: '#/components/schemas/GeneralOptionsNotificationsModel'
      type: "object"
    GeneralOptionsNotificationsModel:
      properties:
        datastoreSpaceThreshold:
          description: "Space threshold of production datastore, in percent."
          format: "int32"
          type: "integer"
        datastoreSpaceThresholdEnabled:
          description: "If *true*, notifications about critical amount of free space in production datastore are enabled."
          type: "boolean"
        notifyOnSupportExpiration:
          description: "If *true*, notifications about support contract expiration are enabled."
          type: "boolean"
        notifyOnUpdates:
          description: "If *true*, notifications about updates are enabled."
          type: "boolean"
        skipVMSpaceThreshold:
          description: "Space threshold of production datastore, in percent."
          format: "int32"
          type: "integer"
        skipVMSpaceThresholdEnabled:
          description: "If *true* and the `skipVMSpaceThreshold` threshold is reached, Veeam Backup & Replication terminates backup and replication jobs working with production datastores before VM snapshots are taken."
          type: "boolean"
        storageSpaceThreshold:
          description: "Space threshold of backup storage, in percent."
          format: "int32"
          type: "integer"
        storageSpaceThresholdEnabled:
          description: "If *true*, notifications about critical amount of free space in backup storage are enabled."
          type: "boolean"
      required:
        - storageSpaceThresholdEnabled
        - storageSpaceThreshold
        - datastoreSpaceThresholdEnabled
        - datastoreSpaceThreshold
        - skipVMSpaceThresholdEnabled
        - skipVMSpaceThreshold
        - notifyOnSupportExpiration
        - notifyOnUpdates
      type: "object"
    GlobalNetworkTrafficRulesModel:
      properties:
        preferredNetworks:
          $ref: '#/components/schemas/PreferredNetworksModel'
        trafficRules:
          description: "Array of traffic rules."
          items:
            $ref: '#/components/schemas/TrafficRuleModel'
          type: "array"
        uploadStreamsCount:
          description: "Number of TCP/IP connections per job."
          format: "integer"
          type: "integer"
        useMultipleStreamsPerJob:
          description: "If *true*, Veeam Backup & Replication uses multiple TCP/IP transfer connection for every job session."
          type: "boolean"
      required:
        - useMultipleStreamsPerJob
      type: "object"
    GuestFileSystemIndexingModel:
      description: "VM guest OS file indexing."
      properties:
        indexingSettings:
          description: "Array of VMs with guest OS file indexing options."
          items:
            $ref: '#/components/schemas/BackupIndexingSettingsModel'
          type: "array"
        isEnabled:
          type: "boolean"
      required:
        - isEnabled
      type: "object"
    GuestInteractionProxiesSettingsImportModel:
      description: "Guest interaction proxy used to deploy the runtime process on the VM guest OS."
      properties:
        automaticSelection:
          default: true
          description: "If *true*, Veeam Backup & Replication automatically selects the guest interaction proxy."
          type: "boolean"
        proxies:
          description: "Array of proxies specified explicitly. The array must contain Microsoft Windows servers added to the backup infrastructure only."
          items:
            type: "string"
          type: "array"
          uniqueItems: true
      required:
        - automaticSelection
      type: "object"
    GuestInteractionProxiesSettingsModel:
      description: "Guest interaction proxy used to deploy the runtime process on the VM guest OS."
      properties:
        autoSelection:
          default: true
          description: "If *true*, Veeam Backup & Replication automatically selects the guest interaction proxy."
          type: "boolean"
        proxyIds:
          description: "Array of proxies specified explicitly. The array must contain Microsoft Windows servers added to the backup infrastructure only."
          items:
            format: "uuid"
            type: "string"
          type: "array"
          uniqueItems: true
      required:
        - autoSelection
      type: "object"
    GuestOsCredentialsImportModel:
      description: "VM custom credentials."
      properties:
        credentialsPerMachine:
          description: "Individual credentials for VMs."
          items:
            $ref: '#/components/schemas/GuestOsCredentialsPerMachineImportModel'
          type: "array"
          uniqueItems: true
        creds:
          $ref: '#/components/schemas/CredentialsImportModel'
      type: "object"
    GuestOsCredentialsModel:
      description: "VM custom credentials."
      properties:
        credentialsPerMachine:
          description: "Individual credentials for VMs."
          items:
            $ref: '#/components/schemas/GuestOsCredentialsPerMachineModel'
          type: "array"
          uniqueItems: true
        credsId:
          description: "Credentials ID for Microsoft Windows VMs."
          format: "uuid"
          type: "string"
        credsType:
          $ref: '#/components/schemas/ECredentialsType'
      required:
        - credsId
        - credsType
      type: "object"
    GuestOsCredentialsPerMachineImportModel:
      properties:
        linuxCreds:
          $ref: '#/components/schemas/CredentialsImportModel'
        vmObject:
          $ref: '#/components/schemas/VmwareObjectModel'
        windowsCreds:
          $ref: '#/components/schemas/CredentialsImportModel'
      required:
        - vmObject
      type: "object"
    GuestOsCredentialsPerMachineModel:
      properties:
        linuxCredsId:
          description: "Credentials ID for a Linux VM."
          format: "uuid"
          type: "string"
        vmObject:
          $ref: '#/components/schemas/VmwareObjectModel'
        windowsCredsId:
          description: "Credentials ID for a Microsoft Windows VM."
          format: "uuid"
          type: "string"
      required:
        - vmObject
      type: "object"
    HostConnectionSpec:
      properties:
        credentialsId:
          description: "ID of a credentials record used to connect to the server."
          format: "uuid"
          type: "string"
        port:
          description: "Port used to communicate with the server."
          type: "integer"
        serverName:
          description: "Full DNS name or IP address of the server."
          type: "string"
        type:
          $ref: '#/components/schemas/EManagedServerType'
      required:
        - serverName
        - credentialsId
        - type
      type: "object"
    JobExportSpec:
      properties:
        ids:
          description: "Array of job IDs."
          items:
            format: "uuid"
            type: "string"
          type: "array"
          uniqueItems: true
        names:
          description: "Array of job names. Wildcard characters are supported."
          items:
            type: "string"
          type: "array"
          uniqueItems: true
        types:
          description: "Array of job types."
          items:
            type: "string"
          type: "array"
          uniqueItems: true
      type: "object"
    JobImportSpec:
      properties:
        description:
          description: "Description of the job."
          type: "string"
        guestProcessing:
          $ref: '#/components/schemas/BackupJobGuestProcessingImportModel'
        isHighPriority:
          description: "If *true*, the job has a high priority in getting backup infrastructure resources."
          type: "boolean"
        name:
          description: "Name of the job."
          type: "string"
        schedule:
          $ref: '#/components/schemas/BackupScheduleModel'
        storage:
          $ref: '#/components/schemas/BackupJobStorageImportModel'
        type:
          $ref: '#/components/schemas/EJobType'
        virtualMachines:
          $ref: '#/components/schemas/BackupJobVirtualMachinesSpec'
      required:
        - description
        - guestProcessing
        - isHighPriority
        - name
        - schedule
        - storage
        - type
        - virtualMachines
      type: "object"
    JobImportSpecCollection:
      properties:
        jobs:
          description: "Array of jobs."
          items:
            $ref: '#/components/schemas/JobImportSpec'
          type: "array"
          uniqueItems: true
      required:
        - jobs
      type: "object"
    JobModel:
      discriminator:
        mapping:
          Backup: '#/components/schemas/BackupJobModel'
        propertyName: "type"
      properties:
        description:
          description: "Description of the job."
          type: "string"
        id:
          description: "ID of the job."
          format: "uuid"
          type: "string"
        isDisabled:
          description: "If *true*, the job is disabled."
          type: "boolean"
        name:
          description: "Name of the job."
          type: "string"
        type:
          $ref: '#/components/schemas/EJobType'
      required:
        - id
        - name
        - description
        - type
        - isDisabled
      type: "object"
    JobScriptsSettingsModel:
      description: "Script settings."
      properties:
        dayOfWeek:
          description: "Days of the week when the scripts must be executed."
          items:
            $ref: '#/components/schemas/EDayOfWeek'
          type: "array"
          uniqueItems: true
        periodicityType:
          $ref: '#/components/schemas/EScriptPeriodicityType'
        postCommand:
          $ref: '#/components/schemas/ScriptCommand'
        preCommand:
          $ref: '#/components/schemas/ScriptCommand'
        runScriptEvery:
          description: "Number of the backup job session after which the scripts must be executed."
          type: "integer"
      type: "object"
    JobSpec:
      discriminator:
        mapping:
          Backup: '#/components/schemas/BackupJobSpec'
        propertyName: "type"
      properties:
        description:
          description: "Job description specified at the time of the job creation."
          type: "string"
        name:
          description: "Name of the job."
          type: "string"
        type:
          $ref: '#/components/schemas/EJobType'
      required:
        - name
        - description
        - type
      type: "object"
    JobStartSpec:
      properties:
        performActiveFull:
          default: false
          type: "boolean"
        startChainedJobs:
          default: false
          type: "boolean"
      required:
        - performActiveFull
      type: "object"
    JobStateModel:
      properties:
        description:
          description: "Description of the job."
          type: "string"
        id:
          description: "ID of the job."
          format: "uuid"
          type: "string"
        lastResult:
          $ref: '#/components/schemas/ESessionResult'
        lastRun:
          description: "Last run of the job."
          format: "date-time"
          type: "string"
        name:
          description: "Name of the job."
          type: "string"
        nextRun:
          description: "Next run of the job."
          format: "date-time"
          type: "string"
        objectsCount:
          description: "Number of objects processed by the job."
          type: "integer"
        repositoryId:
          description: "ID of the backup repository."
          format: "uuid"
          type: "string"
        repositoryName:
          description: "Name of the backup repository."
          type: "string"
        sessionId:
          description: "ID of the last job session."
          format: "uuid"
          type: "string"
        status:
          $ref: '#/components/schemas/EJobStatus'
        type:
          $ref: '#/components/schemas/EJobType'
        workload:
          $ref: '#/components/schemas/EJobWorkload'
      required:
        - id
        - name
        - type
        - description
        - status
        - lastResult
        - workload
        - objectsCount
      type: "object"
    JobStatesFilters:
      description: "Filters jobs by the specified parameters."
      properties:
        idFilter:
          format: "uuid"
          type: "string"
        isHighPriorityJobFilter:
          type: "boolean"
        lastResultFilter:
          $ref: '#/components/schemas/ESessionResult'
        lastRunAfterFilter:
          format: "date-time"
          type: "string"
        lastRunBeforeFilter:
          format: "date-time"
          type: "string"
        limit:
          description: "Returns the specified number of jobs."
          format: "int32"
          type: "integer"
        nameFilter:
          description: "Filters jobs by the `nameFilter` pattern. The pattern can match any job state parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
          type: "string"
        objectsCountFilter:
          type: "integer"
        orderAsc:
          description: "Sorts jobs in the ascending order by the `orderColumn` parameter."
          type: "boolean"
        orderColumn:
          $ref: '#/components/schemas/EJobStatesFiltersOrderColumn'
        repositoryIdFilter:
          format: "uuid"
          type: "string"
        skip:
          description: "Skips the specified number of jobs."
          format: "int32"
          type: "integer"
        statusFilter:
          $ref: '#/components/schemas/EJobStatus'
        typeFilter:
          $ref: '#/components/schemas/EJobType'
        workloadFilter:
          $ref: '#/components/schemas/EJobWorkload'
      type: "object"
    JobStatesResult:
      properties:
        data:
          description: "Array of job states."
          items:
            $ref: '#/components/schemas/JobStateModel'
          type: "array"
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
        - data
        - pagination
      type: "object"
    JobStopSpec:
      properties:
        gracefullStop:
          default: true
          type: "boolean"
      required:
        - gracefullStop
      type: "object"
    JobsFilters:
      description: "Filters jobs by the specified parameters."
      properties:
        limit:
          description: "Returns the specified number of jobs."
          format: "int32"
          type: "integer"
        nameFilter:
          description: "Filters jobs by the `nameFilter` pattern. The pattern can match any job parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
          type: "string"
        orderAsc:
          description: "Sorts jobs in the ascending order by the `orderColumn` parameter."
          type: "boolean"
        orderColumn:
          $ref: '#/components/schemas/EJobFiltersOrderColumn'
        skip:
          description: "Skips the specified number of jobs."
          format: "int32"
          type: "integer"
        typeFilter:
          $ref: '#/components/schemas/EJobType'
      type: "object"
    JobsResult:
      properties:
        data:
          description: "Array of jobs."
          items:
            $ref: '#/components/schemas/JobModel'
          type: "array"
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
        - data
        - pagination
      type: "object"
    LinuxCredentialsModel:
      allOf:
        - $ref: '#/components/schemas/CredentialsModel'
        - properties:
            SSHPort:
              description: "SSH port used to connect to a Linux server."
              type: "integer"
            addToSudoers:
              description: "If *true*, the account is automatically added to the sudoers file."
              type: "boolean"
            autoElevated:
              description: "If *true*, the permissions of the account are automatically elevated to the root user."
              type: "boolean"
            passphrase:
              description: "Passphrase that protects the private key."
              type: "string"
            privateKey:
              description: "Private key."
              type: "string"
            tag:
              description: "Tag used to identify the credentials record."
              type: "string"
            useSu:
              description: "If *true*, the `su` command is used for Linux distributions where the `sudo` command is not available."
              type: "boolean"
          type: "object"
    LinuxCredentialsSpec:
      allOf:
        - $ref: '#/components/schemas/CredentialsSpec'
        - properties:
            SSHPort:
              description: "SSH port used to connect to a Linux server."
              type: "integer"
            addToSudoers:
              description: "If *true*, the account is automatically added to the sudoers file."
              type: "boolean"
            autoElevated:
              description: "If *true*, the permissions of the account are automatically elevated to the root user."
              type: "boolean"
            passphrase:
              description: "Passphrase that protects the private key."
              type: "string"
            privateKey:
              description: "Private key."
              type: "string"
            rootPassword:
              description: "Password for the root account."
              type: "string"
            tag:
              description: "Tag used to identify the credentials record."
              type: "string"
            useSu:
              description: "If *true*, the `su` command is used for Linux distributions where the `sudo` command is not available."
              type: "boolean"
          type: "object"
    LinuxHostImportSpec:
      properties:
        credentials:
          $ref: '#/components/schemas/CredentialsImportModel'
        description:
          description: "Description of the server."
          type: "string"
        name:
          description: "Full DNS name or IP address of the server."
          type: "string"
        sshFingerprint:
          description: "SSH key fingerprint used to verify the server identity."
          type: "string"
        sshSettings:
          $ref: '#/components/schemas/LinuxHostSSHSettingsModel'
        type:
          $ref: '#/components/schemas/EManagedServerType'
      required:
        - credentials
        - description
        - name
        - type
        - sshFingerprint
      type: "object"
    LinuxHostModel:
      allOf:
        - $ref: '#/components/schemas/ManagedServerModel'
        - properties:
            sshSettings:
              $ref: '#/components/schemas/LinuxHostSSHSettingsModel'
          type: "object"
    LinuxHostSSHSettingsModel:
      description: "SSH settings."
      properties:
        managementPort:
          description: "Port used as a control channel from the Veeam Backup & Replication console to the Linux server."
          type: "integer"
        portRangeEnd:
          description: "End port used for data transfer."
          type: "integer"
        portRangeStart:
          description: "Start port used for data transfer."
          type: "integer"
        serverThisSide:
          description: "If *true*, the server is run on this side."
          type: "boolean"
        sshTimeOutMs:
          description: "SSH timeout, in ms. If a task targeted at the server is inactive after the timeout, the task is terminated."
          type: "integer"
      type: "object"
    LinuxHostSpec:
      allOf:
        - $ref: '#/components/schemas/ManagedServerSpec'
      properties:
        sshFingerprint:
          description: "SSH key fingerprint used to verify the server identity. For details on how to get the fingerprint, see [Get TLS Certificate or SSH Fingerprint](#operation/GetConnectionCertificate).\n"
          type: "string"
        sshSettings:
          $ref: '#/components/schemas/LinuxHostSSHSettingsModel'
      required:
        - sshFingerprint
      type: "object"
    LinuxLocalRepositorySettingsModel:
      description: "Repository settings."
      properties:
        advancedSettings:
          $ref: '#/components/schemas/RepositoryAdvancedSettingsModel'
        makeRecentBackupsImmutableDays:
          description: "Number of days to keep immutable backups."
          type: "integer"
        maxTaskCount:
          description: "Maximum number of concurrent tasks."
          type: "integer"
        path:
          description: "Path to the folder where backup files are stored."
          type: "string"
        readWriteRate:
          description: "Maximum rate that restricts the total speed of reading and writing data to the backup repository disk."
          type: "integer"
        useFastCloningOnXFSVolumes:
          description: "[For Linux repository] If *true*, fast cloning on XFS volumes is used.\n"
          type: "boolean"
        useImmutableBackups:
          description: "If *true*, the Object Lock feature is used to protect recent backups."
          type: "boolean"
      type: "object"
    LinuxLocalStorageImportSpec:
      properties:
        description:
          description: "Description of the backup repository."
          type: "string"
        hostName:
          description: "ID of the server that is used as a backup repository."
          type: "string"
        mountServer:
          $ref: '#/components/schemas/MountServerSettingsImportSpec'
        name:
          description: "Name of the backup repository."
          type: "string"
        repository:
          $ref: '#/components/schemas/LinuxLocalRepositorySettingsModel'
        tag:
          description: "VMware vSphere tag assigned to the backup repository."
          type: "string"
        type:
          $ref: '#/components/schemas/ERepositoryType'
      required:
        - description
        - hostName
        - kind
        - mountServer
        - name
        - repository
        - tag
        - type
      type: "object"
    LinuxLocalStorageModel:
      allOf:
        - $ref: '#/components/schemas/RepositoryModel'
        - properties:
            hostId:
              description: "ID of the server that is used as a backup repository."
              format: "uuid"
              type: "string"
            mountServer:
              $ref: '#/components/schemas/MountServerSettingsModel'
            repository:
              $ref: '#/components/schemas/LinuxLocalRepositorySettingsModel'
          required:
            - hostId
            - mountServer
            - repository
          type: "object"
      description: "Direct attached storage."
    LinuxLocalStorageSpec:
      allOf:
        - $ref: '#/components/schemas/RepositorySpec'
        - properties:
            hostId:
              description: "ID of the server that is used as a backup repository."
              format: "uuid"
              type: "string"
            mountServer:
              $ref: '#/components/schemas/MountServerSettingsModel'
            repository:
              $ref: '#/components/schemas/LinuxLocalRepositorySettingsModel'
          required:
            - hostId
            - mountServer
            - repository
          type: "object"
    ManageServerExportSpec:
      properties:
        ids:
          description: "Array of server IDs."
          items:
            format: "uuid"
            type: "string"
          type: "array"
          uniqueItems: true
        names:
          description: "Array of server names. Wildcard characters are supported."
          items:
            type: "string"
          type: "array"
          uniqueItems: true
        types:
          description: "Array of server types."
          items:
            $ref: '#/components/schemas/EManagedServerType'
          type: "array"
          uniqueItems: true
      type: "object"
    ManageServerImportSpecCollection:
      properties:
        linuxHosts:
          description: "Array of managed Linux servers."
          items:
            $ref: '#/components/schemas/LinuxHostImportSpec'
          type: "array"
          uniqueItems: true
        viHosts:
          description: "Array of VMware vSphere servers."
          items:
            $ref: '#/components/schemas/ViHostImportSpec'
          type: "array"
          uniqueItems: true
        windowsHosts:
          description: "Array of managed Microsoft Windows servers."
          items:
            $ref: '#/components/schemas/WindowsHostImportSpec'
          type: "array"
          uniqueItems: true
      type: "object"
    ManagedServerModel:
      discriminator:
        mapping:
          LinuxHost: '#/components/schemas/LinuxHostModel'
          ViHost: '#/components/schemas/ViHostModel'
          WindowsHost: '#/components/schemas/WindowsHostModel'
        propertyName: "type"
      properties:
        credentialsId:
          description: "ID of a credentials record used to connect to the server."
          format: "uuid"
          type: "string"
        description:
          description: "Description of the server."
          type: "string"
        id:
          description: "ID of the server."
          format: "uuid"
          type: "string"
        name:
          description: "Full DNS name or IP address of the server."
          type: "string"
        type:
          $ref: '#/components/schemas/EManagedServerType'
      required:
        - credentialsId
        - description
        - id
        - name
        - type
      type: "object"
    ManagedServerSpec:
      discriminator:
        mapping:
          LinuxHost: '#/components/schemas/LinuxHostSpec'
          ViHost: '#/components/schemas/ViHostSpec'
          WindowsHost: '#/components/schemas/WindowsHostSpec'
        propertyName: "type"
      properties:
        credentialsId:
          description: "ID of the credentials used to connect to the server."
          format: "uuid"
          type: "string"
        description:
          description: "Description of the server."
          type: "string"
        name:
          description: "Full DNS name or IP address of the server."
          type: "string"
        type:
          $ref: '#/components/schemas/EManagedServerType'
      required:
        - credentialsId
        - description
        - name
        - type
      type: "object"
    ManagedServersFilters:
      properties:
        limit:
          format: "int32"
          type: "integer"
        nameFilter:
          type: "string"
        orderAsc:
          type: "boolean"
        orderColumn:
          $ref: '#/components/schemas/EManagedServersFiltersOrderColumn'
        skip:
          format: "int32"
          type: "integer"
        typeFilter:
          $ref: '#/components/schemas/EManagedServerType'
        viTypeFilter:
          $ref: '#/components/schemas/EViHostType'
      type: "object"
    ManagedServersResult:
      properties:
        data:
          description: "Array of managed servers."
          items:
            $ref: '#/components/schemas/ManagedServerModel'
          type: "array"
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
        - data
        - pagination
      type: "object"
    MountServerSettingsImportSpec:
      properties:
        mountServerName:
          description: "Name of the mount server."
          type: "string"
        vPowerNFSEnabled:
          description: "If *true*, the vPower NFS Service is enabled on the mount server."
          type: "boolean"
        vPowerNFSPortSettings:
          $ref: '#/components/schemas/VPowerNFSPortSettingsModel'
        writeCacheFolder:
          description: "Path to the folder used for writing cache during mount operations."
          type: "string"
      required:
        - mountServerName
        - vPowerNFSEnabled
        - writeCacheFolder
      type: "object"
    MountServerSettingsModel:
      description: "Settings for the mount server that is used for file-level and application items restore."
      properties:
        mountServerId:
          description: "ID of the mount server."
          format: "uuid"
          type: "string"
        vPowerNFSEnabled:
          description: "If *true*, the vPower NFS Service is enabled on the mount server."
          type: "boolean"
        vPowerNFSPortSettings:
          $ref: '#/components/schemas/VPowerNFSPortSettingsModel'
        writeCacheFolder:
          description: "Path to the folder used for writing cache during mount operations."
          type: "string"
      required:
        - mountServerId
        - vPowerNFSEnabled
        - writeCacheFolder
      type: "object"
    NetworkRepositorySettingsModel:
      description: "Repository settings."
      properties:
        advancedSettings:
          $ref: '#/components/schemas/RepositoryAdvancedSettingsModel'
        maxTaskCount:
          description: "Maximum number of concurrent tasks."
          type: "integer"
        readWriteRate:
          description: "Maximum rate that restricts the total speed of reading and writing data to the backup repository disk."
          type: "integer"
      type: "object"
    NfsRepositoryShareSettingsModel:
      description: "Share settings."
      properties:
        gatewayServer:
          $ref: '#/components/schemas/RepositoryShareGatewayModel'
        sharePath:
          description: "Path to the shared folder that that is used as a backup repository."
          type: "string"
      required:
        - sharePath
      type: "object"
    NfsRepositoryShareSettingsSpec:
      properties:
        gatewayServer:
          $ref: '#/components/schemas/RepositoryShareGatewayImportSpec'
        sharePath:
          description: "Path to the shared folder that that is used as a backup repository."
          type: "string"
      required:
        - sharePath
      type: "object"
    NfsStorageImportSpec:
      properties:
        description:
          description: "Description of the backup repository."
          type: "string"
        mountServer:
          $ref: '#/components/schemas/MountServerSettingsImportSpec'
        name:
          description: "Name of the backup repository."
          type: "string"
        repository:
          $ref: '#/components/schemas/NetworkRepositorySettingsModel'
        share:
          $ref: '#/components/schemas/NfsRepositoryShareSettingsSpec'
        tag:
          description: "VMware vSphere tag assigned to the backup repository."
          type: "string"
        type:
          $ref: '#/components/schemas/ERepositoryType'
      required:
        - description
        - kind
        - mountServer
        - name
        - repository
        - share
        - tag
        - type
      type: "object"
    NfsStorageModel:
      allOf:
        - $ref: '#/components/schemas/RepositoryModel'
        - properties:
            mountServer:
              $ref: '#/components/schemas/MountServerSettingsModel'
            repository:
              $ref: '#/components/schemas/NetworkRepositorySettingsModel'
            share:
              $ref: '#/components/schemas/NfsRepositoryShareSettingsModel'
          required:
            - mountServer
            - repository
            - share
          type: "object"
      description: "Network attached storage."
    NfsStorageSpec:
      allOf:
        - $ref: '#/components/schemas/RepositorySpec'
        - properties:
            mountServer:
              $ref: '#/components/schemas/MountServerSettingsModel'
            repository:
              $ref: '#/components/schemas/NetworkRepositorySettingsModel'
            share:
              $ref: '#/components/schemas/NfsRepositoryShareSettingsModel'
          required:
            - mountServer
            - repository
            - share
          type: "object"
    NotificationSettingsModel:
      description: "Notification settings for the backup job."
      properties:
        emailNotifications:
          $ref: '#/components/schemas/EmailNotificationSettingsModel'
        sendSNMPNotifications:
          description: "If *true*, SNMP notifications are enabled for this job."
          type: "boolean"
        vmAttribute:
          $ref: '#/components/schemas/NotificationVmAttributeSettingsModel'
      type: "object"
    NotificationVmAttributeSettingsModel:
      description: "VM attribute settings."
      properties:
        appendToExisitingValue:
          description: "If *true*, information about successfully performed backup is appended to the existing value of the attribute added by the user."
          type: "boolean"
        isEnabled:
          description: "If *true*, information about successfully performed backup is written to a VM attribute."
          type: "boolean"
        notes:
          description: "Name of the VM attribute."
          type: "string"
      required:
        - isEnabled
      type: "object"
    ObjectRestorePointDiskModel:
      properties:
        capacity:
          description: "Capacity of the disk."
          format: "int64"
          type: "integer"
        name:
          description: "Name of the disk."
          type: "string"
        state:
          $ref: '#/components/schemas/EDiskInfoProcessState'
        type:
          $ref: '#/components/schemas/EDiskInfoType'
        uid:
          description: "ID of the disk."
          type: "string"
      required:
        - uid
        - type
        - name
        - capacity
        - state
      type: "object"
    ObjectRestorePointDisksResult:
      properties:
        data:
          description: "Array of disks."
          items:
            $ref: '#/components/schemas/ObjectRestorePointDiskModel'
          type: "array"
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
        - data
        - pagination
      type: "object"
    ObjectRestorePointModel:
      properties:
        allowedOperations:
          description: "Array of operations allowed for the restore point."
          items:
            $ref: '#/components/schemas/EObjectRestorePointOperation'
          type: "array"
        backupId:
          description: "ID of a backup that contains the restore point."
          format: "uuid"
          type: "string"
        creationTime:
          description: "Date and time when the restore point was created."
          format: "date-time"
          type: "string"
        id:
          format: "uuid"
          type: "string"
        name:
          type: "string"
        platformId:
          description: "ID of a platform on which the object was created."
          format: "uuid"
          type: "string"
        platformName:
          $ref: '#/components/schemas/EPlatformType'
      required:
        - id
        - name
        - paltformName
        - platformId
        - creationTime
        - backupId
        - allowedOperations
      type: "object"
    ObjectRestorePointsFilters:
      properties:
        backupIdFilter:
          format: "uuid"
          type: "string"
        backupObjectIdFilter:
          format: "uuid"
          type: "string"
        createdAfterFilter:
          format: "date-time"
          type: "string"
        createdBeforeFilter:
          format: "date-time"
          type: "string"
        limit:
          format: "int32"
          type: "integer"
        nameFilter:
          type: "string"
        orderAsc:
          type: "boolean"
        orderColumn:
          $ref: '#/components/schemas/EObjectRestorePointsFiltersOrderColumn'
        platformIdFilter:
          format: "uuid"
          type: "string"
        platformNameFilter:
          $ref: '#/components/schemas/EPlatformType'
        skip:
          format: "int32"
          type: "integer"
      type: "object"
    ObjectRestorePointsResult:
      properties:
        data:
          description: "Array of restore points."
          items:
            $ref: '#/components/schemas/ObjectRestorePointModel'
          type: "array"
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
        - data
        - pagination
      type: "object"
    PaginationResult:
      description: "Pagination settings."
      properties:
        count:
          description: "Number of returned results."
          format: "int32"
          type: "integer"
        limit:
          description: "Maximum number of results to return."
          format: "int32"
          type: "integer"
        skip:
          description: "Number of skipped results."
          format: "int32"
          type: "integer"
        total:
          description: "Total number of results."
          format: "int32"
          type: "integer"
      required:
        - total
        - count
      type: "object"
    PerformanceExtentModel:
      properties:
        id:
          description: "ID of the backup repository added as a performance extent."
          format: "uuid"
          type: "string"
        name:
          description: "Name of the backup repository added as a performance extent."
          type: "string"
        status:
          $ref: '#/components/schemas/ERepositoryExtentStatusType'
      required:
        - id
        - name
        - status
      type: "object"
    PerformanceTierAdvancedSettingsModel:
      description: "Advanced settings of the performance tier."
      properties:
        fullWhenExtentOffline:
          description: "If *true*, Veeam Backup & Replication creates a full backup file instead of an incremental backup file in case the required extent is offline."
          type: "boolean"
        perVmBackup:
          description: "If *true*, Veeam Backup & Replication creates a separate backup file for every VM in the job."
          type: "boolean"
      type: "object"
    PerformanceTierModel:
      description: "Performance tier."
      properties:
        advancedSettings:
          $ref: '#/components/schemas/PerformanceTierAdvancedSettingsModel'
        performanceExtents:
          description: "Array of performance extents."
          items:
            $ref: '#/components/schemas/PerformanceExtentModel'
          type: "array"
      type: "object"
    PlacementPolicyModel:
      description: "Backup file placement policy."
      properties:
        settings:
          items:
            $ref: '#/components/schemas/BackupPlacementSettingsModel'
          type: "array"
        type:
          $ref: '#/components/schemas/EPlacementPolicyType'
      required:
        - type
        - settings
      type: "object"
    PreferredNetworkModel:
      properties:
        cidrNotation:
          description: "CIDR notation."
          type: "string"
        ipAddress:
          description: "IP address."
          type: "string"
        subnetMask:
          description: "Subnet mask."
          type: "string"
      type: "object"
    PreferredNetworksModel:
      description: "Preferred networks used for backup and replication traffic."
      properties:
        isEnabled:
          description: "If *true*, prefered networks are enabled."
          type: "boolean"
        networks:
          description: "Array of networks."
          items:
            $ref: '#/components/schemas/PreferredNetworkModel'
          type: "array"
      required:
        - isEnabled
      type: "object"
    PrimaryStorageIntegrationSettingsModel:
      description: "Primary storage integration settings for the backup job."
      properties:
        failoverToStandardBackup:
          description: "If *true*, failover to the regular VM processing mode is enabled. In this case, if backup from storage snapshot fails, VM snapshots are used."
          type: "boolean"
        isEnabled:
          description: "If *true*, the primary storage integration is enabled. In this case, storage snapshots (instead of VM snapshots) are used for VM data processing."
          type: "boolean"
        limitProcessedVm:
          description: "If *true*, the number of processed VMs per storage snapshot is limited."
          type: "boolean"
        limitProcessedVmCount:
          description: "Number of processed VMs per storage snapshot."
          type: "integer"
      required:
        - isEnabled
      type: "object"
    PrivateKeyChangeSpec:
      properties:
        passphrase:
          description: "Passphrase that protects the private key."
          type: "string"
        privateKey:
          description: "Private key."
          type: "string"
      required:
        - privateKey
      type: "object"
    ProxiesFilters:
      properties:
        hostIdFilter:
          format: "uuid"
          type: "string"
        limit:
          format: "int32"
          type: "integer"
        nameFilter:
          type: "string"
        orderAsc:
          type: "boolean"
        orderColumn:
          $ref: '#/components/schemas/EProxiesFiltersOrderColumn'
        skip:
          format: "int32"
          type: "integer"
        typeFilter:
          $ref: '#/components/schemas/EProxyType'
      type: "object"
    ProxiesResult:
      properties:
        data:
          description: "Array of backup proxies."
          items:
            $ref: '#/components/schemas/ProxyModel'
          type: "array"
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
        - data
        - pagination
      type: "object"
    ProxyDatastoreModel:
      properties:
        datastore:
          $ref: '#/components/schemas/VmwareObjectModel'
        vmCount:
          description: "Number of VMs."
          type: "integer"
      type: "object"
    ProxyDatastoreSettingsModel:
      description: "Datastores to which the backup proxy has a direct SAN or NFS connection."
      properties:
        autoSelect:
          description: "If *true*, all datastores that the backup proxy can access are detected automatically."
          type: "boolean"
        datastores:
          description: "Array of datastores to which the backup proxy has a direct SAN or NFS connection."
          items:
            $ref: '#/components/schemas/ProxyDatastoreModel'
          type: "array"
      required:
        - autoSelect
      type: "object"
    ProxyExportSpec:
      properties:
        ids:
          description: "Array of backup proxy IDs."
          items:
            format: "uuid"
            type: "string"
          type: "array"
          uniqueItems: true
        names:
          description: "Array of backup proxy names. Wildcard characters are supported."
          items:
            type: "string"
          type: "array"
          uniqueItems: true
        types:
          description: "Array of backup proxy types."
          items:
            $ref: '#/components/schemas/EProxyType'
          type: "array"
          uniqueItems: true
      type: "object"
    ProxyImportSpec:
      properties:
        description:
          description: "Description of the backup proxy."
          type: "string"
        server:
          $ref: '#/components/schemas/ProxyServerSettingsImportSpec'
        type:
          $ref: '#/components/schemas/EProxyType'
      required:
        - description
        - server
        - type
      type: "object"
    ProxyImportSpecCollection:
      properties:
        proxies:
          description: "Array of backup proxies."
          items:
            $ref: '#/components/schemas/ProxyImportSpec'
          type: "array"
          uniqueItems: true
      required:
        - proxies
      type: "object"
    ProxyModel:
      discriminator:
        mapping:
          ViProxy: '#/components/schemas/ViProxyModel'
        propertyName: "type"
      properties:
        description:
          description: "Description of the backup proxy."
          type: "string"
        id:
          description: "ID of the backup proxy."
          format: "uuid"
          type: "string"
        name:
          description: "Name of the backup proxy."
          type: "string"
        type:
          $ref: '#/components/schemas/EProxyType'
      required:
        - id
        - description
        - name
        - type
      type: "object"
    ProxyServerSettingsImportSpec:
      description: "Settings of the server that is used as a backup proxy."
      properties:
        connectedDatastores:
          $ref: '#/components/schemas/ProxyDatastoreSettingsModel'
        failoverToNetwork:
          type: "boolean"
        hostName:
          description: "Name of the server."
          type: "string"
        hostTag:
          description: "Tag assigned to the server."
          type: "string"
        hostToProxyEncryption:
          description: "[For the Network mode] If *true*, VM data is transferred over an encrypted TLS connection.\n"
          type: "boolean"
        maxTaskCount:
          description: "Maximum number of concurrent tasks."
          type: "integer"
        transportMode:
          $ref: '#/components/schemas/EBackupProxyTransportMode'
      required:
        - hostName
      type: "object"
    ProxyServerSettingsModel:
      description: "Server settings for the backup proxy."
      properties:
        connectedDatastores:
          $ref: '#/components/schemas/ProxyDatastoreSettingsModel'
        failoverToNetwork:
          description: "[For the Direct storage access and Virtual appliance transport modes] If *true*, Veeam Backup & Replication failovers to the network transport mode in case the primary mode fails or is unavailable.\n"
          type: "boolean"
        hostId:
          description: "ID of the server."
          format: "uuid"
          type: "string"
        hostToProxyEncryption:
          description: "[For the Network mode] If *true*, VM data is transferred over an encrypted TLS connection.\n"
          type: "boolean"
        maxTaskCount:
          description: "Maximum number of concurrent tasks."
          type: "integer"
        transportMode:
          $ref: '#/components/schemas/EBackupProxyTransportMode'
      required:
        - hostId
      type: "object"
    ProxySpec:
      discriminator:
        mapping:
          ViProxy: '#/components/schemas/ViProxySpec'
        propertyName: "type"
      properties:
        description:
          description: "Description of the backup proxy."
          type: "string"
        type:
          $ref: '#/components/schemas/EProxyType'
      required:
        - description
        - type
      type: "object"
    RepositoriesFilters:
      properties:
        hostIdFilter:
          format: "uuid"
          type: "string"
        limit:
          format: "int32"
          type: "integer"
        nameFilter:
          type: "string"
        orderAsc:
          type: "boolean"
        orderColumn:
          $ref: '#/components/schemas/ERepositoryFiltersOrderColumn'
        pathFilter:
          type: "string"
        skip:
          format: "int32"
          type: "integer"
        typeFilter:
          $ref: '#/components/schemas/ERepositoryType'
        vmbApiFilter:
          description: "VmbApiFilterModel as json serialized in base64 format (see VmbApiFilterModel)"
          type: "string"
      type: "object"
    RepositoriesResult:
      properties:
        data:
          description: "Array of backup repositories."
          items:
            $ref: '#/components/schemas/RepositoryModel'
          type: "array"
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
        - data
        - pagination
      type: "object"
    RepositoryAdvancedSettingsModel:
      description: "Advanced settings for the backup repository."
      properties:
        alignDataBlocks:
          description: "If *true*, Veeam Backup & Replication aligns VM data saved to a backup file at a 4 KB block boundary."
          type: "boolean"
        decompressBeforeStoring:
          description: "If *true*, Veeam Backup & Replication decompresses backup data blocks before storing to improve deduplication ratios."
          type: "boolean"
        perVmBackup:
          description: "If *true*, Veeam Backup & Replication creates a separate backup file for every VM in the job."
          type: "boolean"
        rotatedDrives:
          description: "If *true*, the repository drive is rotated."
          type: "boolean"
      type: "object"
    RepositoryExportSpec:
      properties:
        ids:
          description: "Array of backup repository IDs."
          items:
            format: "uuid"
            type: "string"
          type: "array"
          uniqueItems: true
        names:
          description: "Array of repository names. Wildcard characters are supported."
          items:
            type: "string"
          type: "array"
          uniqueItems: true
        types:
          description: "Array of backup repository types."
          items:
            $ref: '#/components/schemas/ERepositoryType'
          type: "array"
          uniqueItems: true
      type: "object"
    RepositoryImportSpecCollection:
      properties:
        LinuxLocalRepositories:
          description: "Array of linux local storages."
          items:
            $ref: '#/components/schemas/LinuxLocalStorageImportSpec'
          type: "array"
          uniqueItems: true
        NfsRepositories:
          description: "Array of network attached storages."
          items:
            $ref: '#/components/schemas/NfsStorageImportSpec'
          type: "array"
          uniqueItems: true
        SmbRepositories:
          description: "Array of network attached storages."
          items:
            $ref: '#/components/schemas/SmbStorageImportSpec'
          type: "array"
          uniqueItems: true
        WindowsLocalRepositories:
          description: "Array of windows local storages."
          items:
            $ref: '#/components/schemas/WindowsLocalStorageImportSpec'
          type: "array"
          uniqueItems: true
      type: "object"
    RepositoryModel:
      discriminator:
        mapping:
          LinuxLocal: '#/components/schemas/LinuxLocalStorageModel'
          Nfs: '#/components/schemas/NfsStorageModel'
          Smb: '#/components/schemas/SmbStorageModel'
          WinLocal: '#/components/schemas/WindowsLocalStorageModel'
        propertyName: "type"
      properties:
        description:
          description: "Description of the backup repository."
          type: "string"
        id:
          description: "ID of the backup repository."
          format: "uuid"
          type: "string"
        name:
          description: "Name of the backup repository."
          type: "string"
        tag:
          description: "VMware vSphere tag assigned to the backup repository."
          type: "string"
        type:
          $ref: '#/components/schemas/ERepositoryType'
      required:
        - description
        - id
        - name
        - type
        - kind
      type: "object"
    RepositoryShareGatewayImportSpec:
      description: "Settings for the gateway server."
      properties:
        autoSelect:
          description: "If *true*, Veeam Backup & Replication automatically selects a gateway server."
          type: "boolean"
        gatewayServerName:
          description: "Name of the gateway server."
          type: "string"
      type: "object"
    RepositoryShareGatewayModel:
      description: "Settings for the gateway server."
      properties:
        autoSelect:
          description: "If *true*, Veeam Backup & Replication automatically selects a gateway server."
          type: "boolean"
        gatewayServerId:
          description: "ID of the gateway server."
          format: "uuid"
          type: "string"
      type: "object"
    RepositorySpec:
      discriminator:
        mapping:
          LinuxLocal: '#/components/schemas/LinuxLocalStorageSpec'
          Nfs: '#/components/schemas/NfsStorageSpec'
          Smb: '#/components/schemas/SmbStorageSpec'
          WinLocal: '#/components/schemas/WindowsLocalStorageSpec'
        propertyName: "type"
      properties:
        description:
          description: "Description of the backup repository."
          type: "string"
        name:
          description: "Name of the backup repository."
          type: "string"
        tag:
          description: "VMware vSphere tag assigned to the backup repository."
          type: "string"
        type:
          $ref: '#/components/schemas/ERepositoryType'
      required:
        - description
        - name
        - type
        - kind
      type: "object"
    RepositoryStateModel:
      properties:
        capacityGB:
          description: "Repository capacity in GB."
          format: "double"
          type: "number"
        description:
          type: "string"
        freeGB:
          description: "Repository free space in GB."
          format: "double"
          type: "number"
        hostId:
          description: "ID of the server that is used as a backup repository."
          format: "uuid"
          type: "string"
        hostName:
          description: "Name of the server that is used as a backup repository."
          type: "string"
        id:
          description: "ID of the backup repository."
          format: "uuid"
          type: "string"
        name:
          description: "Name of the backup repository."
          type: "string"
        path:
          description: "Path to the folder where backup files are stored."
          type: "string"
        type:
          $ref: '#/components/schemas/ERepositoryType'
        usedSpaceGB:
          description: "Repository used space in GB."
          format: "double"
          type: "number"
      required:
        - id
        - name
        - type
        - description
        - capacityGB
        - freeGB
        - usedSpaceGB
      type: "object"
    RepositoryStatesFilters:
      description: "Filters repositories by the specified parameters."
      properties:
        capacityFilter:
          description: "Filters repositories by repository capacity."
          format: "double"
          type: "number"
        freeSpaceFilter:
          description: "Filters repositories by repository free space."
          format: "double"
          type: "number"
        idFilter:
          format: "uuid"
          type: "string"
        limit:
          description: "Returns the specified number of repositories."
          format: "int32"
          type: "integer"
        nameFilter:
          description: "Filters repositories by the `nameFilter` pattern. The pattern can match any repository parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
          type: "string"
        orderAsc:
          description: "Sorts repositories in the ascending order by the `orderColumn` parameter."
          type: "boolean"
        orderColumn:
          $ref: '#/components/schemas/ERepositoryStatesFiltersOrderColumn'
        skip:
          description: "Skips the specified number of repositories."
          format: "int32"
          type: "integer"
        typeFilter:
          $ref: '#/components/schemas/ERepositoryType'
        usedSpaceFilter:
          description: "Filters repositories by repository used space."
          format: "double"
          type: "number"
      type: "object"
    RepositoryStatesResult:
      properties:
        data:
          description: "Array of repository states."
          items:
            $ref: '#/components/schemas/RepositoryStateModel'
          type: "array"
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
        - data
        - pagination
      type: "object"
    ScaleOutExtentMaintenanceSpec:
      properties:
        repositoryIds:
          items:
            format: "uuid"
            type: "string"
          type: "array"
      required:
        - repositoryIds
      type: "object"
    ScaleOutRepositoriesFilters:
      properties:
        limit:
          description: "Maximum number of repositories to return."
          format: "int32"
          type: "integer"
        nameFilter:
          description: "Filters repositories by the `nameFilter` substring. The substring can be part of any repository parameter."
          type: "string"
        orderAsc:
          description: "Sorts repositories in the ascending order by the `orderColumn` parameter."
          type: "boolean"
        orderColumn:
          $ref: '#/components/schemas/EScaleOutRepositoryFiltersOrderColumn'
        skip:
          description: "Number of repositories to skip."
          format: "int32"
          type: "integer"
      type: "object"
    ScaleOutRepositoriesResult:
      properties:
        data:
          description: "Array of scale-out backup repositories."
          items:
            $ref: '#/components/schemas/ScaleOutRepositoryModel'
          type: "array"
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
        - data
        - pagination
      type: "object"
    ScaleOutRepositoryModel:
      properties:
        archiveTier:
          $ref: '#/components/schemas/ArchiveTierModel'
        capacityTier:
          $ref: '#/components/schemas/CapacityTierModel'
        description:
          description: "Description of the scale-out backup repository."
          type: "string"
        id:
          description: "ID of the scale-out backup repository."
          format: "uuid"
          type: "string"
        name:
          description: "Name of the scale-out backup repository."
          type: "string"
        performanceTier:
          $ref: '#/components/schemas/PerformanceTierModel'
        placementPolicy:
          $ref: '#/components/schemas/PlacementPolicyModel'
        tag:
          description: "Tag assigned to of the scale-out backup repository."
          type: "string"
      required:
        - id
        - name
        - description
        - tag
        - performanceTier
      type: "object"
    ScheduleAfterThisJobModel:
      description: "Job chaining options."
      properties:
        isEnabled:
          description: "If *true*, job chaining is enabled."
          type: "boolean"
        jobName:
          description: "Name of the preceding job."
          type: "string"
      required:
        - isEnabled
      type: "object"
    ScheduleBackupWindowModel:
      properties:
        WindowSetting:
          $ref: '#/components/schemas/BackupWindowSettingModel'
        isEnabled:
          default: false
          description: "If *true*, periodic schedule is enabled."
          type: "boolean"
      required:
        - isEnabled
      type: "object"
    ScheduleDailyModel:
      description: "Daily scheduling options."
      properties:
        dailyKind:
          $ref: '#/components/schemas/EDailyKinds'
        days:
          description: "Days of the week when the job must start."
          items:
            $ref: '#/components/schemas/EDayOfWeek'
          type: "array"
          uniqueItems: true
        isEnabled:
          default: true
          description: "If *true*, daily schedule is enabled."
          type: "boolean"
        localTime:
          description: "Local time when the job must start."
          format: "time"
          type: "string"
      required:
        - isEnabled
      type: "object"
    ScheduleMonthlyModel:
      description: "Monthly scheduling options."
      properties:
        dayNumberInMonth:
          $ref: '#/components/schemas/EDayNumberInMonth'
        dayOfMonth:
          description: "Day of the month when the job must start."
          type: "integer"
        dayOfWeek:
          $ref: '#/components/schemas/EDayOfWeek'
        isEnabled:
          default: false
          description: "If *true*, monthly schedule is enabled."
          type: "boolean"
        localTime:
          description: "Local time when the job must start."
          format: "time"
          type: "string"
        months:
          description: "Months when the job must start."
          items:
            $ref: '#/components/schemas/EMonth'
          type: "array"
          uniqueItems: true
      required:
        - isEnabled
      type: "object"
    SchedulePeriodicallyModel:
      description: "Periodic scheduling options."
      properties:
        backupWindow:
          $ref: '#/components/schemas/BackupWindowSettingModel'
        frequency:
          description: "Number of time units that defines the time interval."
          type: "integer"
        isEnabled:
          default: false
          description: "If *true*, periodic schedule is enabled."
          type: "boolean"
        periodicallyKind:
          $ref: '#/components/schemas/EPeriodicallyKinds'
      required:
        - isEnabled
      type: "object"
    ScheduleRetryModel:
      description: "Retry options."
      properties:
        awaitMinutes:
          description: "Time interval between job retries in minutes."
          type: "integer"
        isEnabled:
          default: false
          description: "If *true*, retry options are enabled."
          type: "boolean"
        retryCount:
          description: "Number of retries set for the job."
          type: "integer"
      type: "object"
    ScriptCommand:
      description: "Script settings."
      properties:
        command:
          description: "Path to the script."
          type: "string"
        isEnabled:
          description: "If *true*, script execution is enabled."
          type: "boolean"
      required:
        - isEnabled
      type: "object"
    ServerTimeModel:
      properties:
        serverTime:
          description: "Current date and time on the server."
          format: "date-time"
          type: "string"
        timeZone:
          type: "string"
      required:
        - serverTime
      type: "object"
    ServicesFilters:
      properties:
        limit:
          format: "int32"
          type: "integer"
        nameFilter:
          type: "string"
        orderAsc:
          type: "boolean"
        orderColumn:
          $ref: '#/components/schemas/EServicesFiltersOrderColumn'
        skip:
          format: "int32"
          type: "integer"
      type: "object"
    ServicesModel:
      properties:
        name:
          description: "Name of the service."
          type: "string"
        port:
          description: "Port used to communicate with the service."
          type: "integer"
      required:
        - name
        - port
      type: "object"
    ServicesResult:
      properties:
        data:
          description: "Array of services."
          items:
            $ref: '#/components/schemas/ServicesModel'
          type: "array"
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
        - data
        - pagination
      type: "object"
    SessionLogRecordModel:
      description: "Record of the session log."
      properties:
        description:
          description: "Description of the log record."
          type: "string"
        id:
          description: "ID of the log record."
          type: "integer"
        startTime:
          description: "Date and time the operation was started."
          format: "date-time"
          type: "string"
        status:
          $ref: '#/components/schemas/ETaskLogRecordStatus'
        title:
          description: "Title of the log record."
          type: "string"
        updateTime:
          description: "Date and time the log record was updated."
          format: "date-time"
          type: "string"
      type: "object"
    SessionLogResult:
      description: "Log of the session."
      properties:
        records:
          description: "Array of log records."
          items:
            $ref: '#/components/schemas/SessionLogRecordModel'
          type: "array"
        totalRecords:
          description: "Total number of records."
          type: "integer"
      type: "object"
    SessionModel:
      properties:
        activityId:
          description: "ID of the activity."
          format: "uuid"
          type: "string"
        creationTime:
          description: "Date and time the session was created."
          format: "date-time"
          type: "string"
        endTime:
          description: "Date and time the session was ended."
          format: "date-time"
          type: "string"
        id:
          description: "ID of the session."
          format: "uuid"
          type: "string"
        name:
          description: "Name of the session."
          type: "string"
        parentSessionId:
          description: "ID of the parent session."
          format: "uuid"
          type: "string"
        progressPercent:
          description: "Progress percentage of the session."
          type: "integer"
        resourceId:
          description: "ID of the resource."
          format: "uuid"
          type: "string"
        resourceReference:
          description: "URI of the resource."
          type: "string"
        result:
          $ref: '#/components/schemas/SessionResultModel'
        sessionType:
          $ref: '#/components/schemas/ESessionType'
        state:
          $ref: '#/components/schemas/ESessionState'
        usn:
          description: "Update sequence number."
          format: "int64"
          type: "integer"
      required:
        - activityId
        - creationTime
        - id
        - name
        - sessionType
        - state
        - usn
      type: "object"
    SessionResultModel:
      properties:
        isCanceled:
          description: "If *true*, the session has been canceled."
          type: "boolean"
        message:
          description: "Message that explains the session result."
          type: "string"
        result:
          $ref: '#/components/schemas/ESessionResult'
      required:
        - result
      type: "object"
    SessionsFilters:
      properties:
        createdAfterFilter:
          format: "date-time"
          type: "string"
        createdBeforeFilter:
          format: "date-time"
          type: "string"
        endedAfterFilter:
          format: "date-time"
          type: "string"
        endedBeforeFilter:
          format: "date-time"
          type: "string"
        jobIdFilter:
          format: "uuid"
          type: "string"
        limit:
          format: "int32"
          type: "integer"
        nameFilter:
          type: "string"
        orderAsc:
          type: "boolean"
        orderColumn:
          $ref: '#/components/schemas/ESessionsFiltersOrderColumn'
        resultFilter:
          $ref: '#/components/schemas/ESessionResult'
        skip:
          format: "int32"
          type: "integer"
        stateFilter:
          $ref: '#/components/schemas/ESessionState'
        typeFilter:
          $ref: '#/components/schemas/ESessionType'
      type: "object"
    SessionsResult:
      properties:
        data:
          description: "Array of sessions."
          items:
            $ref: '#/components/schemas/SessionModel'
          type: "array"
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
        - data
        - pagination
      type: "object"
    SmbRepositoryShareSettingsModel:
      description: "Share settings."
      properties:
        credentialsId:
          description: "ID of the credentials record used to access the shared folder."
          format: "uuid"
          type: "string"
        gatewayServer:
          $ref: '#/components/schemas/RepositoryShareGatewayModel'
        sharePath:
          description: "Path to the shared folder that that is used as a backup repository."
          type: "string"
      required:
        - credentialsId
        - sharePath
      type: "object"
    SmbRepositoryShareSettingsSpec:
      properties:
        credentials:
          $ref: '#/components/schemas/CredentialsImportModel'
        gatewayServer:
          $ref: '#/components/schemas/RepositoryShareGatewayImportSpec'
        sharePath:
          description: "Path to the shared folder that that is used as a backup repository."
          type: "string"
      required:
        - credentials
        - sharePath
      type: "object"
    SmbStorageImportSpec:
      properties:
        description:
          description: "Description of the backup repository."
          type: "string"
        mountServer:
          $ref: '#/components/schemas/MountServerSettingsImportSpec'
        name:
          description: "Name of the backup repository."
          type: "string"
        repository:
          $ref: '#/components/schemas/NetworkRepositorySettingsModel'
        share:
          $ref: '#/components/schemas/SmbRepositoryShareSettingsSpec'
        tag:
          description: "VMware vSphere tag assigned to the backup repository."
          type: "string"
        type:
          $ref: '#/components/schemas/ERepositoryType'
      required:
        - description
        - kind
        - mountServer
        - name
        - repository
        - share
        - tag
        - type
      type: "object"
    SmbStorageModel:
      allOf:
        - $ref: '#/components/schemas/RepositoryModel'
        - properties:
            mountServer:
              $ref: '#/components/schemas/MountServerSettingsModel'
            repository:
              $ref: '#/components/schemas/NetworkRepositorySettingsModel'
            share:
              $ref: '#/components/schemas/SmbRepositoryShareSettingsModel'
          required:
            - mountServer
            - repository
            - share
          type: "object"
      description: "Network attached storage."
    SmbStorageSpec:
      allOf:
        - $ref: '#/components/schemas/RepositorySpec'
        - properties:
            mountServer:
              $ref: '#/components/schemas/MountServerSettingsModel'
            repository:
              $ref: '#/components/schemas/NetworkRepositorySettingsModel'
            share:
              $ref: '#/components/schemas/SmbRepositoryShareSettingsModel'
          required:
            - mountServer
            - repository
            - share
          type: "object"
    StandardCredentialsModel:
      allOf:
        - $ref: '#/components/schemas/CredentialsModel'
        - properties:
            tag:
              description: "Tag used to identify the credentials record."
              type: "string"
          type: "object"
    StandardCredentialsSpec:
      allOf:
        - $ref: '#/components/schemas/CredentialsSpec'
        - properties:
            tag:
              description: "Tag used to identify the credentials record."
              type: "string"
          type: "object"
    SyntheticFullSettingsModel:
      description: "Synthetic full backup settings."
      properties:
        days:
          description: "Days of the week when Veeam Backup & Replication creates a synthetic full backup."
          items:
            $ref: '#/components/schemas/EDayOfWeek'
          type: "array"
          uniqueItems: true
        isEnabled:
          description: "If *true*, synthetic full backups are enabled."
          type: "boolean"
      required:
        - isEnabled
      type: "object"
    TokenLoginSpec:
      properties:
        code:
          description: "Authorization code. Required if the `grant_type` value is `authorization_code`."
          type: "string"
        grant_type:
          $ref: '#/components/schemas/ELoginGrantType'
        password:
          description: "Password. Required if the `grant_type` value is `password`."
          format: "password"
          type: "string"
        refresh_token:
          description: "Refresh token. Required if the `grant_type` value is `refresh_token`."
          type: "string"
        use_short_term_refresh:
          description: "If *true*, a short-term refresh token is used. Lifetime of the short-term refresh token is the access token lifetime plus 15 minutes."
          type: "boolean"
        username:
          description: "User name. Required if the `grant_type` value is `password`."
          type: "string"
      required:
        - grant_type
      type: "object"
    TokenModel:
      properties:
        .expires:
          description: "Date and time the access token expires."
          format: "date-time"
          type: "string"
        .issued:
          description: "Date and time the access token is issued."
          format: "date-time"
          type: "string"
        access_token:
          description: "String that represents authorization issued to the client. It must be specified in all requests. An access token can be used multiple times, but its lifetime is 15 minutes."
          type: "string"
        expires_in:
          description: "Lifetime of the access token, in seconds."
          format: "int32"
          type: "integer"
        refresh_token:
          description: "String that is used to obtain a new access token if the current access token expires or becomes lost. A refresh token can be used only once, and its default lifetime is 14 days."
          type: "string"
        token_type:
          description: "Type of the access token."
          type: "string"
      required:
        - .expires
        - .issued
        - access_token
        - expires_in
        - refresh_token
        - token_type
      type: "object"
    TrafficRuleModel:
      properties:
        encryptionEnabled:
          description: "If *true*, traffic encryption is enabled."
          type: "boolean"
        id:
          description: "ID of the rule."
          format: "uuid"
          type: "string"
        name:
          description: "Name of the rule."
          type: "string"
        sourceIPEnd:
          description: "End IP address of the range for the backup infrastructure components on the source side."
          type: "string"
        sourceIPStart:
          description: "Start IP address of the range for the backup infrastructure components on the source side."
          type: "string"
        targetIPEnd:
          description: "End IP address of the range for the backup infrastructure components on the target side."
          type: "string"
        targetIPStart:
          description: "Start IP address of the range for the backup infrastructure components on the target side."
          type: "string"
        throttlingEnabled:
          description: "If *true*, traffic throttling is enabled."
          type: "boolean"
        throttlingUnit:
          $ref: '#/components/schemas/ESpeedUnit'
        throttlingValue:
          description: "Maximum speed that must be used to transfer data from source to target."
          format: "int32"
          type: "integer"
        throttlingWindowEnabled:
          description: "If *true*, throttling window during which the speed must be limited is enabled."
          type: "boolean"
        throttlingWindowOptions:
          $ref: '#/components/schemas/BackupWindowSettingModel'
      required:
        - name
        - sourceIPStart
        - sourceIPEnd
        - targetIPStart
        - targetIPEnd
      type: "object"
    VCenterInventoryFilters:
      properties:
        hierarchyTypeFilter:
          $ref: '#/components/schemas/EHierarchyType'
        limit:
          description: "Maximum number of objects to return."
          format: "int32"
          type: "integer"
        nameFilter:
          description: "Filters objects by the `nameFilter` pattern. The pattern can match any object parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
          type: "string"
        objectIdFilter:
          description: "Filters objects by object ID."
          type: "string"
        orderAsc:
          description: "Sorts objects in the ascending order by the `orderColumn` parameter."
          type: "boolean"
        orderColumn:
          $ref: '#/components/schemas/EvCentersInventoryFiltersOrderColumn'
        parentContainerNameFilter:
          description: "Filters objects by name of the parent container."
          type: "string"
        skip:
          description: "Number of objects to skip."
          format: "int32"
          type: "integer"
        typeFilter:
          $ref: '#/components/schemas/EVmwareInventoryType'
      type: "object"
    VCenterInventoryResult:
      properties:
        data:
          description: "Array of vCenter Servers."
          items:
            $ref: '#/components/schemas/VmwareObjectSizeModel'
          type: "array"
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
        - data
        - pagination
      type: "object"
    VPowerNFSPortSettingsModel:
      description: "Network ports used by the vPower NFS Service."
      properties:
        mountPort:
          description: "Mount port."
          type: "integer"
        vPowerNFSPort:
          description: "vPower NFS port."
          type: "integer"
      type: "object"
    VSphereChangedBlockTrackingSettingsModel:
      description: "CBT settings for the backup job."
      properties:
        enableCBTautomatically:
          description: "If *true*, CBT is enabled for all processed VMs even if CBT is disabled in VM configuration. CBT is used for VMs with virtual hardware version 7 or later. These VMs must not have existing snapshots."
          type: "boolean"
        isEnabled:
          description: "If *true*, CBT data is used."
          type: "boolean"
        resetCBTonActiveFull:
          description: "If *true*, CBT is reset before creating active full backups."
          type: "boolean"
      required:
        - isEnabled
      type: "object"
    ViBackupObjectModel:
      allOf:
        - $ref: '#/components/schemas/BackupObjectModel'
        - properties:
            objectId:
              description: "ID of the virtual infrastructure object: mo-ref or ID, depending on the virtualization platform.\n"
              type: "string"
            path:
              description: "Path to the object."
              type: "string"
            viType:
              $ref: '#/components/schemas/EVmwareInventoryType'
          required:
            - server
          type: "object"
    ViHostImportSpec:
      properties:
        certificateThumbprint:
          description: "[Optional] Certificate thumbprint used to verify the server identity.\n"
          type: "string"
        credentials:
          $ref: '#/components/schemas/CredentialsImportModel'
        description:
          description: "Description of the server."
          type: "string"
        name:
          description: "Full DNS name or IP address of the server."
          type: "string"
        port:
          description: "Port used to communicate with the server."
          type: "integer"
        type:
          $ref: '#/components/schemas/EManagedServerType'
        viHostType:
          $ref: '#/components/schemas/EViHostType'
      required:
        - credentials
        - description
        - name
        - type
        - viHostType
      type: "object"
    ViHostModel:
      allOf:
        - $ref: '#/components/schemas/ManagedServerModel'
        - properties:
            port:
              description: "Port used to communicate with the server."
              type: "integer"
            viHostType:
              $ref: '#/components/schemas/EViHostType'
          required:
            - port
          type: "object"
    ViHostSpec:
      allOf:
        - $ref: '#/components/schemas/ManagedServerSpec'
        - properties:
            certificateThumbprint:
              description: "[Optional] Certificate thumbprint used to verify the server identity. For details on how to get the thumbprint, see [Get TLS Certificate or SSH Fingerprint](#operation/GetConnectionCertificate).\n"
              type: "string"
            port:
              description: "Port used to communicate with the server."
              type: "integer"
          type: "object"
    ViProxyModel:
      allOf:
        - $ref: '#/components/schemas/ProxyModel'
        - properties:
            server:
              $ref: '#/components/schemas/ProxyServerSettingsModel'
          required:
            - server
          type: "object"
    ViProxySpec:
      allOf:
        - $ref: '#/components/schemas/ProxySpec'
        - properties:
            server:
              $ref: '#/components/schemas/ProxyServerSettingsModel'
          required:
            - server
          type: "object"
    ViRootFilters:
      properties:
        limit:
          description: "Maximum number of VMware vSphere servers to return."
          format: "int32"
          type: "integer"
        nameFilter:
          description: "Filters VMware vSphere servers by the `nameFilter` pattern. The pattern can match any VMware vSphere server parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
          type: "string"
        orderAsc:
          description: "Sorts VMware vSphere servers in the ascending order by the `orderColumn` parameter."
          type: "boolean"
        orderColumn:
          $ref: '#/components/schemas/EViRootFiltersOrderColumn'
        skip:
          description: "Number of VMware vSphere servers to skip."
          format: "int32"
          type: "integer"
      type: "object"
    ViRootsResult:
      properties:
        data:
          description: "Array of VMware vSphere servers."
          items:
            $ref: '#/components/schemas/VmwareObjectSizeModel'
          type: "array"
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
        - data
        - pagination
      type: "object"
    VmbApiFilterModel:
      properties:
        assemblyVersion:
          type: "string"
        productId:
          format: "uuid"
          type: "string"
        protocolVersion:
          type: "integer"
        versionFlags:
          type: "integer"
      required:
        - protocolVersion
        - assemblyVersion
        - productId
        - versionFlags
      type: "object"
    VmwareFcdInstantRecoveryDiskInfo:
      properties:
        mountedDiskName:
          description: "Name of the VMDK file that is stored in the datastore."
          type: "string"
        nameInBackup:
          description: "Disk name displayed in the backup."
          type: "string"
        objectId:
          description: "FCD ID."
          type: "string"
        registeredFcdName:
          description: "Name under which the disk is registered as an FCD in the vCenter Managed Object Browser."
          type: "string"
      required:
        - nameInBackup
        - mountedDiskName
        - registeredFcdName
        - objectId
      type: "object"
    VmwareFcdInstantRecoveryDiskSpec:
      properties:
        mountedDiskName:
          description: "Name of the VMDK file that will be stored in the datastore."
          type: "string"
        nameInBackup:
          description: "Disk name displayed in the backup."
          type: "string"
        registeredFcdName:
          description: "Name under which the disk will be registered as an FCD in the vCenter Managed Object Browser."
          type: "string"
      required:
        - nameInBackup
        - mountedDiskName
        - registeredFcdName
      type: "object"
    VmwareFcdInstantRecoveryMount:
      properties:
        errorMessage:
          type: "string"
        id:
          description: "Mount ID."
          format: "uuid"
          type: "string"
        mountedDisks:
          description: "Array of mounted disks."
          items:
            $ref: '#/components/schemas/VmwareFcdInstantRecoveryDiskInfo'
          type: "array"
        sessionId:
          description: "ID of the restore session. Use the ID to track the progress. For details, see [Get Session](#operation/GetSession)."
          format: "uuid"
          type: "string"
        spec:
          $ref: '#/components/schemas/VmwareFcdInstantRecoverySpec'
        state:
          $ref: '#/components/schemas/EInstantRecoveryMountState'
      required:
        - id
        - sessionId
        - state
        - spec
      type: "object"
    VmwareFcdInstantRecoverySpec:
      properties:
        destinationCluster:
          allOf:
            - $ref: '#/components/schemas/VmwareObjectModel'
          description: "Destination cluster."
        disksMapping:
          description: "Array of disks that will be restored."
          items:
            $ref: '#/components/schemas/VmwareFcdInstantRecoveryDiskSpec'
          type: "array"
        objectRestorePointId:
          description: "ID of the restore point."
          format: "uuid"
          type: "string"
        writeCache:
          $ref: '#/components/schemas/VmwareFcdWriteCacheSpec'
      required:
        - objectRestorePointId
        - destinationCluster
        - disksMapping
      type: "object"
    VmwareFcdQuickMigrationSpec:
      properties:
        mountedDiskNames:
          description: "Array of disks that will be migrated to the `targetDatastore` associated with the `storagePolicy`."
          items:
            type: "string"
          type: "array"
        storagePolicy:
          allOf:
            - $ref: '#/components/schemas/VmwareObjectModel'
          description: "Storage policy that will be applied to the migrated disks. For details on how to get a storage policy model, see [Get VMware vSphere Server Objects](#operation/GetVmwareHostObject)."
        targetDatastore:
          allOf:
            - $ref: '#/components/schemas/VmwareObjectModel'
          description: "Target datastore. For details on how to get a datastore model, see [Get VMware vSphere Server Objects](#operation/GetVmwareHostObject)."
      required:
        - targetDatastore
      type: "object"
    VmwareFcdWriteCacheSpec:
      description: "Write cache for recovered disks."
      properties:
        cacheDatastore:
          $ref: '#/components/schemas/VmwareObjectModel'
        redirectIsEnabled:
          description: "If *true*, cache redirection is enabled. In this case, all changes made to the recovered disks while the Instant FCD Recovery is active are redirected to the specified `cacheDatastore` associated with the `storagePolicy`."
          type: "boolean"
        storagePolicy:
          $ref: '#/components/schemas/VmwareObjectModel'
      required:
        - redirectIsEnabled
      type: "object"
    VmwareObjectDiskModel:
      properties:
        disks:
          description: "Array of disks."
          items:
            description: "ID of the disk."
            type: "string"
          type: "array"
        disksToProcess:
          $ref: '#/components/schemas/EVmwareDisksTypeToProcess'
        removeFromVMConfiguration:
          description: "If *true*, the disk is removed from VM configuration."
          type: "boolean"
        vmObject:
          $ref: '#/components/schemas/VmwareObjectModel'
      required:
        - disks
        - disksToProcess
        - vmObject
      type: "object"
    VmwareObjectModel:
      description: "VMware object."
      properties:
        hostName:
          description: "Name of the host."
          type: "string"
        name:
          description: "Name of the VMware vSphere object."
          type: "string"
        objectId:
          description: "ID of the VMware vSphere object."
          type: "string"
        type:
          $ref: '#/components/schemas/EVmwareInventoryType'
      required:
        - name
        - type
        - hostName
      type: "object"
    VmwareObjectSizeModel:
      properties:
        inventoryObject:
          $ref: '#/components/schemas/VmwareObjectModel'
        size:
          description: "Size used by the VMware vSphere object."
          type: "string"
      required:
        - inventoryObject
      type: "object"
    WindowsHostComponentPortModel:
      description: "Ports used by Veeam Backup & Replication components."
      properties:
        componentName:
          $ref: '#/components/schemas/EWindowsHostComponentType'
        port:
          description: "Port used by the component."
          type: "integer"
      required:
        - componentName
        - port
      type: "object"
    WindowsHostImportSpec:
      properties:
        credentials:
          $ref: '#/components/schemas/CredentialsImportModel'
        description:
          description: "Description of the server."
          type: "string"
        name:
          description: "Full DNS name or IP address of the server."
          type: "string"
        networkSettings:
          $ref: '#/components/schemas/WindowsHostPortsModel'
        type:
          $ref: '#/components/schemas/EManagedServerType'
      required:
        - description
        - name
        - type
      type: "object"
    WindowsHostModel:
      allOf:
        - $ref: '#/components/schemas/ManagedServerModel'
        - properties:
            networkSettings:
              $ref: '#/components/schemas/WindowsHostPortsModel'
          type: "object"
    WindowsHostPortsModel:
      description: "Network ports."
      properties:
        components:
          items:
            $ref: '#/components/schemas/WindowsHostComponentPortModel'
          type: "array"
        portRangeEnd:
          description: "End port used for data transfer."
          type: "integer"
        portRangeStart:
          description: "Start port used for data transfer."
          type: "integer"
        serverThisSide:
          description: "If *true*, the server is run on this side."
          type: "boolean"
      type: "object"
    WindowsHostSpec:
      allOf:
        - $ref: '#/components/schemas/ManagedServerSpec'
        - properties:
            networkSettings:
              $ref: '#/components/schemas/WindowsHostPortsModel'
          type: "object"
    WindowsLocalRepositorySettingsModel:
      description: "Repository settings."
      properties:
        advancedSettings:
          $ref: '#/components/schemas/RepositoryAdvancedSettingsModel'
        maxTaskCount:
          description: "Maximum number of concurrent tasks."
          type: "integer"
        path:
          description: "Path to the folder where backup files are stored."
          type: "string"
        readWriteRate:
          description: "Maximum rate that restricts the total speed of reading and writing data to the backup repository disk."
          type: "integer"
      type: "object"
    WindowsLocalStorageImportSpec:
      properties:
        description:
          description: "Description of the backup repository."
          type: "string"
        hostName:
          description: "ID of the server that is used as a backup repository."
          type: "string"
        mountServer:
          $ref: '#/components/schemas/MountServerSettingsImportSpec'
        name:
          description: "Name of the backup repository."
          type: "string"
        repository:
          $ref: '#/components/schemas/WindowsLocalRepositorySettingsModel'
        tag:
          description: "VMware vSphere tag assigned to the backup repository."
          type: "string"
        type:
          $ref: '#/components/schemas/ERepositoryType'
      required:
        - description
        - hostName
        - kind
        - mountServer
        - name
        - repository
        - tag
        - type
      type: "object"
    WindowsLocalStorageModel:
      allOf:
        - $ref: '#/components/schemas/RepositoryModel'
        - properties:
            hostId:
              description: "ID of the server that is used as a backup repository."
              format: "uuid"
              type: "string"
            mountServer:
              $ref: '#/components/schemas/MountServerSettingsModel'
            repository:
              $ref: '#/components/schemas/WindowsLocalRepositorySettingsModel'
          required:
            - hostId
            - mountServer
            - repository
          type: "object"
      description: "Direct attached storage."
    WindowsLocalStorageSpec:
      allOf:
        - $ref: '#/components/schemas/RepositorySpec'
        - properties:
            hostId:
              description: "ID of the server that is used as a backup repository."
              format: "uuid"
              type: "string"
            mountServer:
              $ref: '#/components/schemas/MountServerSettingsModel'
            repository:
              $ref: '#/components/schemas/WindowsLocalRepositorySettingsModel'
          required:
            - hostId
            - mountServer
            - repository
          type: "object"
  securitySchemes:
    Bearer:
      description: "Access token in the *Bearer \\<access token\\>* format."
      in: "header"
      name: "Authorization"
      type: "apiKey"
info:
  contact:
    email: "support@veeam.com"
  description: "This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>\nRequests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br>\nParameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic.\n"
  title: "Veeam Backup & Replication REST API"
  version: "1.0-rev1"
openapi: "3.0.1"
paths:
  /api/oauth2/authorization_code:
    post:
      description: "The HTTP POST request to the `/api/oauth2/authorization_code` path allows you to get an authorization code that is used to obtain an access token. For more information on authorization process, see [Requesting Authorization](https://helpcenter.veeam.com/docs/backup/vbr_rest/requesting_authorization.html)."
      operationId: "CreateAuthorizationCode"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationCodeModel'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get Authorization Code"
      tags:
        - Login
  /api/oauth2/logout:
    post:
      description: "The HTTP POST request to the `/api/oauth2/logout` path allows you to perform the logout operation. After you log out, access and refresh tokens are expired.\n"
      operationId: "Logout"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Log Out"
      tags:
        - Login
  /api/oauth2/token:
    post:
      description: "The HTTP POST request to the `/api/oauth2/token` path allows you to get an access token and a refresh token."
      operationId: "CreateToken"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenLoginSpec'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenModel'
          description: "OK"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security: []
      summary: "Get Access Token"
      tags:
        - Login
  /api/v1/automation/credentials/export:
    post:
      description: "The HTTP POST request to the `/api/v1/automation/credentials/export` path allows you to export credentials from Veeam Backup & Replication."
      operationId: "ExportCredentials"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsExportSpec'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialsImportSpecCollection'
          description: "OK"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Export Credentials"
      tags:
        - Automation
      x-veeam-authorize:
        claims:
          - ExportCredentials
  /api/v1/automation/credentials/import:
    post:
      description: "The HTTP POST request to the `/api/v1/automation/credentials/import` path allows you to import credentials to Veeam Backup & Replication."
      operationId: "ImportCredentials"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsImportSpecCollection'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: "Automation session has been created to import the credentials. To check the progress, track the session `state`."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Import Credentials"
      tags:
        - Automation
      x-veeam-authorize:
        claims:
          - ImportCredentials
  /api/v1/automation/encryptionPasswords/export:
    post:
      description: "The HTTP POST request to the `/api/v1/automation/encryptionPasswords/export` path allows you to export encryption passwords from Veeam Backup & Replication."
      operationId: "ExportEncryptionPasswords"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncryptionPasswordExportSpec'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionPasswordImportSpecCollection'
          description: "OK"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Export Encryption Passwords"
      tags:
        - Automation
      x-veeam-authorize:
        claims:
          - ExportEncryptionPasswords
  /api/v1/automation/encryptionPasswords/import:
    post:
      description: "The HTTP POST request to the `/api/v1/automation/encryptionPasswords/import` path allows you to import encryption passwords to Veeam Backup & Replication."
      operationId: "ImportEncryptionPasswords"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncryptionPasswordImportSpecCollection'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: "Automation session has been created to import the passwords. To check the progress, track the session `state`."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Import Encryption Passwords"
      tags:
        - Automation
      x-veeam-authorize:
        claims:
          - ImportEncryptionPasswords
  /api/v1/automation/jobs/export:
    post:
      description: "The HTTP POST request to the `/api/v1/automation/jobs/export` path allows you to export jobs from Veeam Backup & Replication."
      operationId: "ExportJobs"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobExportSpec'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobImportSpecCollection'
          description: "OK"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Export Jobs"
      tags:
        - Automation
      x-veeam-authorize:
        claims:
          - ExportJobs
  /api/v1/automation/jobs/import:
    post:
      description: "The HTTP POST request to the `/api/v1/automation/jobs/import` path allows you to import jobs to Veeam Backup & Replication."
      operationId: "ImportJobs"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobImportSpecCollection'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: "Automation session has been created to import the jobs. To check the progress, track the session `state`."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Import Jobs"
      tags:
        - Automation
      x-veeam-authorize:
        claims:
          - ImportJobs
  /api/v1/automation/managedServers/export:
    post:
      description: "The HTTP POST request to the `/api/v1/automation/managedServers/export` path allows you to export managed servers from Veeam Backup & Replication."
      operationId: "ExportManagedServers"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManageServerExportSpec'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManageServerImportSpecCollection'
          description: "OK"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Export Servers"
      tags:
        - Automation
      x-veeam-authorize:
        claims:
          - ExportManagedServers
  /api/v1/automation/managedServers/import:
    post:
      description: "The HTTP POST request to the `/api/v1/automation/managedServers/import` path allows you to import managed servers to Veeam Backup & Replication."
      operationId: "ImportManagedServers"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManageServerImportSpecCollection'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: "Automation session has been created to import the servers. To check the progress, track the session `state`."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Import Servers"
      tags:
        - Automation
      x-veeam-authorize:
        claims:
          - ImportManagedServers
  /api/v1/automation/proxies/export:
    post:
      description: "The HTTP POST request to the `/api/v1/automation/proxies/export` path allows you to export backup proxies from Veeam Backup & Replication."
      operationId: "ExportProxies"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProxyExportSpec'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxyImportSpecCollection'
          description: "OK"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Export Proxies"
      tags:
        - Automation
      x-veeam-authorize:
        claims:
          - ExportProxies
  /api/v1/automation/proxies/import:
    post:
      description: "The HTTP POST request to the `/api/v1/automation/proxies/import` path allows you to import backup proxies to Veeam Backup & Replication."
      operationId: "ImportProxies"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProxyImportSpecCollection'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: "Automation session has been created to import the proxies. To check the progress, track the session `state`."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Import Proxies"
      tags:
        - Automation
      x-veeam-authorize:
        claims:
          - ImportProxies
  /api/v1/automation/repositories/export:
    post:
      description: "The HTTP POST request to the `/api/v1/automation/repositories/export` path allows you to export backup repositories from Veeam Backup & Replication."
      operationId: "ExportRepositories"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositoryExportSpec'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryImportSpecCollection'
          description: "OK"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Export Repositories"
      tags:
        - Automation
      x-veeam-authorize:
        claims:
          - ExportRepositories
  /api/v1/automation/repositories/import:
    post:
      description: "The HTTP POST request to the `/api/v1/automation/repositories/import` path allows you to import backup repositories to Veeam Backup & Replication."
      operationId: "ImportRepositories"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositoryImportSpecCollection'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: "Automation session has been created to import the repositories. To check the progress, track the session `state`."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Import Repositories"
      tags:
        - Automation
      x-veeam-authorize:
        claims:
          - ImportRepositories
  /api/v1/automation/sessions:
    get:
      description: "The HTTP GET request to the `/api/v1/automation/sessions` path allows you to get an array of all automation sessions performed on the backup server."
      operationId: "GetAllAutomationSessions"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "Number of sessions to skip."
          in: "query"
          name: "skip"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
        - description: "Maximum number of sessions to return."
          in: "query"
          name: "limit"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
        - description: "Sorts sessions by one of the session parameters."
          in: "query"
          name: "orderColumn"
          schema:
            $ref: '#/components/schemas/ESessionsFiltersOrderColumn'
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
        - description: "Sorts sessions in the ascending order by the `orderColumn` parameter."
          in: "query"
          name: "orderAsc"
          schema:
            type: "boolean"
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
        - description: "Filters sessions by the `nameFilter` pattern. The pattern can match any session parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
          in: "query"
          name: "nameFilter"
          schema:
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
        - description: "Returns sessions that are created after the specified date and time."
          in: "query"
          name: "createdAfterFilter"
          schema:
            format: "date-time"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
        - description: "Returns sessions that are created before the specified date and time."
          in: "query"
          name: "createdBeforeFilter"
          schema:
            format: "date-time"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
        - description: "Returns sessions that are finished after the specified date and time."
          in: "query"
          name: "endedAfterFilter"
          schema:
            format: "date-time"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
        - description: "Returns sessions that are finished before the specified date and time."
          in: "query"
          name: "endedBeforeFilter"
          schema:
            format: "date-time"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
        - description: "Filters sessions by session type."
          in: "query"
          name: "typeFilter"
          schema:
            $ref: '#/components/schemas/ESessionType'
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
        - description: "Filters sessions by session state."
          in: "query"
          name: "stateFilter"
          schema:
            $ref: '#/components/schemas/ESessionState'
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
        - description: "Filters sessions by session result."
          in: "query"
          name: "resultFilter"
          schema:
            $ref: '#/components/schemas/ESessionResult'
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
        - description: "Filters sessions by job ID."
          in: "query"
          name: "jobIdFilter"
          schema:
            format: "uuid"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionsResult'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get All Automation Sessions"
      tags:
        - Automation
      x-veeam-authorize:
        claims:
          - ViewSessions
  /api/v1/automation/sessions/{id}:
    get:
      description: "The HTTP GET request to the `/api/v1/automation/sessions/{id}` path allows you to get an automation session that has the specified `id`."
      operationId: "GetAutomationSession"
      parameters:
        - description: "ID of the session."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
        - $ref: '#/components/parameters/apiVersionParam'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get Automation Session"
      tags:
        - Automation
      x-veeam-authorize:
        claims:
          - ViewSessions
  /api/v1/automation/sessions/{id}/logs:
    get:
      description: "The HTTP GET request to the `/api/v1/automation/sessions/{id}/logs` path allows you to get an array of log records of an automation session that has the specified `id`."
      operationId: "GetAutomationSessionLogs"
      parameters:
        - description: "ID of the session."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
        - $ref: '#/components/parameters/apiVersionParam'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionLogResult'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get Automation Session Logs"
      tags:
        - Automation
      x-veeam-authorize:
        claims:
          - ViewSessions
  /api/v1/automation/sessions/{id}/stop:
    post:
      description: "The HTTP POST request to the `/api/v1/automation/sessions/{id}/stop` path allows you to stop an automation session that has the specified `id`."
      operationId: "StopAutomationSession"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the session."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Stop Automation Session"
      tags:
        - Automation
      x-veeam-authorize:
        claims:
          - StopSessions
  /api/v1/backupInfrastructure/managedServers:
    get:
      description: "The HTTP GET request to the `/api/v1/backupInfrastructure/managedServers` path allows you to get an array of all servers that are added to the backup infrastructure."
      operationId: "GetAllManagedServers"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "Number of servers to skip."
          in: "query"
          name: "skip"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/ManagedServersFilters'
        - description: "Maximum number of servers to return."
          in: "query"
          name: "limit"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/ManagedServersFilters'
        - description: "Sorts servers by one of the server parameters."
          in: "query"
          name: "orderColumn"
          schema:
            $ref: '#/components/schemas/EManagedServersFiltersOrderColumn'
          x-veeam-spec:
            $ref: '#/components/schemas/ManagedServersFilters'
        - description: "Sorts servers in the ascending order by the `orderColumn` parameter."
          in: "query"
          name: "orderAsc"
          schema:
            type: "boolean"
          x-veeam-spec:
            $ref: '#/components/schemas/ManagedServersFilters'
        - description: "Filters servers by the `nameFilter` pattern. The pattern can match any server parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
          in: "query"
          name: "nameFilter"
          schema:
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/ManagedServersFilters'
        - description: "Filters servers by server type."
          in: "query"
          name: "typeFilter"
          schema:
            $ref: '#/components/schemas/EManagedServerType'
          x-veeam-spec:
            $ref: '#/components/schemas/ManagedServersFilters'
        - description: "Filters servers by the type of VMware vSphere server."
          in: "query"
          name: "viTypeFilter"
          schema:
            $ref: '#/components/schemas/EViHostType'
          x-veeam-spec:
            $ref: '#/components/schemas/ManagedServersFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedServersResult'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get All Servers"
      tags:
        - Managed Servers
      x-veeam-authorize:
        claims:
          - ViewManagedServers
    post:
      description: "The HTTP POST request to the `/api/v1/backupInfrastructure/managedServers` path allows you to add a server to the backup infrastructure."
      operationId: "CreateManagedServer"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedServerSpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: "Infrastructure session has been created to add the server. To check the progress, track the session `state`."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Add Server"
      tags:
        - Managed Servers
      x-veeam-authorize:
        claims:
          - CreateManagedServers
  /api/v1/backupInfrastructure/managedServers/{id}:
    delete:
      description: "The HTTP DELETE request to the `/api/v1/backupInfrastructure/managedServers/{id}` path allows you to remove a managed server that has the specified `id` from the backup infrastructure."
      operationId: "DeleteManagedServer"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the managed server."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: "Managed server has been removed."
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Remove Server"
      tags:
        - Managed Servers
      x-veeam-authorize:
        claims:
          - DeleteManagedServers
    get:
      description: "The HTTP GET request to the `/api/v1/backupInfrastructure/managedServers/{id}` path allows you to get a managed server that has the specified `id`."
      operationId: "GetManagedServer"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the managed server."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedServerModel'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get Server"
      tags:
        - Managed Servers
      x-veeam-authorize:
        claims:
          - ViewManagedServers
    put:
      description: "The HTTP PUT request to the `/api/v1/backupInfrastructure/managedServers/{id}` path allows you to edit a managed server that has the specified `id`."
      operationId: "UpdateManagedServer"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the managed server."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedServerModel'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: "Infrastructure session has been created to edit the server. To check the progress, track the session `state`."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Edit Server"
      tags:
        - Managed Servers
      x-veeam-authorize:
        claims:
          - UpdateManagedServers
  /api/v1/backupInfrastructure/proxies:
    get:
      description: "The HTTP GET request to the `/api/v1/backupInfrastructure/proxies` path allows you to get an array of all backup proxies that are added to the backup infrastructure."
      operationId: "GetAllProxies"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "Number of proxies to skip."
          in: "query"
          name: "skip"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/ProxiesFilters'
        - description: "Maximum number of proxies to return."
          in: "query"
          name: "limit"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/ProxiesFilters'
        - description: "Sorts proxies by one of the proxy parameters."
          in: "query"
          name: "orderColumn"
          schema:
            $ref: '#/components/schemas/EProxiesFiltersOrderColumn'
          x-veeam-spec:
            $ref: '#/components/schemas/ProxiesFilters'
        - description: "Sorts proxies in the ascending order by the `orderColumn` parameter."
          in: "query"
          name: "orderAsc"
          schema:
            type: "boolean"
          x-veeam-spec:
            $ref: '#/components/schemas/ProxiesFilters'
        - description: "Filters proxies by the `nameFilter` pattern. The pattern can match any proxy parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
          in: "query"
          name: "nameFilter"
          schema:
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/ProxiesFilters'
        - description: "Filters proxies by proxy type."
          in: "query"
          name: "typeFilter"
          schema:
            $ref: '#/components/schemas/EProxyType'
          x-veeam-spec:
            $ref: '#/components/schemas/ProxiesFilters'
        - description: "Filters proxies by ID of the backup server."
          in: "query"
          name: "hostIdFilter"
          schema:
            format: "uuid"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/ProxiesFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxiesResult'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get All Proxies"
      tags:
        - Proxies
      x-veeam-authorize:
        claims:
          - ViewProxies
    post:
      description: "The HTTP POST request to the `/api/v1/backupInfrastructure/proxies` path allows you to add a proxy to the backup infrastructure."
      operationId: "CreateProxy"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProxySpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: "Infrastructure session has been created to add the proxy. To check the progress, track the session `state`."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Add Proxy"
      tags:
        - Proxies
      x-veeam-authorize:
        claims:
          - CreateProxies
  /api/v1/backupInfrastructure/proxies/{id}:
    delete:
      description: "The HTTP DELETE request to the `/api/v1/backupInfrastructure/proxies/{id}` path allows you to remove a backup proxy that has the specified `id` from the backup infrastructure."
      operationId: "DeleteProxy"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the backup proxy."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      responses:
        "204":
          $ref: '#/components/responses/Deleted'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Remove Proxy"
      tags:
        - Proxies
      x-veeam-authorize:
        claims:
          - DeleteProxies
    get:
      description: "The HTTP GET request to the `/api/v1/backupInfrastructure/proxies/{id}` path allows you to get a backup proxy that has the specified `id`."
      operationId: "GetProxy"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the backup proxy."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxyModel'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get Proxy"
      tags:
        - Proxies
      x-veeam-authorize:
        claims:
          - ViewProxies
    put:
      description: "The HTTP PUT request to the `/api/v1/backupInfrastructure/proxies/{id}` path allows you to edit a backup proxy that has the specified `id`."
      operationId: "UpdateProxy"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the backup proxy."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProxyModel'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: "Infrastructure session has been created to edit the proxy. To check the progress, track the session `state`."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Edit Proxy"
      tags:
        - Proxies
      x-veeam-authorize:
        claims:
          - UpdateProxies
  /api/v1/backupInfrastructure/repositories:
    get:
      description: "The HTTP GET request to the `/api/v1/backupInfrastructure/repositories` path allows you to get an array of all backup repositories that are added to the backup infrastructure."
      operationId: "GetAllRepositories"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "Number of repositories to skip."
          in: "query"
          name: "skip"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/RepositoriesFilters'
        - description: "Maximum number of repositories to return."
          in: "query"
          name: "limit"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/RepositoriesFilters'
        - description: "Sorts repositories by one of the repository parameters."
          in: "query"
          name: "orderColumn"
          schema:
            $ref: '#/components/schemas/ERepositoryFiltersOrderColumn'
          x-veeam-spec:
            $ref: '#/components/schemas/RepositoriesFilters'
        - description: "Sorts repositories in the ascending order by the `orderColumn` parameter."
          in: "query"
          name: "orderAsc"
          schema:
            type: "boolean"
          x-veeam-spec:
            $ref: '#/components/schemas/RepositoriesFilters'
        - description: "Filters repositories by the `nameFilter` pattern. The pattern can match any repository parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
          in: "query"
          name: "nameFilter"
          schema:
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/RepositoriesFilters'
        - description: "Filters repositories by repository type."
          in: "query"
          name: "typeFilter"
          schema:
            $ref: '#/components/schemas/ERepositoryType'
          x-veeam-spec:
            $ref: '#/components/schemas/RepositoriesFilters'
        - description: "Filters repositories by ID of the backup server."
          in: "query"
          name: "hostIdFilter"
          schema:
            format: "uuid"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/RepositoriesFilters'
        - description: "Filters repositories by path to the folder where backup files are stored."
          in: "query"
          name: "pathFilter"
          schema:
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/RepositoriesFilters'
        - description: "Filters repositories by VM Backup API parameters converted to the base64 string.<br>\nTo compose the base64 string:<br>\n<ol>\n  <li>Prepare VM Backup API parameters in the JSON format.</li>\n  <code>{<br>\n  \"protocolVersion\":\"string\",<br>\n  \"assemblyVersion\":\"string\",<br>\n  \"productId\":\"string\",<br>\n  \"versionFlags\":\"string\"<br>\n  }<br></code>\n  <li>Convert the JSON object into a string.</li>\n  <li>Encode the string with base64 encoding.</li>\n</ol>\n"
          in: "query"
          name: "vmbApiFilter"
          schema:
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/RepositoriesFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoriesResult'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get All Repositories"
      tags:
        - Repositories
      x-veeam-authorize:
        claims:
          - ViewRepositories
    post:
      description: "The HTTP POST request to the `/api/v1/backupInfrastructure/repositories` path allows you to add a repository to the backup infrastructure."
      operationId: "CreateRepository"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositorySpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: "Infrastructure session has been created to add the repository. To check the progress, track the session `state`."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Add Repository"
      tags:
        - Repositories
      x-veeam-authorize:
        claims:
          - CreateRepositories
  /api/v1/backupInfrastructure/repositories/states:
    get:
      description: "The HTTP GET request to the `/api/v1/backupInfrastructure/repositories/states` path allows you to get an array of all repository states. The states include repository location and brief statistics, such as repository capacity, free and used space."
      operationId: "GetAllRepositoriesStates"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "Number of repository states to skip."
          in: "query"
          name: "skip"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/RepositoryStatesFilters'
        - description: "Maximum number of repository states to return."
          in: "query"
          name: "limit"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/RepositoryStatesFilters'
        - description: "Sorts repository states by one of the state parameters."
          in: "query"
          name: "orderColumn"
          schema:
            $ref: '#/components/schemas/ERepositoryStatesFiltersOrderColumn'
          x-veeam-spec:
            $ref: '#/components/schemas/RepositoryStatesFilters'
        - description: "Sorts repository states in the ascending order by the `orderColumn` parameter."
          in: "query"
          name: "orderAsc"
          schema:
            type: "boolean"
          x-veeam-spec:
            $ref: '#/components/schemas/RepositoryStatesFilters'
        - description: "Filters repository states by repository ID."
          in: "query"
          name: "idFilter"
          schema:
            format: "uuid"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/RepositoryStatesFilters'
        - description: "Filters repository states by the `nameFilter` pattern. The pattern can match any repository state parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
          in: "query"
          name: "nameFilter"
          schema:
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/RepositoryStatesFilters'
        - description: "Filters repository states by repository type."
          in: "query"
          name: "typeFilter"
          schema:
            $ref: '#/components/schemas/ERepositoryType'
          x-veeam-spec:
            $ref: '#/components/schemas/RepositoryStatesFilters'
        - description: "Filters repository states by repository capacity."
          in: "query"
          name: "capacityFilter"
          schema:
            format: "double"
            type: "number"
          x-veeam-spec:
            $ref: '#/components/schemas/RepositoryStatesFilters'
        - description: "Filters repository states by repository free space."
          in: "query"
          name: "freeSpaceFilter"
          schema:
            format: "double"
            type: "number"
          x-veeam-spec:
            $ref: '#/components/schemas/RepositoryStatesFilters'
        - description: "Filters repository states by repository used space."
          in: "query"
          name: "usedSpaceFilter"
          schema:
            format: "double"
            type: "number"
          x-veeam-spec:
            $ref: '#/components/schemas/RepositoryStatesFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryStatesResult'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get All Repository States"
      tags:
        - Repositories
      x-veeam-authorize:
        claims:
          - ViewRepositories
  /api/v1/backupInfrastructure/repositories/{id}:
    delete:
      description: "The HTTP DELETE request to the `/api/v1/backupInfrastructure/repositories/{id}` path allows you to remove a backup repository that has the specified `id` from the backup infrastructure."
      operationId: "DeleteRepository"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the backup repository."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
        - description: "If *true*, Veeam Backup & Replication will remove backup files."
          in: "query"
          name: "deleteBackups"
          schema:
            type: "boolean"
          x-veeam-spec:
            $ref: '#/components/schemas/DeleteRepositoryFilters'
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: "Removed"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Remove Repository"
      tags:
        - Repositories
      x-veeam-authorize:
        claims:
          - DeleteRepositories
    get:
      description: "The HTTP GET request to the `/api/v1/backupInfrastructure/repositories/{id}` path allows you to get a backup repository that has the specified `id`."
      operationId: "GetRepository"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the backup repository."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryModel'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get Repository"
      tags:
        - Repositories
      x-veeam-authorize:
        claims:
          - ViewRepositories
    put:
      description: "The HTTP PUT request to the `/api/v1/backupInfrastructure/repositories/{id}` path allows you to edit a backup repository that has the specified `id`."
      operationId: "UpdateRepository"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the backup repository."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositoryModel'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: "Infrastructure session has been created to edit the repository. To check the progress, track the session `state`."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Edit Repository"
      tags:
        - Repositories
      x-veeam-authorize:
        claims:
          - UpdateRepositories
  /api/v1/backupInfrastructure/scaleOutRepositories:
    get:
      description: "The HTTP GET request to the `/api/v1/backupInfrastructure/scaleOutRepositories` path allows you to get an array of all scale-out backup repositories that are added to the backup infrastructure."
      operationId: "GetAllScaleOutRepositories"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "Number of repositories to skip."
          in: "query"
          name: "skip"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/ScaleOutRepositoriesFilters'
        - description: "Maximum number of repositories to return."
          in: "query"
          name: "limit"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/ScaleOutRepositoriesFilters'
        - description: "Sorts repositories by one of the repository parameters."
          in: "query"
          name: "orderColumn"
          schema:
            $ref: '#/components/schemas/EScaleOutRepositoryFiltersOrderColumn'
          x-veeam-spec:
            $ref: '#/components/schemas/ScaleOutRepositoriesFilters'
        - description: "Sorts repositories in the ascending order by the `orderColumn` parameter."
          in: "query"
          name: "orderAsc"
          schema:
            type: "boolean"
          x-veeam-spec:
            $ref: '#/components/schemas/ScaleOutRepositoriesFilters'
        - description: "Filters repositories by the `nameFilter` substring. The substring can be part of any repository parameter."
          in: "query"
          name: "nameFilter"
          schema:
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/ScaleOutRepositoriesFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScaleOutRepositoriesResult'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get All Scale-Out Backup Repositories"
      tags:
        - Repositories
      x-veeam-authorize:
        claims:
          - ViewScaleOutRepositories
  /api/v1/backupInfrastructure/scaleOutRepositories/{id}:
    get:
      description: "The HTTP GET request to the `/api/v1/backupInfrastructure/scaleOutRepositories/{id}` path allows you to get a scale-out backup repository that has the specified `id`."
      operationId: "GetScaleOutRepository"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the scale-out backup repository."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScaleOutRepositoryModel'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get Scale-Out Backup Repository"
      tags:
        - Repositories
      x-veeam-authorize:
        claims:
          - ViewScaleOutRepositories
  /api/v1/backupInfrastructure/scaleOutRepositories/{id}/disableMaintenanceMode:
    post:
      description: "The HTTP POST request to the `/api/v1/backupInfrastructure/scaleOutRepositories/{id}/disableMaintenanceMode` path allows you to disable maintenance mode for a scale-out backup repository extent that has the specified `id`."
      operationId: "DisableScaleOutExtentMaintenanceMode"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the scale-out backup repository extent."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScaleOutExtentMaintenanceSpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: "RepositoryMaintenance session has been created."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Disable Maintenance Mode"
      tags:
        - Repositories
      x-veeam-authorize:
        claims:
          - DisableRepositoryMaintenanceMode
  /api/v1/backupInfrastructure/scaleOutRepositories/{id}/enableMaintenanceMode:
    post:
      description: "The HTTP POST request to the `/api/v1/backupInfrastructure/scaleOutRepositories/{id}/enableMaintenanceMode` path allows you to enable maintenance mode for a scale-out backup repository extent that has the specified `id`."
      operationId: "EnableScaleOutExtentMaintenanceMode"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the scale-out backup repository extent."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScaleOutExtentMaintenanceSpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: "RepositoryMaintenance session has been created."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Enable Maintenance Mode"
      tags:
        - Repositories
      x-veeam-authorize:
        claims:
          - EnableRepositoryMaintenanceMode
  /api/v1/backupObjects:
    get:
      description: "The HTTP GET request to the `/api/v1/backupObjects` path allows you to get an array of virtual infrastructure objects (VMs and VM containers) that are inсluded in backups created by the backup server."
      operationId: "GetAllBackupObjects"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "Number of backup objects to skip."
          in: "query"
          name: "skip"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/BackupObjectsFilters'
        - description: "Maximum number of backup objects to return."
          in: "query"
          name: "limit"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/BackupObjectsFilters'
        - description: "Sorts backup objects by one of the backup object parameters."
          in: "query"
          name: "orderColumn"
          schema:
            $ref: '#/components/schemas/EBackupObjectsFiltersOrderColumn'
          x-veeam-spec:
            $ref: '#/components/schemas/BackupObjectsFilters'
        - description: "Sorts backup objects in the ascending order by the `orderColumn` parameter."
          in: "query"
          name: "orderAsc"
          schema:
            type: "boolean"
          x-veeam-spec:
            $ref: '#/components/schemas/BackupObjectsFilters'
        - description: "Filters backup objects by the `nameFilter` pattern. The pattern can match any backup object parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
          in: "query"
          name: "nameFilter"
          schema:
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/BackupObjectsFilters'
        - description: "Filters backup objects by platform ID."
          in: "query"
          name: "platformNameFilter"
          schema:
            $ref: '#/components/schemas/EPlatformType'
          x-veeam-spec:
            $ref: '#/components/schemas/BackupObjectsFilters'
        - description: "Filters backup objects by platform ID."
          in: "query"
          name: "platformIdFilter"
          schema:
            format: "uuid"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/BackupObjectsFilters'
        - description: "Filters backup objects by object type."
          in: "query"
          name: "typeFilter"
          schema:
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/BackupObjectsFilters'
        - description: "Filters backup objects by the type of VMware vSphere server."
          in: "query"
          name: "viTypeFilter"
          schema:
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/BackupObjectsFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupObjectsResult'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get All Backup Objects"
      tags:
        - Backup Objects
      x-veeam-authorize:
        claims:
          - ViewBackupObjects
  /api/v1/backupObjects/{id}:
    get:
      description: "The HTTP GET request to the `/api/v1/backupObjects/{id}` path allows you to get a backup object that has the specified `id`."
      operationId: "GetBackupObject"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the backup object."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupObjectModel'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get Backup Object"
      tags:
        - Backup Objects
      x-veeam-authorize:
        claims:
          - ViewBackupObjects
  /api/v1/backupObjects/{id}/restorePoints:
    get:
      description: "The HTTP GET request to the `/api/v1/backupObjects/{id}/restorePoints` path allows you to get an array of restore points of a backup object that has the specified `id`."
      operationId: "GetBackupObjectRestorePoints"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the backup object."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectRestorePointsResult'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get Restore Points"
      tags:
        - Backup Objects
      x-veeam-authorize:
        claims:
          - ViewRestorePoints
  /api/v1/backups:
    get:
      description: "The HTTP GET request to the `/api/v1/backups` path allows you to get an array of all backups that are created on or imported to the backup server."
      operationId: "GetAllBackups"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "Number of backups to skip."
          in: "query"
          name: "skip"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/BackupsFilters'
        - description: "Maximum number of backups to return."
          in: "query"
          name: "limit"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/BackupsFilters'
        - description: "Sorts backups by one of the backup parameters."
          in: "query"
          name: "orderColumn"
          schema:
            $ref: '#/components/schemas/EBackupsFiltersOrderColumn'
          x-veeam-spec:
            $ref: '#/components/schemas/BackupsFilters'
        - description: "Sorts backups in the ascending order by the `orderColumn` parameter."
          in: "query"
          name: "orderAsc"
          schema:
            type: "boolean"
          x-veeam-spec:
            $ref: '#/components/schemas/BackupsFilters'
        - description: "Filters backups by the `nameFilter` pattern. The pattern can match any backup parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
          in: "query"
          name: "nameFilter"
          schema:
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/BackupsFilters'
        - description: "Returns backups that are created after the specified date and time."
          in: "query"
          name: "createdAfterFilter"
          schema:
            format: "date-time"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/BackupsFilters'
        - description: "Returns backups that are created before the specified date and time."
          in: "query"
          name: "createdBeforeFilter"
          schema:
            format: "date-time"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/BackupsFilters'
        - description: "Filters backups by ID of the backup object platform."
          in: "query"
          name: "platformIdFilter"
          schema:
            format: "uuid"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/BackupsFilters'
        - description: "Filters backups by ID of the parent job."
          in: "query"
          name: "jobIdFilter"
          schema:
            format: "uuid"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/BackupsFilters'
        - description: "Filters backups by retention policy tag."
          in: "query"
          name: "policyTagFilter"
          schema:
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/BackupsFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupsResult'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get All Backups"
      tags:
        - Backups
      x-veeam-authorize:
        claims:
          - ViewBackups
  /api/v1/backups/{id}:
    get:
      description: "The HTTP GET request to the `/api/v1/backups/{id}` path allows you to get a backup that has the specified `id`."
      operationId: "GetBackup"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the backup."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupModel'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get Backup"
      tags:
        - Backups
      x-veeam-authorize:
        claims:
          - ViewBackups
  /api/v1/backups/{id}/objects:
    get:
      description: "The HTTP GET request to the `/api/v1/backups/{id}/objects` path allows you to get an array of virtual infrastructure objects (VMs and VM containers) that are inсluded in a backup that has the specified ID."
      operationId: "GetBackupObjects"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the backup."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupObjectsResult'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get Backup Objects"
      tags:
        - Backups
      x-veeam-authorize:
        claims:
          - ViewBackupObjects
  /api/v1/configBackup:
    get:
      description: "The HTTP GET request to the `/api/v1/configBackup` path allows you to get configuration backup of the backup server."
      operationId: "GetConfigBackupOptions"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigBackupModel'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get Configuration Backup"
      tags:
        - Configuration Backup
      x-veeam-authorize:
        claims:
          - ViewConfigBackupOptions
    put:
      description: "The HTTP PUT request to the `/api/v1/configBackup` path allows you to edit configuration backup of the backup server."
      operationId: "UpdateConfigBackupOptions"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigBackupModel'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigBackupModel'
          description: "Configuration backup settings have been updated."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Edit Configuration Backup"
      tags:
        - Configuration Backup
      x-veeam-authorize:
        claims:
          - UpdateConfigBackupOptions
  /api/v1/configBackup/backup:
    post:
      description: "The HTTP POST request to the `/api/v1/configBackup` path allows you to start configuration backup."
      operationId: "StartConfigBackup"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: "Configuration backup has been started."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Start Configuration Backup"
      tags:
        - Configuration Backup
      x-veeam-authorize:
        claims:
          - StartConfigBackup
  /api/v1/connectionCertificate:
    post:
      description: "The HTTP POST request to the `/api/v1/connectionCertificate` path allows you to get a TLS certificate or SSH fingerprint of the specified host."
      operationId: "GetConnectionCertificate"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostConnectionSpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionCertificateModel'
          description: "OK"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Request TLS Certificate or SSH Fingerprint"
      tags:
        - Connection
      x-veeam-authorize:
        claims:
          - CheckCertificate
  /api/v1/credentials:
    get:
      description: "The HTTP GET request to the `/api/v1/credentials` path allows you to get an array of credentials records that are added to the backup server."
      operationId: "GetAllCreds"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "Number of credentials records to skip."
          in: "query"
          name: "skip"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/CredentialsFilters'
        - description: "Maximum number of credentials records to return."
          in: "query"
          name: "limit"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/CredentialsFilters'
        - description: "Sorts credentials by one of the credentials parameters."
          in: "query"
          name: "orderColumn"
          schema:
            $ref: '#/components/schemas/ECredentialsFiltersOrderColumn'
          x-veeam-spec:
            $ref: '#/components/schemas/CredentialsFilters'
        - description: "Sorts credentials in the ascending order by the `orderColumn` parameter."
          in: "query"
          name: "orderAsc"
          schema:
            type: "boolean"
          x-veeam-spec:
            $ref: '#/components/schemas/CredentialsFilters'
        - description: "Filters credentials by the `nameFilter` pattern. The pattern can match any credentials parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
          in: "query"
          name: "nameFilter"
          schema:
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/CredentialsFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialsResult'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get All Credentials"
      tags:
        - Credentials
      x-veeam-authorize:
        claims:
          - ViewCredentials
    post:
      description: "The HTTP POST request to the `/api/v1/credentials` path allows you to add a credentials record."
      operationId: "CreateCreds"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsSpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialsModel'
          description: "Account has been added."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Add Credentials Record"
      tags:
        - Credentials
      x-veeam-authorize:
        claims:
          - CreateCredentials
  /api/v1/credentials/{id}:
    delete:
      description: "The HTTP DELETE request to the `/api/v1/credentials/{id}` path allows you to remove a credentials record that has the specified `id`."
      operationId: "DeleteCreds"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the credentials record."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: "Credentials record has been removed."
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Remove Credentials Record"
      tags:
        - Credentials
      x-veeam-authorize:
        claims:
          - DeleteCredentials
    get:
      description: "The HTTP GET request to the `/api/v1/credentials/{id}` path allows you to get a credentials record that has the specified `id`."
      operationId: "GetCreds"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the credentials record."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialsModel'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get Credentials Record"
      tags:
        - Credentials
      x-veeam-authorize:
        claims:
          - ViewCredentials
    put:
      description: "The HTTP PUT request to the `/api/v1/credentials/{id}` path allows you to edit a credentials record that has the specified `id`."
      operationId: "UpdateCreds"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the credentials record."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsModel'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialsModel'
          description: "Credentials record has been updated."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Edit Credentials Record"
      tags:
        - Credentials
      x-veeam-authorize:
        claims:
          - UpdateCredentials
  /api/v1/credentials/{id}/changepassword:
    post:
      description: "The HTTP POST request to the `/api/v1/credentials/{id}/changepassword` path allows you to change a password of the credentials record that has the specified `id`."
      operationId: "ChangePasswordForCreds"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the credentials record."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsPasswordChangeSpec'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: "Password has been changed."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Change Password"
      tags:
        - Credentials
      x-veeam-authorize:
        claims:
          - ChangeAccountPassword
  /api/v1/credentials/{id}/changeprivatekey:
    post:
      description: "The HTTP POST request to the `/api/v1/credentials/{id}/changeprivatekey` path allows you to change a Linux private key of the credentials record that has the specified `id`."
      operationId: "ChangePrivateKeyForCreds"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the credentials record."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivateKeyChangeSpec'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: "Private key has been changed."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Change Linux Private Key"
      tags:
        - Credentials
      x-veeam-authorize:
        claims:
          - ChangeLinuxPrivateKey
  /api/v1/credentials/{id}/changerootpassword:
    post:
      description: "The HTTP POST request to the `/api/v1/credentials/{id}/changerootpassword` path allows you to change a Linux root password of the credentials record that has the specified `id`."
      operationId: "ChangeRootPasswordForCreds"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the credentials record."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsPasswordChangeSpec'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: "Root password has been changed."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Change Linux Root Password"
      tags:
        - Credentials
      x-veeam-authorize:
        claims:
          - ChangeLinuxRootPassword
  /api/v1/encryptionPasswords:
    get:
      description: "The HTTP GET request to the `/api/v1/encryptionPasswords` path allows you to get an array of all passwords that are used for data encryption."
      operationId: "GetAllEncryptionPasswords"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "Number of passwords to skip."
          in: "query"
          name: "skip"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/EncryptionPasswordsFilters'
        - description: "Maximum number of passwords to return."
          in: "query"
          name: "limit"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/EncryptionPasswordsFilters'
        - description: "Sorts passwords by one of the password parameters."
          in: "query"
          name: "orderColumn"
          schema:
            $ref: '#/components/schemas/EEncryptionPasswordsFiltersOrderColumn'
          x-veeam-spec:
            $ref: '#/components/schemas/EncryptionPasswordsFilters'
        - description: "Sorts passwords in the ascending order by the `orderColumn` parameter."
          in: "query"
          name: "orderAsc"
          schema:
            type: "boolean"
          x-veeam-spec:
            $ref: '#/components/schemas/EncryptionPasswordsFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionPasswordsResult'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get All Encryption Passwords"
      tags:
        - Encryption
      x-veeam-authorize:
        claims:
          - ViewEncryptionPasswords
    post:
      description: "The HTTP POST request to the `/api/v1/encryptionPasswords` path allows you to add an encryption password."
      operationId: "CreateEncryptionPassword"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncryptionPasswordSpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionPasswordModel'
          description: "Password has been added."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Add Encryption Password"
      tags:
        - Encryption
      x-veeam-authorize:
        claims:
          - CreateEncryptionPasswords
  /api/v1/encryptionPasswords/{id}:
    delete:
      description: "The HTTP DELETE request to the `/api/v1/encryptionPasswords/{id}` path allows you to remove an encryption password that has the specified `id`."
      operationId: "DeleteEncryptionPassword"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the encryption password."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: "Password has been removed."
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Remove Encryption Password"
      tags:
        - Encryption
      x-veeam-authorize:
        claims:
          - DeleteEncryptionPasswords
    get:
      description: "The HTTP GET request to the `/api/v1/encryptionPasswords/{id}` path allows you to get an encryption password that has the specified `id`."
      operationId: "GetEncryptionPassword"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the encryption password."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionPasswordModel'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get Encryption Password"
      tags:
        - Encryption
      x-veeam-authorize:
        claims:
          - ViewEncryptionPasswords
    put:
      description: "The HTTP PUT request to the `/api/v1/encryptionPasswords/{id}` path allows you to edit an encryption password that has the specified `id`."
      operationId: "UpdateEncryptionPassword"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the encryption password."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncryptionPasswordModel'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionPasswordModel'
          description: "Password has been updated."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Edit Encryption Password"
      tags:
        - Encryption
      x-veeam-authorize:
        claims:
          - UpdateEncryptionPasswords
  /api/v1/generalOptions:
    get:
      description: "The HTTP GET request to the `/api/v1/generalOptions` path allows you to get general options of Veeam Backup & Replication."
      operationId: "GetGeneralOptions"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralOptionsModel'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get General Options"
      tags:
        - General Options
      x-veeam-authorize:
        claims:
          - ViewGeneralOptions
    put:
      description: "The HTTP PUT request to the `/api/v1/generalOptions` path allows you to edit general options of Veeam Backup & Replication."
      operationId: "UpdateGeneralOptions"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneralOptionsModel'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralOptionsModel'
          description: "General options have been updated."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Edit General Options"
      tags:
        - General Options
      x-veeam-authorize:
        claims:
          - UpdateGeneralOptions
  /api/v1/inventory/vmware/hosts:
    get:
      description: "The HTTP GET request to the `/api/v1/inventory/vmware/hosts` path allows you to get an array of all VMware vSphere servers added to the backup infrastructure."
      operationId: "GetAllInventoryVmwareHosts"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "Number of VMware vSphere servers to skip."
          in: "query"
          name: "skip"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/ViRootFilters'
        - description: "Maximum number of VMware vSphere servers to return."
          in: "query"
          name: "limit"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/ViRootFilters'
        - description: "Sorts VMware vSphere servers by one of the VMware vSphere server parameters."
          in: "query"
          name: "orderColumn"
          schema:
            $ref: '#/components/schemas/EViRootFiltersOrderColumn'
          x-veeam-spec:
            $ref: '#/components/schemas/ViRootFilters'
        - description: "Sorts VMware vSphere servers in the ascending order by the `orderColumn` parameter."
          in: "query"
          name: "orderAsc"
          schema:
            type: "boolean"
          x-veeam-spec:
            $ref: '#/components/schemas/ViRootFilters'
        - description: "Filters VMware vSphere servers by the `nameFilter` pattern. The pattern can match any VMware vSphere server parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
          in: "query"
          name: "nameFilter"
          schema:
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/ViRootFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViRootsResult'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get All VMware vSphere Servers"
      tags:
        - Inventory Browser
      x-veeam-authorize:
        claims:
          - ViewViHierarchy
  /api/v1/inventory/vmware/hosts/{name}:
    get:
      description: "The HTTP GET request to the `/api/v1/inventory/vmware/hosts/{name}` path allows you to get an array of virtual infrastructure objects of the VMware vSphere server that has the specified `name`."
      operationId: "GetVmwareHostObject"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "Name of the VMware vSphere server."
          in: "path"
          name: "name"
          required: true
          schema:
            type: "string"
        - description: "Number of objects to skip."
          in: "query"
          name: "skip"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/VCenterInventoryFilters'
        - description: "Maximum number of objects to return."
          in: "query"
          name: "limit"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/VCenterInventoryFilters'
        - description: "Sorts objects by one of the object parameters."
          in: "query"
          name: "orderColumn"
          schema:
            $ref: '#/components/schemas/EvCentersInventoryFiltersOrderColumn'
          x-veeam-spec:
            $ref: '#/components/schemas/VCenterInventoryFilters'
        - description: "Sorts objects in the ascending order by the `orderColumn` parameter."
          in: "query"
          name: "orderAsc"
          schema:
            type: "boolean"
          x-veeam-spec:
            $ref: '#/components/schemas/VCenterInventoryFilters'
        - description: "Filters objects by object ID."
          in: "query"
          name: "objectIdFilter"
          schema:
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/VCenterInventoryFilters'
        - description: "Filters objects by hierarchy type."
          in: "query"
          name: "hierarchyTypeFilter"
          schema:
            $ref: '#/components/schemas/EHierarchyType'
          x-veeam-spec:
            $ref: '#/components/schemas/VCenterInventoryFilters'
        - description: "Filters objects by the `nameFilter` pattern. The pattern can match any object parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
          in: "query"
          name: "nameFilter"
          schema:
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/VCenterInventoryFilters'
        - description: "Filters objects by virtual infrastructure type."
          in: "query"
          name: "typeFilter"
          schema:
            $ref: '#/components/schemas/EVmwareInventoryType'
          x-veeam-spec:
            $ref: '#/components/schemas/VCenterInventoryFilters'
        - description: "Filters objects by name of the parent container."
          in: "query"
          name: "parentContainerNameFilter"
          schema:
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/VCenterInventoryFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VCenterInventoryResult'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get VMware vSphere Server Objects"
      tags:
        - Inventory Browser
      x-veeam-authorize:
        claims:
          - ViewViHierarchy
  /api/v1/jobs:
    get:
      description: "The HTTP GET request to the `/api/v1/jobs` path allows you to get an array of all jobs coordinated by the backup server."
      operationId: "GetAllJobs"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "Number of jobs to skip."
          in: "query"
          name: "skip"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/JobsFilters'
        - description: "Maximum number of jobs to return."
          in: "query"
          name: "limit"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/JobsFilters'
        - description: "Sorts jobs by one of the job parameters."
          in: "query"
          name: "orderColumn"
          schema:
            $ref: '#/components/schemas/EJobFiltersOrderColumn'
          x-veeam-spec:
            $ref: '#/components/schemas/JobsFilters'
        - description: "Sorts jobs in the ascending order by the `orderColumn` parameter."
          in: "query"
          name: "orderAsc"
          schema:
            type: "boolean"
          x-veeam-spec:
            $ref: '#/components/schemas/JobsFilters'
        - description: "Filters jobs by the `nameFilter` pattern. The pattern can match any job parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
          in: "query"
          name: "nameFilter"
          schema:
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/JobsFilters'
        - description: "Filters jobs by job type."
          in: "query"
          name: "typeFilter"
          schema:
            $ref: '#/components/schemas/EJobType'
          x-veeam-spec:
            $ref: '#/components/schemas/JobsFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobsResult'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get All Jobs"
      tags:
        - Jobs
      x-veeam-authorize:
        claims:
          - ViewJobs
    post:
      description: "The HTTP POST request to the `/api/v1/jobs` path allows you to create a new job that has the specified parameters."
      operationId: "CreateJob"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobSpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
          description: "Job has been created."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Create Job"
      tags:
        - Jobs
      x-veeam-authorize:
        claims:
          - CreateJobs
  /api/v1/jobs/states:
    get:
      description: "The HTTP GET request to the `/api/v1/jobs/states` path allows you to get an array of all job states. The states include brief job information that you can also find under the **Jobs** node in the Veeam Backup & Replication console."
      operationId: "GetAllJobsStates"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "Number of job states to skip."
          in: "query"
          name: "skip"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/JobStatesFilters'
        - description: "Maximum number of job states to return."
          in: "query"
          name: "limit"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/JobStatesFilters'
        - description: "Sorts job states by one of the state parameters."
          in: "query"
          name: "orderColumn"
          schema:
            $ref: '#/components/schemas/EJobStatesFiltersOrderColumn'
          x-veeam-spec:
            $ref: '#/components/schemas/JobStatesFilters'
        - description: "Sorts job states in the ascending order by the `orderColumn` parameter."
          in: "query"
          name: "orderAsc"
          schema:
            type: "boolean"
          x-veeam-spec:
            $ref: '#/components/schemas/JobStatesFilters'
        - description: "Filters job states by job ID."
          in: "query"
          name: "idFilter"
          schema:
            format: "uuid"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/JobStatesFilters'
        - description: "Filters job states by the `nameFilter` pattern. The pattern can match any state parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
          in: "query"
          name: "nameFilter"
          schema:
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/JobStatesFilters'
        - description: "Filters job states by job type."
          in: "query"
          name: "typeFilter"
          schema:
            $ref: '#/components/schemas/EJobType'
          x-veeam-spec:
            $ref: '#/components/schemas/JobStatesFilters'
        - description: "Filters job states by status with which jobs must finish."
          in: "query"
          name: "lastResultFilter"
          schema:
            $ref: '#/components/schemas/ESessionResult'
          x-veeam-spec:
            $ref: '#/components/schemas/JobStatesFilters'
        - description: "Filters job states by current status of the job."
          in: "query"
          name: "statusFilter"
          schema:
            $ref: '#/components/schemas/EJobStatus'
          x-veeam-spec:
            $ref: '#/components/schemas/JobStatesFilters'
        - description: "Filters job states by workloads that jobs must process."
          in: "query"
          name: "workloadFilter"
          schema:
            $ref: '#/components/schemas/EJobWorkload'
          x-veeam-spec:
            $ref: '#/components/schemas/JobStatesFilters'
        - description: "Returns job states for jobs that have run after the specified date and time."
          in: "query"
          name: "lastRunAfterFilter"
          schema:
            format: "date-time"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/JobStatesFilters'
        - description: "Returns job states for jobs that have not run after the specified date and time."
          in: "query"
          name: "lastRunBeforeFilter"
          schema:
            format: "date-time"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/JobStatesFilters'
        - description: "If *true*, Returns job states for jobs with high priority."
          in: "query"
          name: "isHighPriorityJobFilter"
          schema:
            type: "boolean"
          x-veeam-spec:
            $ref: '#/components/schemas/JobStatesFilters'
        - description: "Filters job states by repository ID."
          in: "query"
          name: "repositoryIdFilter"
          schema:
            format: "uuid"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/JobStatesFilters'
        - description: "Filters job states by number of objects processed by the job."
          in: "query"
          name: "objectsCountFilter"
          schema:
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/JobStatesFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatesResult'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get All Job States"
      tags:
        - Jobs
      x-veeam-authorize:
        claims:
          - ViewJobs
  /api/v1/jobs/{id}:
    delete:
      description: "The HTTP DELETE request to the `/api/v1/jobs/{id}` path allows you to delete a job that has the specified `id`."
      operationId: "DeleteJob"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      responses:
        "204":
          $ref: '#/components/responses/Deleted'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Delete Job"
      tags:
        - Jobs
      x-veeam-authorize:
        claims:
          - DeleteJobs
    get:
      description: "The HTTP GET request to the `/api/v1/jobs/{id}` path allows you to get a job that has the specified `id`."
      operationId: "GetJob"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get Job"
      tags:
        - Jobs
      x-veeam-authorize:
        claims:
          - ViewJobs
    put:
      description: "The HTTP PUT request to the `/api/v1/jobs/{id}` path allows you to edit a job that has the specified `id`."
      operationId: "UpdateJob"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobModel'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
          description: "Job has been updated."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Edit Job"
      tags:
        - Jobs
      x-veeam-authorize:
        claims:
          - UpdateJobs
  /api/v1/jobs/{id}/disable:
    post:
      description: "The HTTP POST request to the `/api/v1/jobs/{id}/disable` path allows you to disable a job that has the specified `id`."
      operationId: "DisableJob"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: "Job has been disabled."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Disable Job"
      tags:
        - Jobs
      x-veeam-authorize:
        claims:
          - DisableJobs
  /api/v1/jobs/{id}/enable:
    post:
      description: "The HTTP POST request to the `/api/v1/jobs/{id}/enable` path allows you to enable a job that has the specified `id`."
      operationId: "EnableJob"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: "Job has been enabled."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Enable Job"
      tags:
        - Jobs
      x-veeam-authorize:
        claims:
          - EnableJobs
  /api/v1/jobs/{id}/start:
    post:
      description: "The HTTP POST request to the `/api/v1/jobs/{id}/start` path allows you to start a job that has the specified `id`."
      operationId: "StartJob"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobStartSpec'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: "Job session has been started."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Start Job"
      tags:
        - Jobs
      x-veeam-authorize:
        claims:
          - StartJobs
  /api/v1/jobs/{id}/stop:
    post:
      description: "The HTTP POST request to the `/api/v1/jobs/{id}/stop` path allows you to stop a job that has the specified `id`."
      operationId: "StopJob"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobStopSpec'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: "Job session has been stopped."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Stop Job"
      tags:
        - Jobs
      x-veeam-authorize:
        claims:
          - StopJobs
  /api/v1/objectRestorePoints:
    get:
      description: "The HTTP GET request to the `/api/v1/objectRestorePoints` path allows you to get an array of all restore points created on the backup server."
      operationId: "GetAllObjectRestorePoints"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "Number of restore points to skip."
          in: "query"
          name: "skip"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/ObjectRestorePointsFilters'
        - description: "Maximum number of restore points to return."
          in: "query"
          name: "limit"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/ObjectRestorePointsFilters'
        - description: "Sorts restore points by one of the restore point parameters."
          in: "query"
          name: "orderColumn"
          schema:
            $ref: '#/components/schemas/EObjectRestorePointsFiltersOrderColumn'
          x-veeam-spec:
            $ref: '#/components/schemas/ObjectRestorePointsFilters'
        - description: "Sorts restore points in the ascending order by the `orderColumn` parameter."
          in: "query"
          name: "orderAsc"
          schema:
            type: "boolean"
          x-veeam-spec:
            $ref: '#/components/schemas/ObjectRestorePointsFilters'
        - description: "Returns restore points that are created after the specified date and time."
          in: "query"
          name: "createdAfterFilter"
          schema:
            format: "date-time"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/ObjectRestorePointsFilters'
        - description: "Returns restore points that are created before the specified date and time."
          in: "query"
          name: "createdBeforeFilter"
          schema:
            format: "date-time"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/ObjectRestorePointsFilters'
        - description: "Filters restore points by the `nameFilter` pattern. The pattern can match any restore point parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
          in: "query"
          name: "nameFilter"
          schema:
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/ObjectRestorePointsFilters'
        - description: "Filters restore points by name of the backup object platform."
          in: "query"
          name: "platformNameFilter"
          schema:
            $ref: '#/components/schemas/EPlatformType'
          x-veeam-spec:
            $ref: '#/components/schemas/ObjectRestorePointsFilters'
        - description: "Filters restore points by ID of the backup object platform."
          in: "query"
          name: "platformIdFilter"
          schema:
            format: "uuid"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/ObjectRestorePointsFilters'
        - description: "Filters restore points by backup ID."
          in: "query"
          name: "backupIdFilter"
          schema:
            format: "uuid"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/ObjectRestorePointsFilters'
        - description: "Filters restore points by backup object ID."
          in: "query"
          name: "backupObjectIdFilter"
          schema:
            format: "uuid"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/ObjectRestorePointsFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectRestorePointsResult'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get All Restore Points"
      tags:
        - Object Restore Points
      x-veeam-authorize:
        claims:
          - ViewRestorePoints
  /api/v1/objectRestorePoints/{id}:
    get:
      description: "The HTTP GET request to the `/api/v1/objectRestorePoints/{id}` path allows you to get a restore point that has the specified `id`."
      operationId: "GetObjectRestorePoint"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the restore point."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectRestorePointModel'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get Restore Point"
      tags:
        - Object Restore Points
      x-veeam-authorize:
        claims:
          - ViewRestorePoints
  /api/v1/objectRestorePoints/{id}/disks:
    get:
      description: "The HTTP GET request to the `/api/v1/objectRestorePoints/{id}/disks` path allows you to get an array of disks from a restore point that has the specified `id`."
      operationId: "GetObjectRestorePointDisks"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "ID of the restore point."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectRestorePointDisksResult'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get Restore Point Disks"
      tags:
        - Object Restore Points
      x-veeam-authorize:
        claims:
          - ViewRestorePointDisks
  /api/v1/restore/instantRecovery/vmware/fcd/:
    post:
      description: "The HTTP POST request to the `/api/v1/restore/instantRecovery/vmware/fcd/` path allows you to start Instant FCD Recovery from the specified restore point to the specified cluster. For details on how to get a cluster model, see [Get VMware vSphere Server Objects](#operation/GetVmwareHostObject)."
      operationId: "InstantRecoveryVmwareFcdMount"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VmwareFcdInstantRecoverySpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmwareFcdInstantRecoveryMount'
          description: "Instant FCD Recovery has been started."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Start Instant FCD Recovery"
      tags:
        - Restore
      x-veeam-authorize:
        claims:
          - StartFCDInstantRecovery
  /api/v1/restore/instantRecovery/vmware/fcd/{mountId}:
    get:
      description: "The HTTP GET request to the `/api/v1/restore/instantRecovery/vmware/fcd/{mountId}` path allows you to get information about the mounted vPower NFS datastore, such as restore session ID, mount state, instant recovery settings and disks that will be recovered."
      operationId: "GetVmwareFcdInstantRecoveryMountModel"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "Mount ID."
          in: "path"
          name: "mountId"
          required: true
          schema:
            format: "uuid"
            type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmwareFcdInstantRecoveryMount'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get Mount Information"
      tags:
        - Restore
      x-veeam-authorize:
        claims:
          - ViewIRMountedDisks
  /api/v1/restore/instantRecovery/vmware/fcd/{mountId}/dismount:
    post:
      description: "The HTTP POST request to the `/api/v1/restore/instantRecovery/vmware/fcd/{mountId}/dismount` path allows you to stop publishing the recovered FCDs and remove the disks from the datastore."
      operationId: "InstantRecoveryVmwareFcdDismount"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "Mount ID."
          in: "path"
          name: "mountId"
          required: true
          schema:
            format: "uuid"
            type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmwareFcdInstantRecoveryMount'
          description: "Disks has been unmounted."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Stop FCD Publishing"
      tags:
        - Restore
      x-veeam-authorize:
        claims:
          - DismountIRDisks
  /api/v1/restore/instantRecovery/vmware/fcd/{mountId}/migrate:
    post:
      description: "The HTTP POST request to the `/api/v1/restore/instantRecovery/vmware/fcd/{mountId}/migrate` path allows you to start migration of FCDs from the specified mount."
      operationId: "InstantRecoveryVmwareFcdMigrate"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "Mount ID."
          in: "path"
          name: "mountId"
          required: true
          schema:
            format: "uuid"
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VmwareFcdQuickMigrationSpec'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmwareFcdInstantRecoveryMount'
          description: "FCD Migration has been started."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Start FCD Migration"
      tags:
        - Restore
      x-veeam-authorize:
        claims:
          - MigrateIRMountedDisks
  /api/v1/serverCertificate:
    get:
      description: "The HTTP GET request to the `/api/v1/serverCertificate` path allows you to get a certificate of the backup server."
      operationId: "GetServerCertificate"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateModel'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security: []
      summary: "Get Server Certificate"
      tags:
        - Service
  /api/v1/serverTime:
    get:
      description: "The HTTP GET request to the `/api/v1/serverTime` path allows you to get current date and time on the backup server."
      operationId: "GetServerTime"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerTimeModel'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      security: []
      summary: "Get Server Time"
      tags:
        - Service
  /api/v1/services:
    get:
      description: "The HTTP GET request to the `/api/v1/services` path allows you to get associated services for integration with Veeam Backup & Replication."
      operationId: "GetAllServices"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "Number of services to skip."
          in: "query"
          name: "skip"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/ServicesFilters'
        - description: "Maximum number of services to return."
          in: "query"
          name: "limit"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/ServicesFilters'
        - description: "Sorts services by one of the service parameters."
          in: "query"
          name: "orderColumn"
          schema:
            $ref: '#/components/schemas/EServicesFiltersOrderColumn'
          x-veeam-spec:
            $ref: '#/components/schemas/ServicesFilters'
        - description: "Sorts services in the ascending order by the `orderColumn` parameter."
          in: "query"
          name: "orderAsc"
          schema:
            type: "boolean"
          x-veeam-spec:
            $ref: '#/components/schemas/ServicesFilters'
        - description: "Filters services by the `nameFilter` pattern. The pattern can match any service parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
          in: "query"
          name: "nameFilter"
          schema:
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/ServicesFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicesResult'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get Associated Services"
      tags:
        - Services
      x-veeam-authorize:
        claims:
          - ViewServices
  /api/v1/sessions:
    get:
      description: "The HTTP GET request to the `/api/v1/sessions` path allows you to get an array of sessions performed on the backup server."
      operationId: "GetAllSessions"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
        - description: "Number of sessions to skip."
          in: "query"
          name: "skip"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
        - description: "Maximum number of sessions to return."
          in: "query"
          name: "limit"
          schema:
            format: "int32"
            type: "integer"
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
        - description: "Sorts sessions by one of the session parameters."
          in: "query"
          name: "orderColumn"
          schema:
            $ref: '#/components/schemas/ESessionsFiltersOrderColumn'
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
        - description: "Sorts sessions in the ascending order by the `orderColumn` parameter."
          in: "query"
          name: "orderAsc"
          schema:
            type: "boolean"
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
        - description: "Filters sessions by the `nameFilter` pattern. The pattern can match any session parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
          in: "query"
          name: "nameFilter"
          schema:
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
        - description: "Returns sessions that are created after the specified date and time."
          in: "query"
          name: "createdAfterFilter"
          schema:
            format: "date-time"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
        - description: "Returns sessions that are created before the specified date and time."
          in: "query"
          name: "createdBeforeFilter"
          schema:
            format: "date-time"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
        - description: "Returns sessions that are finished after the specified date and time."
          in: "query"
          name: "endedAfterFilter"
          schema:
            format: "date-time"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
        - description: "Returns sessions that are finished before the specified date and time."
          in: "query"
          name: "endedBeforeFilter"
          schema:
            format: "date-time"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
        - description: "Filters sessions by session type."
          in: "query"
          name: "typeFilter"
          schema:
            $ref: '#/components/schemas/ESessionType'
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
        - description: "Filters sessions by session state."
          in: "query"
          name: "stateFilter"
          schema:
            $ref: '#/components/schemas/ESessionState'
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
        - description: "Filters sessions by session result."
          in: "query"
          name: "resultFilter"
          schema:
            $ref: '#/components/schemas/ESessionResult'
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
        - description: "Filters sessions by job ID."
          in: "query"
          name: "jobIdFilter"
          schema:
            format: "uuid"
            type: "string"
          x-veeam-spec:
            $ref: '#/components/schemas/SessionsFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionsResult'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get All Sessions"
      tags:
        - Sessions
      x-veeam-authorize:
        claims:
          - ViewSessions
  /api/v1/sessions/{id}:
    get:
      description: "The HTTP GET request to the `/api/v1/sessions/{id}` path allows you to get a session that has the specified `id`."
      operationId: "GetSession"
      parameters:
        - description: "ID of the session."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
        - $ref: '#/components/parameters/apiVersionParam'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get Session"
      tags:
        - Sessions
      x-veeam-authorize:
        claims:
          - ViewSessions
  /api/v1/sessions/{id}/logs:
    get:
      description: "The HTTP GET request to the `/api/v1/sessions/{id}/logs` path allows you to get an array of log records of a session that has the specified `id`."
      operationId: "GetSessionLogs"
      parameters:
        - description: "ID of the session."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
        - $ref: '#/components/parameters/apiVersionParam'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionLogResult'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get Session Logs"
      tags:
        - Sessions
      x-veeam-authorize:
        claims:
          - ViewSessions
  /api/v1/sessions/{id}/stop:
    post:
      description: "The HTTP POST request to the `/api/v1/sessions/{id}/stop` path allows you to stop a session that has the specified `id`."
      operationId: "StopSession"
      parameters:
        - description: "ID of the session."
          in: "path"
          name: "id"
          required: true
          schema:
            format: "uuid"
            type: "string"
        - $ref: '#/components/parameters/apiVersionParam'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Stop Session"
      tags:
        - Sessions
      x-veeam-authorize:
        claims:
          - StopSessions
  /api/v1/trafficRules:
    get:
      description: "The HTTP GET request to the `/api/v1/trafficRules` path allows you to get network traffic rules that control traffic transferred between backup infrastructure components."
      operationId: "GetAllTrafficRules"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalNetworkTrafficRulesModel'
          description: "OK"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Get Traffic Rules"
      tags:
        - Traffic Rules
      x-veeam-authorize:
        claims:
          - ViewTrafficRules
    put:
      description: "The HTTP PUT request to the `/api/v1/trafficRules` path allows you to edit network traffic rules that are configured on the backup server."
      operationId: "UpdateTrafficRules"
      parameters:
        - $ref: '#/components/parameters/apiVersionParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalNetworkTrafficRulesModel'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalNetworkTrafficRulesModel'
          description: "Infrastructure session has been created to edit the traffic rules. To check the progress, track the session `state`."
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: "Edit Traffic Rules"
      tags:
        - Traffic Rules
      x-veeam-authorize:
        claims:
          - UpdateTrafficRules
security:
  - Bearer: []
servers:
  - url: "/"
tags:
  - description: "The authorization process involves obtaining an access token and a refresh token.<br> For details on the authorization process and security settings, see the [Authorization and Security](https://helpcenter.veeam.com/docs/backup/vbr_rest/authorization_security.html) section of the Veeam Backup & Replication REST API Reference.\n"
    name: "Login"
  - description: "The Service section defines paths and operations for retrieving current date and time and a certificate of the backup server where the REST API service is running.\n"
    name: "Service"
  - description: "The Services section defines a path and operation for retrieving information about associated backend services. You may need to connect to these services for integration with Veeam Backup & Replication only.\n"
    name: "Services"
  - description: "The Traffic Rules section defines paths and operations for retrieving and editing information about network traffic rules that are configured on the backup server.\n"
    name: "Traffic Rules"
  - description: "The General Options section defines paths and operations for retrieving and editing general options of Veeam Backup & Replication.\n"
    name: "General Options"
  - description: "The Configuration Backup section defines paths and operations for retrieving and editing general options of Veeam Backup & Replication.\n"
    name: "Configuration Backup"
  - description: "The Sessions section defines paths and operations for managing sessions (except [automation sessions](#operation/GetAllAutomationSessions)) performed on the backup server.\n"
    name: "Sessions"
  - description: "The Connection section defines a path and operation for retrieving a TLS certificate or SSH fingerprint used to establish a secure connection between the backup server and the specified server.\n"
    name: "Connection"
  - description: "The Inventory Browser section defines paths and operations for retrieving VMware vSphere servers and their virtual infrastructure objects (datacenters, clusters, hosts, resource pools, VMs).<br> <div class=\"note\"><strong>NOTE</strong><br>In the current version, you can browse VMware vSphere objects only.</div>\n"
    name: "Inventory Browser"
  - description: "The Managed Servers section defines paths and operations for managing servers that are added to the backup infrastructure.<br> <div class=\"note\"><strong>NOTE</strong><br>In the current version, the REST API supports the following server types: VMware vSphere, Linux and Windows.</div>\n"
    name: "Managed Servers"
  - description: "The Repositories section defines paths and operations for managing backup repositories that are added to the backup infrastructure.<br> <div class=\"note\"><strong>NOTE</strong><br>In the current version, the REST API supports direct attached and network attached storages only.</div>\n"
    name: "Repositories"
  - description: "The Proxies section defines paths and operations for managing backup proxies that are added to the backup infrastructure.<br> <div class=\"note\"><strong>NOTE</strong><br>In the current version, the REST API supports VMware backup proxies only.</div>\n"
    name: "Proxies"
  - description: "The Jobs section defines paths and operations for managing jobs that are coordinated by the backup server.<br> <div class=\"note\"><strong>NOTE</strong><br>In the current version, the REST API supports backup jobs with VMware VMs only.</div>\n"
    name: "Jobs"
  - description: "The Credentials section defines paths and operations for managing credentials records that are added to the backup server.\n"
    name: "Credentials"
  - description: "The Encryption section defines paths and operations for managing passwords that are used for data encryption."
    name: "Encryption"
  - description: "The Backups section defines paths and operations for managing backups that are created on or imported to the backup server."
    name: "Backups"
  - description: "The Backup Objects section defines paths and operations for managing backup objects — virtual infrastructure objects (VMs and VM containers) that are inсluded in backups created by the backup server.\n"
    name: "Backup Objects"
  - description: "The Object Restore Points section defines paths and operations for retrieving restore points created on the backup server and backed up disks from the restore points."
    name: "Object Restore Points"
  - description: "The Restore section defines paths and operations for performing restore.<br> <div class=\"note\"><strong>NOTE</strong><br>In the current version, you can restore only disks that will be registered as First Class Disks (FCD) — a type of virtual disks that can be managed independent of any VM.</div>\n"
    name: "Restore"
  - description: "The Automation section defines paths and operations for granular import and export of objects available in the REST API. It can be useful, for example, if you set up the backup infrastructure using JSON specification or migrate the infrastructure to another backup server. For details, see [Mass Deployment](https://helpcenter.veeam.com/docs/backup/vbr_rest/automation.html).\n"
    name: "Automation"
