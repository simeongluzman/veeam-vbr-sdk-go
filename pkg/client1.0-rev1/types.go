// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package client

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for EAllowedBackupsType.
const (
	All            EAllowedBackupsType = "All"
	FullsOnly      EAllowedBackupsType = "FullsOnly"
	IncrementsOnly EAllowedBackupsType = "IncrementsOnly"
)

// Defines values for EApplicationSettingsVSS.
const (
	EApplicationSettingsVSSDisabled       EApplicationSettingsVSS = "disabled"
	EApplicationSettingsVSSIgnoreFailures EApplicationSettingsVSS = "ignoreFailures"
	EApplicationSettingsVSSRequireSuccess EApplicationSettingsVSS = "requireSuccess"
)

// Defines values for EBackupExclusionPolicy.
const (
	EBackupExclusionPolicyDisabled    EBackupExclusionPolicy = "disabled"
	EBackupExclusionPolicyExcludeOnly EBackupExclusionPolicy = "excludeOnly"
	EBackupExclusionPolicyIncludeOnly EBackupExclusionPolicy = "includeOnly"
)

// Defines values for EBackupModeType.
const (
	Full                        EBackupModeType = "Full"
	Incremental                 EBackupModeType = "Incremental"
	ReverseIncremental          EBackupModeType = "ReverseIncremental"
	TransformForeverIncremental EBackupModeType = "TransformForeverIncremental"
	Transofrm                   EBackupModeType = "Transofrm"
)

// Defines values for EBackupObjectsFiltersOrderColumn.
const (
	EBackupObjectsFiltersOrderColumnName       EBackupObjectsFiltersOrderColumn = "Name"
	EBackupObjectsFiltersOrderColumnObjectId   EBackupObjectsFiltersOrderColumn = "ObjectId"
	EBackupObjectsFiltersOrderColumnPlatformId EBackupObjectsFiltersOrderColumn = "PlatformId"
	EBackupObjectsFiltersOrderColumnType       EBackupObjectsFiltersOrderColumn = "Type"
)

// Defines values for EBackupOracleLogsSettings.
const (
	EBackupOracleLogsSettingsDeleteExpiredGBs   EBackupOracleLogsSettings = "deleteExpiredGBs"
	EBackupOracleLogsSettingsDeleteExpiredHours EBackupOracleLogsSettings = "deleteExpiredHours"
	EBackupOracleLogsSettingsPreserve           EBackupOracleLogsSettings = "preserve"
)

// Defines values for EBackupProxyImportType.
const (
	Vmware EBackupProxyImportType = "vmware"
)

// Defines values for EBackupProxyTransportMode.
const (
	EBackupProxyTransportModeAuto             EBackupProxyTransportMode = "auto"
	EBackupProxyTransportModeDirectAccess     EBackupProxyTransportMode = "directAccess"
	EBackupProxyTransportModeNetwork          EBackupProxyTransportMode = "network"
	EBackupProxyTransportModeVirtualAppliance EBackupProxyTransportMode = "virtualAppliance"
)

// Defines values for EBackupScriptProcessingMode.
const (
	DisableExec        EBackupScriptProcessingMode = "disableExec"
	IgnoreExecFailures EBackupScriptProcessingMode = "ignoreExecFailures"
	RequireSuccess     EBackupScriptProcessingMode = "requireSuccess"
)

// Defines values for EBackupsFiltersOrderColumn.
const (
	EBackupsFiltersOrderColumnCreationTime EBackupsFiltersOrderColumn = "CreationTime"
	EBackupsFiltersOrderColumnJobId        EBackupsFiltersOrderColumn = "JobId"
	EBackupsFiltersOrderColumnName         EBackupsFiltersOrderColumn = "Name"
	EBackupsFiltersOrderColumnPlatformId   EBackupsFiltersOrderColumn = "PlatformId"
	EBackupsFiltersOrderColumnPolicyTag    EBackupsFiltersOrderColumn = "PolicyTag"
)

// Defines values for ECompressionLevel.
const (
	ECompressionLevelAuto          ECompressionLevel = "Auto"
	ECompressionLevelDedupFriendly ECompressionLevel = "DedupFriendly"
	ECompressionLevelExtreme       ECompressionLevel = "Extreme"
	ECompressionLevelHigh          ECompressionLevel = "High"
	ECompressionLevelNone          ECompressionLevel = "None"
	ECompressionLevelOptimal       ECompressionLevel = "Optimal"
)

// Defines values for EConfigBackupSMTPSettingsType.
const (
	Custom EConfigBackupSMTPSettingsType = "Custom"
	Global EConfigBackupSMTPSettingsType = "Global"
)

// Defines values for ECredentialsFiltersOrderColumn.
const (
	ECredentialsFiltersOrderColumnDescription ECredentialsFiltersOrderColumn = "Description"
	ECredentialsFiltersOrderColumnUsername    ECredentialsFiltersOrderColumn = "Username"
)

// Defines values for ECredentialsType.
const (
	Linux    ECredentialsType = "Linux"
	Standard ECredentialsType = "Standard"
)

// Defines values for EDailyKinds.
const (
	Everyday     EDailyKinds = "Everyday"
	SelectedDays EDailyKinds = "SelectedDays"
	WeekDays     EDailyKinds = "WeekDays"
)

// Defines values for EDayNumberInMonth.
const (
	EDayNumberInMonthFirst  EDayNumberInMonth = "First"
	EDayNumberInMonthFourth EDayNumberInMonth = "Fourth"
	EDayNumberInMonthLast   EDayNumberInMonth = "Last"
	EDayNumberInMonthOnDay  EDayNumberInMonth = "OnDay"
	EDayNumberInMonthSecond EDayNumberInMonth = "Second"
	EDayNumberInMonthThird  EDayNumberInMonth = "Third"
)

// Defines values for EDayOfWeek.
const (
	Friday    EDayOfWeek = "friday"
	Monday    EDayOfWeek = "monday"
	Saturday  EDayOfWeek = "saturday"
	Sunday    EDayOfWeek = "sunday"
	Thursday  EDayOfWeek = "thursday"
	Tuesday   EDayOfWeek = "tuesday"
	Wednesday EDayOfWeek = "wednesday"
)

// Defines values for EDiskInfoProcessState.
const (
	InProcessing       EDiskInfoProcessState = "InProcessing"
	NotProcessed       EDiskInfoProcessState = "NotProcessed"
	PartiallyProcessed EDiskInfoProcessState = "PartiallyProcessed"
	Processed          EDiskInfoProcessState = "Processed"
)

// Defines values for EDiskInfoType.
const (
	EDiskInfoTypeEndPoint      EDiskInfoType = "EndPoint"
	EDiskInfoTypeHv            EDiskInfoType = "Hv"
	EDiskInfoTypeHvRawDiskFile EDiskInfoType = "HvRawDiskFile"
	EDiskInfoTypeSimple        EDiskInfoType = "Simple"
	EDiskInfoTypeUnknown       EDiskInfoType = "Unknown"
	EDiskInfoTypeVi            EDiskInfoType = "Vi"
)

// Defines values for EEmailNotificationType.
const (
	UseCustomNotificationSettings EEmailNotificationType = "UseCustomNotificationSettings"
	UseGlobalNotificationSettings EEmailNotificationType = "UseGlobalNotificationSettings"
)

// Defines values for EEncryptionPasswordsFiltersOrderColumn.
const (
	Hint             EEncryptionPasswordsFiltersOrderColumn = "Hint"
	ModificationTime EEncryptionPasswordsFiltersOrderColumn = "ModificationTime"
)

// Defines values for EGuestFSIndexingMode.
const (
	Disable        EGuestFSIndexingMode = "disable"
	IndexAll       EGuestFSIndexingMode = "indexAll"
	IndexAllExcept EGuestFSIndexingMode = "indexAllExcept"
	IndexOnly      EGuestFSIndexingMode = "indexOnly"
)

// Defines values for EHierarchyType.
const (
	DatastoresAndVms   EHierarchyType = "DatastoresAndVms"
	HostsAndClusters   EHierarchyType = "HostsAndClusters"
	HostsAndDatastores EHierarchyType = "HostsAndDatastores"
	VmsAndTags         EHierarchyType = "VmsAndTags"
	VmsAndTemplates    EHierarchyType = "VmsAndTemplates"
)

// Defines values for EInstantRecoveryMountState.
const (
	EInstantRecoveryMountStateDismounting EInstantRecoveryMountState = "Dismounting"
	EInstantRecoveryMountStateFailed      EInstantRecoveryMountState = "Failed"
	EInstantRecoveryMountStateMounted     EInstantRecoveryMountState = "Mounted"
	EInstantRecoveryMountStateMounting    EInstantRecoveryMountState = "Mounting"
)

// Defines values for EJobFiltersOrderColumn.
const (
	EJobFiltersOrderColumnDescription EJobFiltersOrderColumn = "Description"
	EJobFiltersOrderColumnName        EJobFiltersOrderColumn = "Name"
	EJobFiltersOrderColumnType        EJobFiltersOrderColumn = "Type"
)

// Defines values for EJobStatesFiltersOrderColumn.
const (
	EJobStatesFiltersOrderColumnDescription  EJobStatesFiltersOrderColumn = "Description"
	EJobStatesFiltersOrderColumnLastResult   EJobStatesFiltersOrderColumn = "LastResult"
	EJobStatesFiltersOrderColumnLastRun      EJobStatesFiltersOrderColumn = "LastRun"
	EJobStatesFiltersOrderColumnName         EJobStatesFiltersOrderColumn = "Name"
	EJobStatesFiltersOrderColumnNextRun      EJobStatesFiltersOrderColumn = "NextRun"
	EJobStatesFiltersOrderColumnObjectsCount EJobStatesFiltersOrderColumn = "ObjectsCount"
	EJobStatesFiltersOrderColumnRepositoryId EJobStatesFiltersOrderColumn = "RepositoryId"
	EJobStatesFiltersOrderColumnStatus       EJobStatesFiltersOrderColumn = "Status"
	EJobStatesFiltersOrderColumnType         EJobStatesFiltersOrderColumn = "Type"
)

// Defines values for EJobStatus.
const (
	Disabled EJobStatus = "disabled"
	Inactive EJobStatus = "inactive"
	Running  EJobStatus = "running"
)

// Defines values for EJobType.
const (
	Backup EJobType = "Backup"
)

// Defines values for EJobWorkload.
const (
	Application EJobWorkload = "application"
	CloudVm     EJobWorkload = "cloudVm"
	File        EJobWorkload = "file"
	Server      EJobWorkload = "server"
	Vm          EJobWorkload = "vm"
	Workstation EJobWorkload = "workstation"
)

// Defines values for ELoginGrantType.
const (
	AuthorizationCode ELoginGrantType = "authorization_code"
	Password          ELoginGrantType = "password"
	RefreshToken      ELoginGrantType = "refresh_token"
)

// Defines values for EManagedServerType.
const (
	LinuxHost   EManagedServerType = "LinuxHost"
	ViHost      EManagedServerType = "ViHost"
	WindowsHost EManagedServerType = "WindowsHost"
)

// Defines values for EManagedServersFiltersOrderColumn.
const (
	EManagedServersFiltersOrderColumnDescription EManagedServersFiltersOrderColumn = "Description"
	EManagedServersFiltersOrderColumnName        EManagedServersFiltersOrderColumn = "Name"
	EManagedServersFiltersOrderColumnType        EManagedServersFiltersOrderColumn = "Type"
)

// Defines values for EMonth.
const (
	April     EMonth = "April"
	August    EMonth = "August"
	December  EMonth = "December"
	February  EMonth = "February"
	January   EMonth = "January"
	July      EMonth = "July"
	June      EMonth = "June"
	March     EMonth = "March"
	May       EMonth = "May"
	November  EMonth = "November"
	October   EMonth = "October"
	September EMonth = "September"
)

// Defines values for EObjectRestorePointOperation.
const (
	VmwareInstantRecoveryFcd EObjectRestorePointOperation = "VmwareInstantRecoveryFcd"
)

// Defines values for EObjectRestorePointsFiltersOrderColumn.
const (
	EObjectRestorePointsFiltersOrderColumnBackupId     EObjectRestorePointsFiltersOrderColumn = "BackupId"
	EObjectRestorePointsFiltersOrderColumnCreationTime EObjectRestorePointsFiltersOrderColumn = "CreationTime"
	EObjectRestorePointsFiltersOrderColumnPlatformId   EObjectRestorePointsFiltersOrderColumn = "PlatformId"
)

// Defines values for EPeriodicallyKinds.
const (
	EPeriodicallyKindsDays    EPeriodicallyKinds = "Days"
	EPeriodicallyKindsHours   EPeriodicallyKinds = "Hours"
	EPeriodicallyKindsMinutes EPeriodicallyKinds = "Minutes"
	EPeriodicallyKindsSeconds EPeriodicallyKinds = "Seconds"
)

// Defines values for EPlacementPolicyType.
const (
	DataLocality EPlacementPolicyType = "DataLocality"
	Performance  EPlacementPolicyType = "Performance"
)

// Defines values for EPlatformType.
const (
	EPlatformTypeCustomPlatform  EPlatformType = "CustomPlatform"
	EPlatformTypeHyperV          EPlatformType = "HyperV"
	EPlatformTypeLinuxPhysical   EPlatformType = "LinuxPhysical"
	EPlatformTypeNasBackup       EPlatformType = "NasBackup"
	EPlatformTypeTape            EPlatformType = "Tape"
	EPlatformTypeVcd             EPlatformType = "Vcd"
	EPlatformTypeVmWare          EPlatformType = "VmWare"
	EPlatformTypeWindowsPhysical EPlatformType = "WindowsPhysical"
)

// Defines values for EProxiesFiltersOrderColumn.
const (
	EProxiesFiltersOrderColumnDescription EProxiesFiltersOrderColumn = "Description"
	EProxiesFiltersOrderColumnName        EProxiesFiltersOrderColumn = "Name"
	EProxiesFiltersOrderColumnType        EProxiesFiltersOrderColumn = "Type"
)

// Defines values for EProxyType.
const (
	ViProxy EProxyType = "ViProxy"
)

// Defines values for ERepositoryExtentStatusType.
const (
	Evacuate    ERepositoryExtentStatusType = "Evacuate"
	Maintenance ERepositoryExtentStatusType = "Maintenance"
	Normal      ERepositoryExtentStatusType = "Normal"
	Pending     ERepositoryExtentStatusType = "Pending"
	Sealed      ERepositoryExtentStatusType = "Sealed"
)

// Defines values for ERepositoryFiltersOrderColumn.
const (
	ERepositoryFiltersOrderColumnDescription ERepositoryFiltersOrderColumn = "Description"
	ERepositoryFiltersOrderColumnHost        ERepositoryFiltersOrderColumn = "Host"
	ERepositoryFiltersOrderColumnName        ERepositoryFiltersOrderColumn = "Name"
	ERepositoryFiltersOrderColumnPath        ERepositoryFiltersOrderColumn = "Path"
	ERepositoryFiltersOrderColumnType        ERepositoryFiltersOrderColumn = "Type"
)

// Defines values for ERepositoryStatesFiltersOrderColumn.
const (
	ERepositoryStatesFiltersOrderColumnCapacityGB  ERepositoryStatesFiltersOrderColumn = "CapacityGB"
	ERepositoryStatesFiltersOrderColumnDescription ERepositoryStatesFiltersOrderColumn = "Description"
	ERepositoryStatesFiltersOrderColumnFreeGB      ERepositoryStatesFiltersOrderColumn = "FreeGB"
	ERepositoryStatesFiltersOrderColumnHost        ERepositoryStatesFiltersOrderColumn = "Host"
	ERepositoryStatesFiltersOrderColumnName        ERepositoryStatesFiltersOrderColumn = "Name"
	ERepositoryStatesFiltersOrderColumnPath        ERepositoryStatesFiltersOrderColumn = "Path"
	ERepositoryStatesFiltersOrderColumnType        ERepositoryStatesFiltersOrderColumn = "Type"
	ERepositoryStatesFiltersOrderColumnUsedSpaceGB ERepositoryStatesFiltersOrderColumn = "UsedSpaceGB"
)

// Defines values for ERepositoryType.
const (
	AmazonS3        ERepositoryType = "AmazonS3"
	AmazonS3Glacier ERepositoryType = "AmazonS3Glacier"
	AzureArchive    ERepositoryType = "AzureArchive"
	AzureBlob       ERepositoryType = "AzureBlob"
	GoogleCloud     ERepositoryType = "GoogleCloud"
	IBMCloud        ERepositoryType = "IBMCloud"
	LinuxLocal      ERepositoryType = "LinuxLocal"
	Nfs             ERepositoryType = "Nfs"
	S3Compatible    ERepositoryType = "S3Compatible"
	Smb             ERepositoryType = "Smb"
	WinLocal        ERepositoryType = "WinLocal"
)

// Defines values for ERetainLogBackupsType.
const (
	KeepOnlyDays       ERetainLogBackupsType = "KeepOnlyDays"
	UntilBackupDeleted ERetainLogBackupsType = "untilBackupDeleted"
)

// Defines values for ERetentionPolicyType.
const (
	ERetentionPolicyTypeDays          ERetentionPolicyType = "Days"
	ERetentionPolicyTypeRestorePoints ERetentionPolicyType = "RestorePoints"
)

// Defines values for ESQLLogsProcessing.
const (
	ESQLLogsProcessingBackup        ESQLLogsProcessing = "backup"
	ESQLLogsProcessingNeverTruncate ESQLLogsProcessing = "neverTruncate"
	ESQLLogsProcessingPreserve      ESQLLogsProcessing = "preserve"
	ESQLLogsProcessingTruncate      ESQLLogsProcessing = "truncate"
)

// Defines values for EScaleOutRepositoryFiltersOrderColumn.
const (
	EScaleOutRepositoryFiltersOrderColumnDescription EScaleOutRepositoryFiltersOrderColumn = "Description"
	EScaleOutRepositoryFiltersOrderColumnHost        EScaleOutRepositoryFiltersOrderColumn = "Host"
	EScaleOutRepositoryFiltersOrderColumnName        EScaleOutRepositoryFiltersOrderColumn = "Name"
	EScaleOutRepositoryFiltersOrderColumnPath        EScaleOutRepositoryFiltersOrderColumn = "Path"
	EScaleOutRepositoryFiltersOrderColumnType        EScaleOutRepositoryFiltersOrderColumn = "Type"
)

// Defines values for EScriptPeriodicityType.
const (
	BackupSessions EScriptPeriodicityType = "BackupSessions"
	Days           EScriptPeriodicityType = "Days"
)

// Defines values for ESennightOfMonth.
const (
	ESennightOfMonthFifth  ESennightOfMonth = "Fifth"
	ESennightOfMonthFirst  ESennightOfMonth = "First"
	ESennightOfMonthFourth ESennightOfMonth = "Fourth"
	ESennightOfMonthLast   ESennightOfMonth = "Last"
	ESennightOfMonthSecond ESennightOfMonth = "Second"
	ESennightOfMonthThird  ESennightOfMonth = "Third"
)

// Defines values for EServicesFiltersOrderColumn.
const (
	EServicesFiltersOrderColumnName EServicesFiltersOrderColumn = "Name"
	EServicesFiltersOrderColumnPort EServicesFiltersOrderColumn = "Port"
)

// Defines values for ESessionResult.
const (
	ESessionResultFailed  ESessionResult = "Failed"
	ESessionResultNone    ESessionResult = "None"
	ESessionResultSuccess ESessionResult = "Success"
	ESessionResultWarning ESessionResult = "Warning"
)

// Defines values for ESessionState.
const (
	Idle              ESessionState = "Idle"
	Pausing           ESessionState = "Pausing"
	Postprocessing    ESessionState = "Postprocessing"
	Resuming          ESessionState = "Resuming"
	Starting          ESessionState = "Starting"
	Stopped           ESessionState = "Stopped"
	Stopping          ESessionState = "Stopping"
	WaitingRepository ESessionState = "WaitingRepository"
	WaitingSlot       ESessionState = "WaitingSlot"
	WaitingTape       ESessionState = "WaitingTape"
	Working           ESessionState = "Working"
)

// Defines values for ESessionType.
const (
	Automation                 ESessionType = "Automation"
	ConfigurationBackup        ESessionType = "ConfigurationBackup"
	Infrastructure             ESessionType = "Infrastructure"
	InfrastructureItemDeletion ESessionType = "InfrastructureItemDeletion"
	Job                        ESessionType = "Job"
	RepositoryEvacuate         ESessionType = "RepositoryEvacuate"
	RepositoryMaintenance      ESessionType = "RepositoryMaintenance"
)

// Defines values for ESessionsFiltersOrderColumn.
const (
	ESessionsFiltersOrderColumnCreationTime ESessionsFiltersOrderColumn = "CreationTime"
	ESessionsFiltersOrderColumnEndTime      ESessionsFiltersOrderColumn = "EndTime"
	ESessionsFiltersOrderColumnName         ESessionsFiltersOrderColumn = "Name"
	ESessionsFiltersOrderColumnResult       ESessionsFiltersOrderColumn = "Result"
	ESessionsFiltersOrderColumnSessionType  ESessionsFiltersOrderColumn = "SessionType"
	ESessionsFiltersOrderColumnState        ESessionsFiltersOrderColumn = "State"
)

// Defines values for ESpeedUnit.
const (
	KbytePerSec ESpeedUnit = "KbytePerSec"
	MbitPerSpec ESpeedUnit = "MbitPerSpec"
	MbytePerSec ESpeedUnit = "MbytePerSec"
)

// Defines values for EStorageOptimization.
const (
	Auto             EStorageOptimization = "Auto"
	LANTarget        EStorageOptimization = "LANTarget"
	LocalTarget      EStorageOptimization = "LocalTarget"
	LocalTargetLarge EStorageOptimization = "LocalTargetLarge"
	WANTarget        EStorageOptimization = "WANTarget"
)

// Defines values for ETaskLogRecordStatus.
const (
	Failed    ETaskLogRecordStatus = "Failed"
	None      ETaskLogRecordStatus = "None"
	Succeeded ETaskLogRecordStatus = "Succeeded"
	Warning   ETaskLogRecordStatus = "Warning"
)

// Defines values for ETransactionLogsSettings.
const (
	CopyOnly ETransactionLogsSettings = "copyOnly"
	Process  ETransactionLogsSettings = "process"
)

// Defines values for EViHostType.
const (
	ESX  EViHostType = "ESX"
	ESXi EViHostType = "ESXi"
	VC   EViHostType = "VC"
)

// Defines values for EViRootFiltersOrderColumn.
const (
	EViRootFiltersOrderColumnName EViRootFiltersOrderColumn = "Name"
	EViRootFiltersOrderColumnType EViRootFiltersOrderColumn = "Type"
)

// Defines values for EVmwareDisksTypeToProcess.
const (
	AllDisks      EVmwareDisksTypeToProcess = "AllDisks"
	SelectedDisks EVmwareDisksTypeToProcess = "SelectedDisks"
	SystemOnly    EVmwareDisksTypeToProcess = "SystemOnly"
)

// Defines values for EVmwareInventoryType.
const (
	EVmwareInventoryTypeCategory         EVmwareInventoryType = "Category"
	EVmwareInventoryTypeCluster          EVmwareInventoryType = "Cluster"
	EVmwareInventoryTypeComputeResource  EVmwareInventoryType = "ComputeResource"
	EVmwareInventoryTypeDatacenter       EVmwareInventoryType = "Datacenter"
	EVmwareInventoryTypeDatastore        EVmwareInventoryType = "Datastore"
	EVmwareInventoryTypeDatastoreCluster EVmwareInventoryType = "DatastoreCluster"
	EVmwareInventoryTypeFolder           EVmwareInventoryType = "Folder"
	EVmwareInventoryTypeHost             EVmwareInventoryType = "Host"
	EVmwareInventoryTypeMultitag         EVmwareInventoryType = "Multitag"
	EVmwareInventoryTypeResourcePool     EVmwareInventoryType = "ResourcePool"
	EVmwareInventoryTypeStoragePolicy    EVmwareInventoryType = "StoragePolicy"
	EVmwareInventoryTypeTag              EVmwareInventoryType = "Tag"
	EVmwareInventoryTypeTemplate         EVmwareInventoryType = "Template"
	EVmwareInventoryTypeUnknown          EVmwareInventoryType = "Unknown"
	EVmwareInventoryTypeVCenterServer    EVmwareInventoryType = "vCenterServer"
	EVmwareInventoryTypeVirtualApp       EVmwareInventoryType = "VirtualApp"
	EVmwareInventoryTypeVirtualMachine   EVmwareInventoryType = "VirtualMachine"
)

// Defines values for EWindowsHostComponentType.
const (
	EWindowsHostComponentTypeAgentConfigureService          EWindowsHostComponentType = "AgentConfigureService"
	EWindowsHostComponentTypeCdp                            EWindowsHostComponentType = "Cdp"
	EWindowsHostComponentTypeCloudGate                      EWindowsHostComponentType = "CloudGate"
	EWindowsHostComponentTypeCloudServiceInvoker            EWindowsHostComponentType = "CloudServiceInvoker"
	EWindowsHostComponentTypeCloudServiceRemoting           EWindowsHostComponentType = "CloudServiceRemoting"
	EWindowsHostComponentTypeDeployerSvc                    EWindowsHostComponentType = "DeployerSvc"
	EWindowsHostComponentTypeEpAgent                        EWindowsHostComponentType = "EpAgent"
	EWindowsHostComponentTypeEpAgentSharedManagementObjects EWindowsHostComponentType = "EpAgentSharedManagementObjects"
	EWindowsHostComponentTypeEpAgentSqlLocalDB              EWindowsHostComponentType = "EpAgentSqlLocalDB"
	EWindowsHostComponentTypeEpAgentSqlSysClrTypes          EWindowsHostComponentType = "EpAgentSqlSysClrTypes"
	EWindowsHostComponentTypeFileSystemVssIntegration       EWindowsHostComponentType = "FileSystemVssIntegration"
	EWindowsHostComponentTypeGuestControl                   EWindowsHostComponentType = "GuestControl"
	EWindowsHostComponentTypeHvIntegration                  EWindowsHostComponentType = "HvIntegration"
	EWindowsHostComponentTypeNfs                            EWindowsHostComponentType = "Nfs"
	EWindowsHostComponentTypeRestoreProxy                   EWindowsHostComponentType = "RestoreProxy"
	EWindowsHostComponentTypeTape                           EWindowsHostComponentType = "Tape"
	EWindowsHostComponentTypeTransport                      EWindowsHostComponentType = "Transport"
	EWindowsHostComponentTypeValRedist                      EWindowsHostComponentType = "ValRedist"
	EWindowsHostComponentTypeVamRedist                      EWindowsHostComponentType = "VamRedist"
	EWindowsHostComponentTypeVawRedist                      EWindowsHostComponentType = "VawRedist"
	EWindowsHostComponentTypeVssHwSnapshotProvider          EWindowsHostComponentType = "VssHwSnapshotProvider"
	EWindowsHostComponentTypeWanAccelerator                 EWindowsHostComponentType = "WanAccelerator"
)

// Defines values for ErrorErrorCode.
const (
	ErrorErrorCodeAccessDenied       ErrorErrorCode = "AccessDenied"
	ErrorErrorCodeExpiredToken       ErrorErrorCode = "ExpiredToken"
	ErrorErrorCodeInvalidToken       ErrorErrorCode = "InvalidToken"
	ErrorErrorCodeInvalidURI         ErrorErrorCode = "InvalidURI"
	ErrorErrorCodeMethodNotAllowed   ErrorErrorCode = "MethodNotAllowed"
	ErrorErrorCodeNotFound           ErrorErrorCode = "NotFound"
	ErrorErrorCodeNotImplemented     ErrorErrorCode = "NotImplemented"
	ErrorErrorCodeServiceUnavailable ErrorErrorCode = "ServiceUnavailable"
	ErrorErrorCodeUnexpectedContent  ErrorErrorCode = "UnexpectedContent"
	ErrorErrorCodeUnknownError       ErrorErrorCode = "UnknownError"
)

// Defines values for EvCentersInventoryFiltersOrderColumn.
const (
	Name     EvCentersInventoryFiltersOrderColumn = "Name"
	ObjectId EvCentersInventoryFiltersOrderColumn = "ObjectId"
	Type     EvCentersInventoryFiltersOrderColumn = "Type"
)

// ActiveFullSettingsModel Active full backup settings.
type ActiveFullSettingsModel struct {
	// IsEnabled If *true*, active full backups are enabled.
	IsEnabled bool `json:"isEnabled"`

	// Monthly Monthly schedule settings.
	Monthly *AdvancedStorageScheduleMonthlyModel `json:"monthly,omitempty"`

	// Weekly Weekly schedule settings.
	Weekly *AdvancedStorageScheduleWeeklyModel `json:"weekly,omitempty"`
}

// AdvancedSmtpOptionsModel advanced global email notification settings.
type AdvancedSmtpOptionsModel struct {
	// SSLEnabled If *true*, secure connection for email operations is used.
	SSLEnabled bool `json:"SSLEnabled"`

	// AuthRequred If *true*, the `credentialsId` credentials are used to connect to the SMTP server.
	AuthRequred bool `json:"authRequred"`

	// CredentialsId ID of the credentials used to connect to the server.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// Port Port number for the SMTP server.
	Port int32 `json:"port"`

	// TimeoutMs Connection timeout for the SMTP server.
	TimeoutMs int32 `json:"timeoutMs"`
}

// AdvancedStorageScheduleMonthlyModel Monthly schedule settings.
type AdvancedStorageScheduleMonthlyModel struct {
	DayNumberInMonth *EDayNumberInMonth `json:"dayNumberInMonth,omitempty"`

	// DayOfMonths Day of the month when the operation is performed.
	DayOfMonths *int        `json:"dayOfMonths,omitempty"`
	DayOfWeek   *EDayOfWeek `json:"dayOfWeek,omitempty"`

	// IsEnabled If *true*, the monthly schedule is enabled.
	IsEnabled bool `json:"isEnabled"`

	// Months Months when the operation is performed.
	Months *[]EMonth `json:"months,omitempty"`
}

// AdvancedStorageScheduleWeeklyModel Weekly schedule settings.
type AdvancedStorageScheduleWeeklyModel struct {
	// Days Days of the week when the operation is performed.
	Days *[]EDayOfWeek `json:"days,omitempty"`

	// IsEnabled If *true*, the weekly schedule is enabled.
	IsEnabled bool `json:"isEnabled"`
}

// ArchiveTierAdvancedSettingsModel Advanced settings of the archive tier.
type ArchiveTierAdvancedSettingsModel struct {
	// ArchiveDeduplicationEnabled If *true*, each backup is stored as a delta to the previous one.
	ArchiveDeduplicationEnabled *bool `json:"archiveDeduplicationEnabled,omitempty"`

	// CostOptimizedArchiveEnabled If *true*, backups are archived if the remaining retention time is above minimum storage period for the repository.
	CostOptimizedArchiveEnabled *bool `json:"costOptimizedArchiveEnabled,omitempty"`
}

// ArchiveTierModel Archive tier.
type ArchiveTierModel struct {
	// AdvancedSettings Advanced settings of the archive tier.
	AdvancedSettings *ArchiveTierAdvancedSettingsModel `json:"advancedSettings,omitempty"`

	// ArchivePeriodDays Number of days after which backup chains on the capacity extent are moved to the archive extent. Specify *0* to offload inactive backup chains on the same day they are created.
	ArchivePeriodDays *int `json:"archivePeriodDays,omitempty"`

	// ExtentId ID of an object storage repository added as an archive extent.
	ExtentId *openapi_types.UUID `json:"extentId,omitempty"`

	// IsEnabled If *true*, the archive tier is enabled.
	IsEnabled bool `json:"isEnabled"`
}

// AuthorizationCodeModel defines model for AuthorizationCodeModel.
type AuthorizationCodeModel struct {
	// Code String that is used to obtain an access token. Lifetime of the authorization code is 60 seconds.
	Code string `json:"code"`
}

// BackupApplicationAwareProcessingImportModel Application-aware processing settings.
type BackupApplicationAwareProcessingImportModel struct {
	// AppSettings Array of VMware objects and their application settings.
	AppSettings *[]BackupApplicationSettingsImportModel `json:"appSettings,omitempty"`

	// IsEnabled If *true*, application-aware processing is enabled.
	IsEnabled bool `json:"isEnabled"`
}

// BackupApplicationSettingsImportModel defines model for BackupApplicationSettingsImportModel.
type BackupApplicationSettingsImportModel struct {
	// Exclusions VM guest OS file exclusion.
	Exclusions *BackupFSExclusionsModel `json:"exclusions,omitempty"`

	// Oracle Oracle archived log settings.
	Oracle *BackupOracleSettingsImportModel `json:"oracle,omitempty"`

	// Scripts Pre-freeze and post-thaw scripts.
	Scripts *BackupScriptSettingsModel `json:"scripts,omitempty"`

	// Sql Microsoft SQL Server transaction log settings.
	Sql *BackupSQLSettingsImportModel `json:"sql,omitempty"`

	// TransactionLogs Transaction logs settings that define whether copy-only backups must be created or transaction logs for Microsoft Exchange, Microsoft SQL and Oracle VMs must be processed.</br>
	// If transaction log processing is selected, specify the following parameters:</br>
	// <ul>
	// <li>[For Microsoft SQL Server VMs] Microsoft SQL Server transaction log settings</li>
	// <li>[For Oracle VMs] Oracle archived log settings</li>
	// </ul>
	TransactionLogs *ETransactionLogsSettings `json:"transactionLogs,omitempty"`

	// UsePersistentGuestAgent If *true*, persistent guest agent is used.
	UsePersistentGuestAgent *bool `json:"usePersistentGuestAgent,omitempty"`

	// VmObject VMware object.
	VmObject VmwareObjectModel `json:"vmObject"`

	// Vss Behavior scenario for application-aware processing.
	Vss EApplicationSettingsVSS `json:"vss"`
}

// BackupFSExclusionsModel VM guest OS file exclusion.
type BackupFSExclusionsModel struct {
	// ExclusionPolicy Exclusion policy.
	ExclusionPolicy EBackupExclusionPolicy `json:"exclusionPolicy"`

	// ItemsList Array of files and folders. Full paths to files and folders, environmental variables and file masks with the asterisk (*) and question mark (?) characters can be used.
	ItemsList *[]string `json:"itemsList,omitempty"`
}

// BackupHealthCheckSettingsModels Health check settings for the for the latest restore point in the backup chain.
type BackupHealthCheckSettingsModels struct {
	// IsEnabled If *true*, the health check is enabled.
	IsEnabled bool `json:"isEnabled"`

	// Monthly Monthly schedule settings.
	Monthly *AdvancedStorageScheduleMonthlyModel `json:"monthly,omitempty"`

	// Weekly Weekly schedule settings.
	Weekly *AdvancedStorageScheduleWeeklyModel `json:"weekly,omitempty"`
}

// BackupIndexingSettingsModel defines model for BackupIndexingSettingsModel.
type BackupIndexingSettingsModel struct {
	// LinuxIndexing Guest OS indexing options for the VM.
	LinuxIndexing *BackupObjectIndexingModel `json:"LinuxIndexing,omitempty"`

	// WindowsIndexing Guest OS indexing options for the VM.
	WindowsIndexing *BackupObjectIndexingModel `json:"WindowsIndexing,omitempty"`

	// VmObject VMware object.
	VmObject VmwareObjectModel `json:"vmObject"`
}

// BackupJobAdvancedSettingsModel Advanced settings of the backup job.
type BackupJobAdvancedSettingsModel struct {
	// ActiveFulls Active full backup settings.
	ActiveFulls *ActiveFullSettingsModel `json:"activeFulls,omitempty"`

	// BackupHealth Health check settings for the for the latest restore point in the backup chain.
	BackupHealth *BackupHealthCheckSettingsModels `json:"backupHealth,omitempty"`

	// BackupModeType Type of the backup method used to create a restore point.
	BackupModeType EBackupModeType `json:"backupModeType"`

	// FullBackupMaintenance Maintenance settings for full backup files.
	FullBackupMaintenance *FullBackupMaintenanceModel `json:"fullBackupMaintenance,omitempty"`

	// Notifications Notification settings for the backup job.
	Notifications *NotificationSettingsModel `json:"notifications,omitempty"`

	// Scripts Script settings.
	Scripts *JobScriptsSettingsModel `json:"scripts,omitempty"`

	// StorageData Storage settings.
	StorageData *BackupStorageSettingModel `json:"storageData,omitempty"`

	// StorageIntegration Primary storage integration settings for the backup job.
	StorageIntegration *PrimaryStorageIntegrationSettingsModel `json:"storageIntegration,omitempty"`

	// SynthenticFulls Synthetic full backup settings.
	SynthenticFulls *SyntheticFullSettingsModel `json:"synthenticFulls,omitempty"`

	// VSphere VMware vSphere settings for the backup job.
	VSphere *BackupJobAdvancedSettingsVSphereModel `json:"vSphere,omitempty"`
}

// BackupJobAdvancedSettingsVSphereModel VMware vSphere settings for the backup job.
type BackupJobAdvancedSettingsVSphereModel struct {
	// ChangedBlockTracking CBT settings for the backup job.
	ChangedBlockTracking *VSphereChangedBlockTrackingSettingsModel `json:"changedBlockTracking,omitempty"`

	// EnableVMWareToolsQuiescence If *true*, VMware Tools quiescence is enabled for freezing the VM file system and application data.
	EnableVMWareToolsQuiescence *bool `json:"enableVMWareToolsQuiescence,omitempty"`
}

// BackupJobExclusionsSpec defines model for BackupJobExclusionsSpec.
type BackupJobExclusionsSpec struct {
	Disks *[]VmwareObjectDiskModel `json:"disks,omitempty"`

	// Templates Array of VM templates excluded from the backup.
	Templates *BackupJobExclusionsTemplates `json:"templates,omitempty"`
	Vms       *[]VmwareObjectModel          `json:"vms,omitempty"`
}

// BackupJobExclusionsTemplates Array of VM templates excluded from the backup.
type BackupJobExclusionsTemplates struct {
	// ExcludeFromIncremental If *true*, the template is excluded from the incremental backup.
	ExcludeFromIncremental *bool `json:"excludeFromIncremental,omitempty"`

	// IsEnabled If *true*, the template is included into the backup.
	IsEnabled *bool `json:"isEnabled,omitempty"`
}

// BackupJobGuestProcessingImportModel Guest processing settings.
type BackupJobGuestProcessingImportModel struct {
	// ApplicationAwareProcessing Application-aware processing settings.
	ApplicationAwareProcessing BackupApplicationAwareProcessingImportModel `json:"applicationAwareProcessing"`

	// GuestCredentials VM custom credentials.
	GuestCredentials *GuestOsCredentialsImportModel `json:"guestCredentials,omitempty"`

	// GuestFileSystemIndexing VM guest OS file indexing.
	GuestFileSystemIndexing GuestFileSystemIndexingModel `json:"guestFileSystemIndexing"`

	// GuestInteractionProxies Guest interaction proxy used to deploy the runtime process on the VM guest OS.
	GuestInteractionProxies *GuestInteractionProxiesSettingsImportModel `json:"guestInteractionProxies,omitempty"`
}

// BackupJobImportProxiesModel Backup proxies.
type BackupJobImportProxiesModel struct {
	// AutomaticSelection If *true*, backup proxies are detected and assigned automatically.
	AutomaticSelection bool `json:"automaticSelection"`

	// Proxies Array of backup proxies.
	Proxies *[]BackupProxyImportModel `json:"proxies,omitempty"`
}

// BackupJobRetentionPolicySettingsModel Retention policy settings.
type BackupJobRetentionPolicySettingsModel struct {
	// Quantity Number of restore points or days to keep.
	Quantity int `json:"quantity"`

	// Type Type of the retention policy.
	Type ERetentionPolicyType `json:"type"`
}

// BackupJobStorageImportModel Backup storage settings.
type BackupJobStorageImportModel struct {
	// AdvancedSettings Advanced settings of the backup job.
	AdvancedSettings *BackupJobAdvancedSettingsModel `json:"advancedSettings,omitempty"`

	// BackupProxies Backup proxies.
	BackupProxies BackupJobImportProxiesModel `json:"backupProxies"`

	// BackupRepository Backup repository.
	BackupRepository BackupRepositoryImportModel `json:"backupRepository"`

	// GfsPolicy GFS retention policy settings.
	GfsPolicy *GFSPolicySettingsModel `json:"gfsPolicy,omitempty"`

	// RetentionPolicy Retention policy settings.
	RetentionPolicy BackupJobRetentionPolicySettingsModel `json:"retentionPolicy"`
}

// BackupJobVirtualMachinesSpec defines model for BackupJobVirtualMachinesSpec.
type BackupJobVirtualMachinesSpec struct {
	Excludes *BackupJobExclusionsSpec `json:"excludes,omitempty"`
	Includes []VmwareObjectModel      `json:"includes"`
}

// BackupLinuxScriptModel Paths to pre-freeze and post-thaw scripts for Linux VMs.
type BackupLinuxScriptModel struct {
	// PostThawScript Path to a post-thaw script.
	PostThawScript *string `json:"postThawScript,omitempty"`

	// PreFreezeScript Path to a pre-freeze script.
	PreFreezeScript *string `json:"preFreezeScript,omitempty"`
}

// BackupLogShippingServersImportModel Log shipping server used to transport logs.
type BackupLogShippingServersImportModel struct {
	// AutoSelection If *true*, Veeam Backup & Replication chooses an optimal log shipping server automatically.
	AutoSelection bool `json:"autoSelection"`

	// ShippingServerNames Array of servers that are explicitly selected for log shipping.
	ShippingServerNames *[]string `json:"shippingServerNames,omitempty"`
}

// BackupModel defines model for BackupModel.
type BackupModel struct {
	// CreationTime Date and time when the backup was created.
	CreationTime time.Time `json:"creationTime"`

	// Id ID of the backup.
	Id openapi_types.UUID `json:"id"`

	// JobId ID of the job that created the backup.
	JobId *openapi_types.UUID `json:"jobId,omitempty"`

	// Name Name of the job that created the backup.
	Name string `json:"name"`

	// PlatformId ID of the platform of the backup resource.
	PlatformId   openapi_types.UUID `json:"platformId"`
	PlatformName EPlatformType      `json:"platformName"`

	// PolicyTag Tag that identifies retention policy.
	PolicyTag *string `json:"policyTag,omitempty"`

	// RepositoryId ID of the backup repository where the backup is stored.
	RepositoryId openapi_types.UUID `json:"repositoryId"`
}

// BackupObjectIndexingModel Guest OS indexing options for the VM.
type BackupObjectIndexingModel struct {
	// GuestFSIndexingMode Indexing mode.
	GuestFSIndexingMode EGuestFSIndexingMode `json:"guestFSIndexingMode"`

	// IndexingList Array of folders. Environmental variables and full paths to folders can be used.
	IndexingList *[]string `json:"indexingList,omitempty"`
}

// BackupObjectModel defines model for BackupObjectModel.
type BackupObjectModel struct {
	// Id ID of the object.
	Id openapi_types.UUID `json:"id"`

	// Name Name of the object.
	Name *string `json:"name,omitempty"`

	// PlatformId Id of the platform where the object was created.
	PlatformId   *openapi_types.UUID `json:"platformId,omitempty"`
	PlatformName EPlatformType       `json:"platformName"`

	// RestorePointsCount Number of restore points.
	RestorePointsCount *int `json:"restorePointsCount,omitempty"`

	// Type Type of the object.
	Type *string `json:"type,omitempty"`
}

// BackupObjectsResult defines model for BackupObjectsResult.
type BackupObjectsResult struct {
	// Data Array of backup objects.
	Data []BackupObjectModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// BackupOracleSettingsImportModel Oracle archived log settings.
type BackupOracleSettingsImportModel struct {
	// ArchiveLogs Type of archived logs processing.
	ArchiveLogs EBackupOracleLogsSettings `json:"archiveLogs"`

	// BackupLogs If *true*, archived logs are backed up.
	BackupLogs *bool `json:"backupLogs,omitempty"`

	// BackupMinsCount Frequency of archived log backup, in minutes.
	BackupMinsCount *int                    `json:"backupMinsCount,omitempty"`
	Credentials     *CredentialsImportModel `json:"credentials,omitempty"`

	// DeleteGBsCount Maximum size for archived logs in GB. This parameter should be specified if the `EBackupOracleLogsSettings` value is *deleteExpiredGBs*.
	DeleteGBsCount *int `json:"deleteGBsCount,omitempty"`

	// DeleteHoursCount Time period in hours to keep archived logs. This parameter should be specified if the `EBackupOracleLogsSettings` value is *deleteExpiredHours*.
	DeleteHoursCount *int `json:"deleteHoursCount,omitempty"`

	// KeepDaysCount Number of days to keep archived logs.
	KeepDaysCount *int `json:"keepDaysCount,omitempty"`

	// LogShippingServers Log shipping server used to transport logs.
	LogShippingServers *BackupLogShippingServersImportModel `json:"logShippingServers,omitempty"`

	// RetainLogBackups Retention policy for the logs stored in the backup repository.
	RetainLogBackups *ERetainLogBackupsType `json:"retainLogBackups,omitempty"`

	// UseGuestCredentials If *true*, Veeam Backup & Replication uses credentials specified in the guest processing settings.
	UseGuestCredentials bool `json:"useGuestCredentials"`
}

// BackupPlacementSettingsModel Settings of the performance placement policy.
type BackupPlacementSettingsModel struct {
	// AllowedBackups Type of backup files that can be stored on the extent.
	AllowedBackups EAllowedBackupsType `json:"allowedBackups"`

	// ExtentName Name of a performance extent.
	ExtentName string `json:"extentName"`
}

// BackupProxyImportModel defines model for BackupProxyImportModel.
type BackupProxyImportModel struct {
	// Name Name of the backup proxy.
	Name string `json:"name"`

	// Tag Tag assigned to the backup proxy.
	Tag  *string                `json:"tag,omitempty"`
	Type EBackupProxyImportType `json:"type"`
}

// BackupRepositoryImportModel Backup repository.
type BackupRepositoryImportModel struct {
	// Name Name of the backup repository.
	Name string `json:"name"`

	// Tag Tag assigned to the backup repository.
	Tag *string `json:"tag,omitempty"`
}

// BackupSQLSettingsImportModel Microsoft SQL Server transaction log settings.
type BackupSQLSettingsImportModel struct {
	// BackupMinsCount Frequency of transaction log backup, in minutes.
	BackupMinsCount *int `json:"backupMinsCount,omitempty"`

	// KeepDaysCount Number of days to keep transaction logs in the backup repository.
	KeepDaysCount *int `json:"keepDaysCount,omitempty"`

	// LogShippingServers Log shipping server used to transport logs.
	LogShippingServers *BackupLogShippingServersImportModel `json:"logShippingServers,omitempty"`

	// LogsProcessing Type of transaction logs processing.
	LogsProcessing ESQLLogsProcessing `json:"logsProcessing"`

	// RetainLogBackups Retention policy for the logs stored in the backup repository.
	RetainLogBackups *ERetainLogBackupsType `json:"retainLogBackups,omitempty"`
}

// BackupScheduleModel Job scheduling options.
type BackupScheduleModel struct {
	// AfterThisJob Job chaining options.
	AfterThisJob *ScheduleAfterThisJobModel `json:"afterThisJob,omitempty"`
	BackupWindow *ScheduleBackupWindowModel `json:"backupWindow,omitempty"`
	Continuously *ScheduleBackupWindowModel `json:"continuously,omitempty"`

	// Daily Daily scheduling options.
	Daily *ScheduleDailyModel `json:"daily,omitempty"`

	// Monthly Monthly scheduling options.
	Monthly *ScheduleMonthlyModel `json:"monthly,omitempty"`

	// Periodically Periodic scheduling options.
	Periodically *SchedulePeriodicallyModel `json:"periodically,omitempty"`

	// Retry Retry options.
	Retry *ScheduleRetryModel `json:"retry,omitempty"`

	// RunAutomatically If *true*, job scheduling is enabled.
	RunAutomatically bool `json:"runAutomatically"`
}

// BackupScriptSettingsModel Pre-freeze and post-thaw scripts.
type BackupScriptSettingsModel struct {
	// LinuxScripts Paths to pre-freeze and post-thaw scripts for Linux VMs.
	LinuxScripts *BackupLinuxScriptModel `json:"linuxScripts,omitempty"`

	// ScriptProcessingMode Scenario for scripts execution.
	ScriptProcessingMode EBackupScriptProcessingMode `json:"scriptProcessingMode"`

	// WindowsScripts Paths to pre-freeze and post-thaw scripts for Microsoft Windows VMs.
	WindowsScripts *BackupWindowsScriptModel `json:"windowsScripts,omitempty"`
}

// BackupStorageSettingModel Storage settings.
type BackupStorageSettingModel struct {
	// CompressionLevel Compression level.
	CompressionLevel *ECompressionLevel `json:"compressionLevel,omitempty"`

	// EnableInlineDataDedup If *true*, Veeam Backup & Replication deduplicates VM data before storing it in the backup repository.
	EnableInlineDataDedup *bool `json:"enableInlineDataDedup,omitempty"`

	// Encryption Encription of backup files.
	Encryption *BackupStorageSettingsEncryptionModel `json:"encryption,omitempty"`

	// ExcludeDeletedFileBlocks If *true*, Veeam Backup & Replication does not copy deleted file blocks.
	ExcludeDeletedFileBlocks *bool `json:"excludeDeletedFileBlocks,omitempty"`

	// ExcludeSwapFileBlocks If *true*, Veeam Backup & Replication excludes swap file blocks from processing.
	ExcludeSwapFileBlocks *bool `json:"excludeSwapFileBlocks,omitempty"`

	// StorageOptimization Storage optimization that depends on the target type.
	StorageOptimization *EStorageOptimization `json:"storageOptimization,omitempty"`
}

// BackupStorageSettingsEncryptionModel Encription of backup files.
type BackupStorageSettingsEncryptionModel struct {
	// EncryptionPasswordIdOrNull ID of the password used for encryption. The value is *null* for exported objects.
	EncryptionPasswordIdOrNull *openapi_types.UUID `json:"encryptionPasswordIdOrNull,omitempty"`

	// EncryptionPasswordTag Tag used to identify the password.
	EncryptionPasswordTag *string `json:"encryptionPasswordTag,omitempty"`

	// IsEnabled If *true*, the content of backup files is encrypted.
	IsEnabled bool `json:"isEnabled"`
}

// BackupWindowDayHoursModel Hourly scheme for a day.
type BackupWindowDayHoursModel struct {
	Day EDayOfWeek `json:"day"`

	// Hours String of hours in the following format:
	// *1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1*
	// where *1* means enabled, *0* means disabled.
	Hours string `json:"hours"`
}

// BackupWindowSettingModel Time scheme.
type BackupWindowSettingModel struct {
	// Days Array of per-day schemes.
	Days []BackupWindowDayHoursModel `json:"days"`
}

// BackupWindowsScriptModel Paths to pre-freeze and post-thaw scripts for Microsoft Windows VMs.
type BackupWindowsScriptModel struct {
	// PostThawScript Path to a post-thaw script.
	PostThawScript *string `json:"postThawScript,omitempty"`

	// PreFreezeScript Path to a pre-freeze script.
	PreFreezeScript *string `json:"preFreezeScript,omitempty"`
}

// BackupsResult defines model for BackupsResult.
type BackupsResult struct {
	// Data Array of backups.
	Data []BackupModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// CapacityTierModel Capacity tier.
type CapacityTierModel struct {
	// CopyPolicyEnabled If *true*, Veeam Backup & Replication copies backups from the performance extents to the capacity extent as soon as the backups are created.
	CopyPolicyEnabled *bool `json:"copyPolicyEnabled,omitempty"`

	// Enabled If *true*, the capacity tier is enabled.
	Enabled *bool `json:"enabled,omitempty"`

	// Encryption Encription of backup files.
	Encryption *BackupStorageSettingsEncryptionModel `json:"encryption,omitempty"`

	// ExtentId ID of an object storage repository added as a capacity extent.
	ExtentId *openapi_types.UUID `json:"extentId,omitempty"`

	// MovePolicyEnabled If *true*, Veeam Backup & Replication moves backup files that belong to inactive backup chains from the performance extents to the capacity extent.
	MovePolicyEnabled *bool `json:"movePolicyEnabled,omitempty"`

	// OffloadWindow Time scheme.
	OffloadWindow *BackupWindowSettingModel `json:"offloadWindow,omitempty"`

	// OperationalRestorePeriodDays Number of days after which inactive backup chains on the performance extents are moved to the capacity extent. Specify *0* to offload inactive backup chains on the same day they are created.
	OperationalRestorePeriodDays *int `json:"operationalRestorePeriodDays,omitempty"`

	// OverridePolicy Override policy.
	OverridePolicy *CapacityTierOverridePolicyModel `json:"overridePolicy,omitempty"`
}

// CapacityTierOverridePolicyModel Override policy.
type CapacityTierOverridePolicyModel struct {
	// IsEnabled If *true*, Veeam Backup & Replication moves oldest backup files sooner if scale-out backup repository is reaching the threshold.
	IsEnabled *bool `json:"isEnabled,omitempty"`

	// OverrideSpaceThresholdPercents Space threshold of the scale-out backup repository, in percent.
	OverrideSpaceThresholdPercents *int `json:"overrideSpaceThresholdPercents,omitempty"`
}

// CertificateModel defines model for CertificateModel.
type CertificateModel struct {
	// IssuedBy Issuer of the certificate.
	IssuedBy string `json:"issuedBy"`

	// IssuedTo Acquirer of the certificate.
	IssuedTo string `json:"issuedTo"`

	// KeyAlgorithm Key algorithm of the certificate.
	KeyAlgorithm string `json:"keyAlgorithm"`

	// KeySize Key size of the certificate.
	KeySize string `json:"keySize"`

	// SerialNumber Serial number of the certificate.
	SerialNumber string `json:"serialNumber"`

	// Subject Subject of the certificate.
	Subject string `json:"subject"`

	// Thumbprint Thumbprint of the certificate.
	Thumbprint string `json:"thumbprint"`

	// ValidBy Expiration date and time of the certificate.
	ValidBy time.Time `json:"validBy"`

	// ValidFrom Date and time the certificate is valid from.
	ValidFrom time.Time `json:"validFrom"`
}

// ConfigBackupEncryptionModel Encryption settings.
type ConfigBackupEncryptionModel struct {
	// IsEnabled If *true*, backup encryption is enabled.
	IsEnabled bool `json:"isEnabled"`

	// PasswordId ID of the password used for encryption.
	PasswordId openapi_types.UUID `json:"passwordId"`
}

// ConfigBackupLastSuccessfulModel Last successful backup.
type ConfigBackupLastSuccessfulModel struct {
	// LastSuccessfulTime Date and time when the last successful backup was created.
	LastSuccessfulTime *time.Time `json:"lastSuccessfulTime,omitempty"`

	// SessionId ID of the job session.
	SessionId *openapi_types.UUID `json:"sessionId,omitempty"`
}

// ConfigBackupModel defines model for ConfigBackupModel.
type ConfigBackupModel struct {
	// BackupRepositoryId ID of the backup repository on which the configuration backup is stored.
	BackupRepositoryId openapi_types.UUID `json:"backupRepositoryId"`

	// Encryption Encryption settings.
	Encryption ConfigBackupEncryptionModel `json:"encryption"`

	// IsEnabled If *true*, configuration backup is enabled.
	IsEnabled bool `json:"isEnabled"`

	// LastSuccessfulBackup Last successful backup.
	LastSuccessfulBackup ConfigBackupLastSuccessfulModel `json:"lastSuccessfulBackup"`

	// Notifications Notification settings.
	Notifications ConfigBackupNotificationsModel `json:"notifications"`

	// RestorePointsToKeep Number of restore points to keep in the backup repository.
	RestorePointsToKeep int32 `json:"restorePointsToKeep"`

	// Schedule Scheduling settings.
	Schedule ConfigBackupScheduleModel `json:"schedule"`
}

// ConfigBackupNotificationsModel Notification settings.
type ConfigBackupNotificationsModel struct {
	// SMTPSettings Email notification settings.
	SMTPSettings *ConfigBackupSMTPSettigsModel `json:"SMTPSettings,omitempty"`

	// SNMPEnabled If *true*, SNMP traps are enabled for this job.
	SNMPEnabled bool `json:"SNMPEnabled"`
}

// ConfigBackupSMTPSettigsModel Email notification settings.
type ConfigBackupSMTPSettigsModel struct {
	// IsEnabled If *true*, email notifications are enabled for this job.
	IsEnabled bool `json:"isEnabled"`

	// NotifyOnError If *true*, email notifications are sent when the job fails.
	NotifyOnError bool `json:"notifyOnError"`

	// NotifyOnSuccess If *true*, email notifications are sent when the job completes successfully.
	NotifyOnSuccess bool `json:"notifyOnSuccess"`

	// NotifyOnWarning If *true*, email notifications are sent when the job completes with a warning.
	NotifyOnWarning bool `json:"notifyOnWarning"`

	// Recipients Array of recipients' email addresses.
	Recipients []string `json:"recipients"`

	// SettingsType Type of notification settings.
	SettingsType EConfigBackupSMTPSettingsType `json:"settingsType"`

	// Subject Notification subject. Use the following variables in the subject: *%JobResult%*, *%JobName%*, *%Time%* (completion time).
	Subject string `json:"subject"`
}

// ConfigBackupScheduleModel Scheduling settings.
type ConfigBackupScheduleModel struct {
	// Daily Daily scheduling options.
	Daily *ScheduleDailyModel `json:"daily,omitempty"`

	// IsEnabled If *true*, backup scheduling is enabled.
	IsEnabled bool `json:"isEnabled"`

	// Monthly Monthly scheduling options.
	Monthly *ScheduleMonthlyModel `json:"monthly,omitempty"`
}

// ConnectionCertificateModel defines model for ConnectionCertificateModel.
type ConnectionCertificateModel struct {
	Certificate *CertificateModel `json:"certificate,omitempty"`

	// Fingerprint SSH key fingerprint used to verify the server identity.
	Fingerprint *string `json:"fingerprint,omitempty"`
}

// CredentialsExportSpec defines model for CredentialsExportSpec.
type CredentialsExportSpec struct {
	// Ids Array of credentials IDs.
	Ids *[]openapi_types.UUID `json:"ids,omitempty"`

	// Names Array of credentials user names. Wildcard characters are supported.
	Names *[]string `json:"names,omitempty"`

	// ShowHiddenCreds If *true*, service credentials are exported.
	ShowHiddenCreds *bool `json:"showHiddenCreds,omitempty"`

	// Types Array of credentials types.
	Types *[]ECredentialsType `json:"types,omitempty"`
}

// CredentialsImportModel defines model for CredentialsImportModel.
type CredentialsImportModel struct {
	// CredentialsName User name, account name or access key.
	CredentialsName string `json:"credentialsName"`

	// CredentialsTag Tag used to identify the credentials record.
	CredentialsTag *string `json:"credentialsTag,omitempty"`
}

// CredentialsImportSpec defines model for CredentialsImportSpec.
type CredentialsImportSpec struct {
	// Description Description of the credentials record.
	Description             *string                              `json:"description,omitempty"`
	LinuxAdditionalSettings *CredentialsLinuxSettingsImportModel `json:"linuxAdditionalSettings,omitempty"`

	// Password Password.
	Password *string `json:"password,omitempty"`

	// Tag Tag used to identify the credentials record.
	Tag string `json:"tag"`

	// Type Credentials type.
	Type ECredentialsType `json:"type"`

	// Username User name.
	Username string `json:"username"`
}

// CredentialsImportSpecCollection defines model for CredentialsImportSpecCollection.
type CredentialsImportSpecCollection struct {
	// Credentials Array of credentials.
	Credentials []CredentialsImportSpec `json:"credentials"`
}

// CredentialsLinuxSettingsImportModel defines model for CredentialsLinuxSettingsImportModel.
type CredentialsLinuxSettingsImportModel struct {
	// SSHPort SSH port used to connect to a Linux server.
	SSHPort *int `json:"SSHPort,omitempty"`

	// AddToSudoers If *true*, the account is automatically added to the sudoers file.
	AddToSudoers *bool `json:"addToSudoers,omitempty"`

	// AutoElevated If *true*, the permissions of the account are automatically elevated to the root user.
	AutoElevated *bool `json:"autoElevated,omitempty"`

	// Passphrase Passphrase that protects the private key.
	Passphrase *string `json:"passphrase,omitempty"`

	// PrivateKey Private key.
	PrivateKey *string `json:"privateKey,omitempty"`

	// RootPassword Password for the root account.
	RootPassword *string `json:"rootPassword,omitempty"`

	// UseSu If *true*, the `su` command is used for Linux distributions where the `sudo` command is not available.
	UseSu *bool `json:"useSu,omitempty"`
}

// CredentialsModel defines model for CredentialsModel.
type CredentialsModel struct {
	// CreationTime Date and time when the credentials were created.
	CreationTime time.Time `json:"creationTime"`

	// Description Description of the credentials record.
	Description string `json:"description"`

	// Id ID of the credentials record.
	Id openapi_types.UUID `json:"id"`

	// Type Credentials type.
	Type ECredentialsType `json:"type"`

	// Username User name.
	Username string `json:"username"`
}

// CredentialsPasswordChangeSpec defines model for CredentialsPasswordChangeSpec.
type CredentialsPasswordChangeSpec struct {
	// Password New password.
	Password string `json:"password"`
}

// CredentialsResult defines model for CredentialsResult.
type CredentialsResult struct {
	// Data Array of credentials.
	Data []CredentialsModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// CredentialsSpec defines model for CredentialsSpec.
type CredentialsSpec struct {
	// Description Description of the credentials record.
	Description *string `json:"description,omitempty"`

	// Password Password.
	Password *string `json:"password,omitempty"`

	// Type Credentials type.
	Type ECredentialsType `json:"type"`

	// Username User name.
	Username string `json:"username"`
}

// EAllowedBackupsType Type of backup files that can be stored on the extent.
type EAllowedBackupsType string

// EApplicationSettingsVSS Behavior scenario for application-aware processing.
type EApplicationSettingsVSS string

// EBackupExclusionPolicy Exclusion policy.
type EBackupExclusionPolicy string

// EBackupModeType Type of the backup method used to create a restore point.
type EBackupModeType string

// EBackupObjectsFiltersOrderColumn defines model for EBackupObjectsFiltersOrderColumn.
type EBackupObjectsFiltersOrderColumn string

// EBackupOracleLogsSettings Type of archived logs processing.
type EBackupOracleLogsSettings string

// EBackupProxyImportType defines model for EBackupProxyImportType.
type EBackupProxyImportType string

// EBackupProxyTransportMode Transport mode of the backup proxy.
type EBackupProxyTransportMode string

// EBackupScriptProcessingMode Scenario for scripts execution.
type EBackupScriptProcessingMode string

// EBackupsFiltersOrderColumn defines model for EBackupsFiltersOrderColumn.
type EBackupsFiltersOrderColumn string

// ECompressionLevel Compression level.
type ECompressionLevel string

// EConfigBackupSMTPSettingsType Type of notification settings.
type EConfigBackupSMTPSettingsType string

// ECredentialsFiltersOrderColumn defines model for ECredentialsFiltersOrderColumn.
type ECredentialsFiltersOrderColumn string

// ECredentialsType Credentials type.
type ECredentialsType string

// EDailyKinds Kind of daily scheduling scheme.
type EDailyKinds string

// EDayNumberInMonth defines model for EDayNumberInMonth.
type EDayNumberInMonth string

// EDayOfWeek defines model for EDayOfWeek.
type EDayOfWeek string

// EDiskInfoProcessState Process state of the disk.
type EDiskInfoProcessState string

// EDiskInfoType Type of the disk.
type EDiskInfoType string

// EEmailNotificationType Type of email notification settings: global notification settings specified for the backup server, or custom notification settings specified for this job.
type EEmailNotificationType string

// EEncryptionPasswordsFiltersOrderColumn defines model for EEncryptionPasswordsFiltersOrderColumn.
type EEncryptionPasswordsFiltersOrderColumn string

// EGuestFSIndexingMode Indexing mode.
type EGuestFSIndexingMode string

// EHierarchyType Hierarchy type.
type EHierarchyType string

// EInstantRecoveryMountState Mount state.
type EInstantRecoveryMountState string

// EJobFiltersOrderColumn Orders jobs by the specified column.
type EJobFiltersOrderColumn string

// EJobStatesFiltersOrderColumn Orders job states by the specified column.
type EJobStatesFiltersOrderColumn string

// EJobStatus Current status of the job.
type EJobStatus string

// EJobType Type of the job.
type EJobType string

// EJobWorkload Workload which the job must process.
type EJobWorkload string

// ELoginGrantType Authorization grant type.
//
// Available values:
// - `password` — used to obtain an access token by providing a user name and password.
// - `refresh_token` — used to refresh an expired or lost access token by providing a refresh token.
// - `authorization_code` — used to obtain an access token by providing an authorization code.
type ELoginGrantType string

// EManagedServerType Type of the server.
type EManagedServerType string

// EManagedServersFiltersOrderColumn defines model for EManagedServersFiltersOrderColumn.
type EManagedServersFiltersOrderColumn string

// EMonth defines model for EMonth.
type EMonth string

// EObjectRestorePointOperation defines model for EObjectRestorePointOperation.
type EObjectRestorePointOperation string

// EObjectRestorePointsFiltersOrderColumn defines model for EObjectRestorePointsFiltersOrderColumn.
type EObjectRestorePointsFiltersOrderColumn string

// EPeriodicallyKinds Time unit for periodic job scheduling.
type EPeriodicallyKinds string

// EPlacementPolicyType Type of placement policy.
type EPlacementPolicyType string

// EPlatformType defines model for EPlatformType.
type EPlatformType string

// EProxiesFiltersOrderColumn defines model for EProxiesFiltersOrderColumn.
type EProxiesFiltersOrderColumn string

// EProxyType Type of the backup proxy.
type EProxyType string

// ERepositoryExtentStatusType defines model for ERepositoryExtentStatusType.
type ERepositoryExtentStatusType string

// ERepositoryFiltersOrderColumn defines model for ERepositoryFiltersOrderColumn.
type ERepositoryFiltersOrderColumn string

// ERepositoryStatesFiltersOrderColumn Orders repositories by the specified column.
type ERepositoryStatesFiltersOrderColumn string

// ERepositoryType Repository type.
type ERepositoryType string

// ERetainLogBackupsType Retention policy for the logs stored in the backup repository.
type ERetainLogBackupsType string

// ERetentionPolicyType Type of the retention policy.
type ERetentionPolicyType string

// ESQLLogsProcessing Type of transaction logs processing.
type ESQLLogsProcessing string

// EScaleOutRepositoryFiltersOrderColumn defines model for EScaleOutRepositoryFiltersOrderColumn.
type EScaleOutRepositoryFiltersOrderColumn string

// EScriptPeriodicityType Type of script periodicity.
type EScriptPeriodicityType string

// ESennightOfMonth Sennight of the month.
type ESennightOfMonth string

// EServicesFiltersOrderColumn defines model for EServicesFiltersOrderColumn.
type EServicesFiltersOrderColumn string

// ESessionResult Result of the session.
type ESessionResult string

// ESessionState State of the session.
type ESessionState string

// ESessionType Type of the session.
type ESessionType string

// ESessionsFiltersOrderColumn defines model for ESessionsFiltersOrderColumn.
type ESessionsFiltersOrderColumn string

// ESpeedUnit Traffic speed unit.
type ESpeedUnit string

// EStorageOptimization Storage optimization that depends on the target type.
type EStorageOptimization string

// ETaskLogRecordStatus defines model for ETaskLogRecordStatus.
type ETaskLogRecordStatus string

// ETransactionLogsSettings Transaction logs settings that define whether copy-only backups must be created or transaction logs for Microsoft Exchange, Microsoft SQL and Oracle VMs must be processed.</br>
// If transaction log processing is selected, specify the following parameters:</br>
// <ul>
// <li>[For Microsoft SQL Server VMs] Microsoft SQL Server transaction log settings</li>
// <li>[For Oracle VMs] Oracle archived log settings</li>
// </ul>
type ETransactionLogsSettings string

// EViHostType Type of the VMware vSphere server.
type EViHostType string

// EViRootFiltersOrderColumn Sorts VMware vSphere servers by one of the VMware vSphere server parameters.
type EViRootFiltersOrderColumn string

// EVmwareDisksTypeToProcess Type of disk selection.
type EVmwareDisksTypeToProcess string

// EVmwareInventoryType Type of the VMware vSphere object.
type EVmwareInventoryType string

// EWindowsHostComponentType Veeam Backup & Replication component.
type EWindowsHostComponentType string

// EmailCustomNotificationType defines model for EmailCustomNotificationType.
type EmailCustomNotificationType struct {
	// SuppressNotificationUntilLastRetry If *true*, email notifications are sent about the final job status only (not per every job retry).
	SuppressNotificationUntilLastRetry *bool `json:"SuppressNotificationUntilLastRetry,omitempty"`

	// NotifyOnError If *true*, email notifications are sent when the job fails.
	NotifyOnError *bool `json:"notifyOnError,omitempty"`

	// NotifyOnSuccess If *true*, email notifications are sent when the job completes successfully.
	NotifyOnSuccess *bool `json:"notifyOnSuccess,omitempty"`

	// NotifyOnWarning If *true*, email notifications are sent when the job completes with a warning.
	NotifyOnWarning *bool `json:"notifyOnWarning,omitempty"`

	// Subject Notification subject. Use the following variables in the subject: *%Time%* (completion time), *%JobName%*, *%JobResult%*, *%ObjectCount%* (number of VMs in the job) and *%Issues%* (number of VMs in the job that have finished with the Warning or Failed status).
	Subject *string `json:"subject,omitempty"`
}

// EmailNotificationSettingsModel Email notification settings for the backup job.
type EmailNotificationSettingsModel struct {
	CustomNotificationSettings *EmailCustomNotificationType `json:"customNotificationSettings,omitempty"`

	// IsEnabled If *true*, email notifications are enabled for this job.
	IsEnabled bool `json:"isEnabled"`

	// NotificationType Type of email notification settings: global notification settings specified for the backup server, or custom notification settings specified for this job.
	NotificationType *EEmailNotificationType `json:"notificationType,omitempty"`

	// Recipients Array of recipient’s email addresses.
	Recipients *[]string `json:"recipients,omitempty"`
}

// EmptySuccessResponse Empty success response (200, 201, 204).
type EmptySuccessResponse = map[string]interface{}

// EncryptionPasswordExportSpec defines model for EncryptionPasswordExportSpec.
type EncryptionPasswordExportSpec struct {
	// Hints Array of password hints.
	Hints *[]string `json:"hints,omitempty"`

	// Ids Array of password IDs.
	Ids *[]openapi_types.UUID `json:"ids,omitempty"`

	// ModificationTimeFrom Date and time the password was last modified.
	ModificationTimeFrom *time.Time `json:"modificationTimeFrom,omitempty"`

	// Tags Array of password tags.
	Tags *[]string `json:"tags,omitempty"`
}

// EncryptionPasswordImportSpec defines model for EncryptionPasswordImportSpec.
type EncryptionPasswordImportSpec struct {
	// Hint Hint for the encryption password.
	Hint string `json:"hint"`

	// Password Password.
	Password string `json:"password"`

	// Tag Tag for the encryption password.
	Tag *string `json:"tag,omitempty"`
}

// EncryptionPasswordImportSpecCollection defines model for EncryptionPasswordImportSpecCollection.
type EncryptionPasswordImportSpecCollection struct {
	// EncryptionPasswords Array of encryption passwords.
	EncryptionPasswords *[]EncryptionPasswordImportSpec `json:"encryptionPasswords,omitempty"`
}

// EncryptionPasswordModel defines model for EncryptionPasswordModel.
type EncryptionPasswordModel struct {
	// Hint Hint for the encryption password.
	Hint string `json:"hint"`

	// Id ID of the encryption password.
	Id openapi_types.UUID `json:"id"`

	// ModificationTime Date and time the password was last modified.
	ModificationTime *time.Time `json:"modificationTime,omitempty"`

	// Tag Tag for the encryption password.
	Tag *string `json:"tag,omitempty"`
}

// EncryptionPasswordSpec defines model for EncryptionPasswordSpec.
type EncryptionPasswordSpec struct {
	// Hint Hint for the encryption password. Provide a meaningful hint that will help you recall the password.
	Hint string `json:"hint"`

	// Password Password for data encryption. If you lose the password, you will not be able to restore it.
	Password string `json:"password"`

	// Tag Tag for the encryption password.
	Tag *string `json:"tag,omitempty"`
}

// EncryptionPasswordsResult defines model for EncryptionPasswordsResult.
type EncryptionPasswordsResult struct {
	// Data Array of encryption passwords.
	Data []EncryptionPasswordModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// Error defines model for Error.
type Error struct {
	// ErrorCode The error code is a string that uniquely identifies an error condition and should be understood by programs that detect and handle errors by type
	ErrorCode ErrorErrorCode `json:"errorCode"`

	// Message The error message contains a generic description of the error condition in English. It is intended for a human audience
	Message string `json:"message"`

	// ResourceId ID of the object that is involved in the error (or empty)
	ResourceId *string `json:"resourceId,omitempty"`
}

// ErrorErrorCode The error code is a string that uniquely identifies an error condition and should be understood by programs that detect and handle errors by type
type ErrorErrorCode string

// EvCentersInventoryFiltersOrderColumn Sorts vCenter Servers by one of the job parameters.
type EvCentersInventoryFiltersOrderColumn string

// FullBackupMaintenanceDefragmentAndCompactModel Compact operation settings.
type FullBackupMaintenanceDefragmentAndCompactModel struct {
	// IsEnabled If *true*, Veeam Backup & Replication compacts full backup files.
	IsEnabled bool `json:"isEnabled"`

	// Monthly Monthly schedule settings.
	Monthly *AdvancedStorageScheduleMonthlyModel `json:"monthly,omitempty"`

	// Weekly Weekly schedule settings.
	Weekly *AdvancedStorageScheduleWeeklyModel `json:"weekly,omitempty"`
}

// FullBackupMaintenanceModel Maintenance settings for full backup files.
type FullBackupMaintenanceModel struct {
	// RemoveData Backup data setting for deleted VMs.
	RemoveData *FullBackupMaintenanceRemoveDataModel `json:"RemoveData,omitempty"`

	// DefragmentAndCompact Compact operation settings.
	DefragmentAndCompact *FullBackupMaintenanceDefragmentAndCompactModel `json:"defragmentAndCompact,omitempty"`
}

// FullBackupMaintenanceRemoveDataModel Backup data setting for deleted VMs.
type FullBackupMaintenanceRemoveDataModel struct {
	// AfterDays Number of days.
	AfterDays *int `json:"afterDays,omitempty"`

	// IsEnabled If *true*, Veeam Backup & Replication keeps the backup data of deleted VMs for the `afterDays` number of days.
	IsEnabled bool `json:"isEnabled"`
}

// GFSPolicySettingsModel GFS retention policy settings.
type GFSPolicySettingsModel struct {
	// IsEnabled If *true*, the long-term (GFS) retention policy is enabled.
	IsEnabled bool `json:"isEnabled"`

	// Monthly Monthly GFS retention policy.
	Monthly *GFSPolicySettingsMonthlyModel `json:"monthly,omitempty"`

	// Weekly Weekly GFS retention policy.
	Weekly *GFSPolicySettingsWeeklyModel `json:"weekly,omitempty"`

	// Yearly Yearly GFS retention policy.
	Yearly *GFSPolicySettingsYearlyModel `json:"yearly,omitempty"`
}

// GFSPolicySettingsMonthlyModel Monthly GFS retention policy.
type GFSPolicySettingsMonthlyModel struct {
	// DesiredTime Sennight of the month.
	DesiredTime *ESennightOfMonth `json:"desiredTime,omitempty"`

	// IsEnabled If *true*, the monthly GFS retention policy is enabled.
	IsEnabled bool `json:"isEnabled"`

	// KeepForNumberOfMonths Number of months to keep full backups for archival purposes.
	KeepForNumberOfMonths *int `json:"keepForNumberOfMonths,omitempty"`
}

// GFSPolicySettingsWeeklyModel Weekly GFS retention policy.
type GFSPolicySettingsWeeklyModel struct {
	DesiredTime *EDayOfWeek `json:"desiredTime,omitempty"`

	// IsEnabled If *true*, the weekly GFS retention policy is enabled.
	IsEnabled bool `json:"isEnabled"`

	// KeepForNumberOfWeeks Number of weeks to keep full backups for archival purposes.
	KeepForNumberOfWeeks *int `json:"keepForNumberOfWeeks,omitempty"`
}

// GFSPolicySettingsYearlyModel Yearly GFS retention policy.
type GFSPolicySettingsYearlyModel struct {
	DesiredTime *EMonth `json:"desiredTime,omitempty"`

	// IsEnabled If *true*, the yearly GFS retention policy is enabled.
	IsEnabled bool `json:"isEnabled"`

	// KeepForNumberOfYears Number of years to keep full backups for archival purposes.
	KeepForNumberOfYears *int `json:"keepForNumberOfYears,omitempty"`
}

// GeneralOptionsEmailNotificationsModel Global email notification settings.
type GeneralOptionsEmailNotificationsModel struct {
	// AdvancedSmtpOptions advanced global email notification settings.
	AdvancedSmtpOptions AdvancedSmtpOptionsModel `json:"advancedSmtpOptions"`

	// From Email address from which email notifications must be sent.
	From string `json:"from"`

	// IsEnabled If *true*, global email notification settings are enabled.
	IsEnabled bool `json:"isEnabled"`

	// NotifyOnFailure If *true*, email notifications are sent when the job fails.
	NotifyOnFailure bool `json:"notifyOnFailure"`

	// NotifyOnLastRetry If *true*, email notifications are sent about the final job status only (not per every job retry).
	NotifyOnLastRetry bool `json:"notifyOnLastRetry"`

	// NotifyOnSuccess If *true*, email notifications are sent when the job completes successfully.
	NotifyOnSuccess bool `json:"notifyOnSuccess"`

	// NotifyOnWarning If *true*, email notifications are sent when the job completes with a warning.
	NotifyOnWarning bool `json:"notifyOnWarning"`

	// SendDailyReportsAt Time when Veeam Backup & Replication sends daily email reports.
	SendDailyReportsAt time.Time `json:"sendDailyReportsAt"`

	// SmtpServerName Full DNS name or IP address of the SMTP server.
	SmtpServerName string `json:"smtpServerName"`

	// Subject Notification subject. Use the following variables in the subject:<br> <ol>
	//   <li>%Time% — completion time</li>
	//   <li>%JobName%</li>
	//   <li>%JobResult%</li>
	//   <li>%ObjectCount% — number of VMs in the job</li>
	//   <li>%Issues% — number of VMs in the job that have been processed with the Warning or Failed status</li>
	// </ol>
	Subject string `json:"subject"`

	// To Recipient email addresses. Use a semicolon to separate multiple addresses.
	To string `json:"to"`
}

// GeneralOptionsModel defines model for GeneralOptionsModel.
type GeneralOptionsModel struct {
	// EmailSettings Global email notification settings.
	EmailSettings *GeneralOptionsEmailNotificationsModel `json:"emailSettings,omitempty"`
	Notifications *GeneralOptionsNotificationsModel      `json:"notifications,omitempty"`
}

// GeneralOptionsNotificationsModel defines model for GeneralOptionsNotificationsModel.
type GeneralOptionsNotificationsModel struct {
	// DatastoreSpaceThreshold Space threshold of production datastore, in percent.
	DatastoreSpaceThreshold int32 `json:"datastoreSpaceThreshold"`

	// DatastoreSpaceThresholdEnabled If *true*, notifications about critical amount of free space in production datastore are enabled.
	DatastoreSpaceThresholdEnabled bool `json:"datastoreSpaceThresholdEnabled"`

	// NotifyOnSupportExpiration If *true*, notifications about support contract expiration are enabled.
	NotifyOnSupportExpiration bool `json:"notifyOnSupportExpiration"`

	// NotifyOnUpdates If *true*, notifications about updates are enabled.
	NotifyOnUpdates bool `json:"notifyOnUpdates"`

	// SkipVMSpaceThreshold Space threshold of production datastore, in percent.
	SkipVMSpaceThreshold int32 `json:"skipVMSpaceThreshold"`

	// SkipVMSpaceThresholdEnabled If *true* and the `skipVMSpaceThreshold` threshold is reached, Veeam Backup & Replication terminates backup and replication jobs working with production datastores before VM snapshots are taken.
	SkipVMSpaceThresholdEnabled bool `json:"skipVMSpaceThresholdEnabled"`

	// StorageSpaceThreshold Space threshold of backup storage, in percent.
	StorageSpaceThreshold int32 `json:"storageSpaceThreshold"`

	// StorageSpaceThresholdEnabled If *true*, notifications about critical amount of free space in backup storage are enabled.
	StorageSpaceThresholdEnabled bool `json:"storageSpaceThresholdEnabled"`
}

// GlobalNetworkTrafficRulesModel defines model for GlobalNetworkTrafficRulesModel.
type GlobalNetworkTrafficRulesModel struct {
	// PreferredNetworks Preferred networks used for backup and replication traffic.
	PreferredNetworks *PreferredNetworksModel `json:"preferredNetworks,omitempty"`

	// TrafficRules Array of traffic rules.
	TrafficRules *[]TrafficRuleModel `json:"trafficRules,omitempty"`

	// UploadStreamsCount Number of TCP/IP connections per job.
	UploadStreamsCount *int `json:"uploadStreamsCount,omitempty"`

	// UseMultipleStreamsPerJob If *true*, Veeam Backup & Replication uses multiple TCP/IP transfer connection for every job session.
	UseMultipleStreamsPerJob bool `json:"useMultipleStreamsPerJob"`
}

// GuestFileSystemIndexingModel VM guest OS file indexing.
type GuestFileSystemIndexingModel struct {
	// IndexingSettings Array of VMs with guest OS file indexing options.
	IndexingSettings *[]BackupIndexingSettingsModel `json:"indexingSettings,omitempty"`
	IsEnabled        bool                           `json:"isEnabled"`
}

// GuestInteractionProxiesSettingsImportModel Guest interaction proxy used to deploy the runtime process on the VM guest OS.
type GuestInteractionProxiesSettingsImportModel struct {
	// AutomaticSelection If *true*, Veeam Backup & Replication automatically selects the guest interaction proxy.
	AutomaticSelection bool `json:"automaticSelection"`

	// Proxies Array of proxies specified explicitly. The array must contain Microsoft Windows servers added to the backup infrastructure only.
	Proxies *[]string `json:"proxies,omitempty"`
}

// GuestOsCredentialsImportModel VM custom credentials.
type GuestOsCredentialsImportModel struct {
	// CredentialsPerMachine Individual credentials for VMs.
	CredentialsPerMachine *[]GuestOsCredentialsPerMachineImportModel `json:"credentialsPerMachine,omitempty"`
	Creds                 *CredentialsImportModel                    `json:"creds,omitempty"`
}

// GuestOsCredentialsPerMachineImportModel defines model for GuestOsCredentialsPerMachineImportModel.
type GuestOsCredentialsPerMachineImportModel struct {
	LinuxCreds *CredentialsImportModel `json:"linuxCreds,omitempty"`

	// VmObject VMware object.
	VmObject     VmwareObjectModel       `json:"vmObject"`
	WindowsCreds *CredentialsImportModel `json:"windowsCreds,omitempty"`
}

// HostConnectionSpec defines model for HostConnectionSpec.
type HostConnectionSpec struct {
	// CredentialsId ID of a credentials record used to connect to the server.
	CredentialsId openapi_types.UUID `json:"credentialsId"`

	// Port Port used to communicate with the server.
	Port *int `json:"port,omitempty"`

	// ServerName Full DNS name or IP address of the server.
	ServerName string `json:"serverName"`

	// Type Type of the server.
	Type EManagedServerType `json:"type"`
}

// JobExportSpec defines model for JobExportSpec.
type JobExportSpec struct {
	// Ids Array of job IDs.
	Ids *[]openapi_types.UUID `json:"ids,omitempty"`

	// Names Array of job names. Wildcard characters are supported.
	Names *[]string `json:"names,omitempty"`

	// Types Array of job types.
	Types *[]string `json:"types,omitempty"`
}

// JobImportSpec defines model for JobImportSpec.
type JobImportSpec struct {
	// Description Description of the job.
	Description string `json:"description"`

	// GuestProcessing Guest processing settings.
	GuestProcessing BackupJobGuestProcessingImportModel `json:"guestProcessing"`

	// IsHighPriority If *true*, the job has a high priority in getting backup infrastructure resources.
	IsHighPriority bool `json:"isHighPriority"`

	// Name Name of the job.
	Name string `json:"name"`

	// Schedule Job scheduling options.
	Schedule BackupScheduleModel `json:"schedule"`

	// Storage Backup storage settings.
	Storage BackupJobStorageImportModel `json:"storage"`

	// Type Type of the job.
	Type            EJobType                     `json:"type"`
	VirtualMachines BackupJobVirtualMachinesSpec `json:"virtualMachines"`
}

// JobImportSpecCollection defines model for JobImportSpecCollection.
type JobImportSpecCollection struct {
	// Jobs Array of jobs.
	Jobs []JobImportSpec `json:"jobs"`
}

// JobModel defines model for JobModel.
type JobModel struct {
	// Description Description of the job.
	Description string `json:"description"`

	// Id ID of the job.
	Id openapi_types.UUID `json:"id"`

	// IsDisabled If *true*, the job is disabled.
	IsDisabled bool `json:"isDisabled"`

	// Name Name of the job.
	Name string `json:"name"`

	// Type Type of the job.
	Type EJobType `json:"type"`
}

// JobScriptsSettingsModel Script settings.
type JobScriptsSettingsModel struct {
	// DayOfWeek Days of the week when the scripts must be executed.
	DayOfWeek *[]EDayOfWeek `json:"dayOfWeek,omitempty"`

	// PeriodicityType Type of script periodicity.
	PeriodicityType *EScriptPeriodicityType `json:"periodicityType,omitempty"`

	// PostCommand Script settings.
	PostCommand *ScriptCommand `json:"postCommand,omitempty"`

	// PreCommand Script settings.
	PreCommand *ScriptCommand `json:"preCommand,omitempty"`

	// RunScriptEvery Number of the backup job session after which the scripts must be executed.
	RunScriptEvery *int `json:"runScriptEvery,omitempty"`
}

// JobSpec defines model for JobSpec.
type JobSpec struct {
	// Description Job description specified at the time of the job creation.
	Description string `json:"description"`

	// Name Name of the job.
	Name string `json:"name"`

	// Type Type of the job.
	Type EJobType `json:"type"`
}

// JobStartSpec defines model for JobStartSpec.
type JobStartSpec struct {
	PerformActiveFull bool  `json:"performActiveFull"`
	StartChainedJobs  *bool `json:"startChainedJobs,omitempty"`
}

// JobStateModel defines model for JobStateModel.
type JobStateModel struct {
	// Description Description of the job.
	Description string `json:"description"`

	// Id ID of the job.
	Id openapi_types.UUID `json:"id"`

	// LastResult Result of the session.
	LastResult ESessionResult `json:"lastResult"`

	// LastRun Last run of the job.
	LastRun *time.Time `json:"lastRun,omitempty"`

	// Name Name of the job.
	Name string `json:"name"`

	// NextRun Next run of the job.
	NextRun *time.Time `json:"nextRun,omitempty"`

	// ObjectsCount Number of objects processed by the job.
	ObjectsCount int `json:"objectsCount"`

	// RepositoryId ID of the backup repository.
	RepositoryId *openapi_types.UUID `json:"repositoryId,omitempty"`

	// RepositoryName Name of the backup repository.
	RepositoryName *string `json:"repositoryName,omitempty"`

	// SessionId ID of the last job session.
	SessionId *openapi_types.UUID `json:"sessionId,omitempty"`

	// Status Current status of the job.
	Status EJobStatus `json:"status"`

	// Type Type of the job.
	Type EJobType `json:"type"`

	// Workload Workload which the job must process.
	Workload EJobWorkload `json:"workload"`
}

// JobStatesResult defines model for JobStatesResult.
type JobStatesResult struct {
	// Data Array of job states.
	Data []JobStateModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// JobStopSpec defines model for JobStopSpec.
type JobStopSpec struct {
	GracefullStop bool `json:"gracefullStop"`
}

// JobsResult defines model for JobsResult.
type JobsResult struct {
	// Data Array of jobs.
	Data []JobModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// LinuxHostImportSpec defines model for LinuxHostImportSpec.
type LinuxHostImportSpec struct {
	Credentials CredentialsImportModel `json:"credentials"`

	// Description Description of the server.
	Description string `json:"description"`

	// Name Full DNS name or IP address of the server.
	Name string `json:"name"`

	// SshFingerprint SSH key fingerprint used to verify the server identity.
	SshFingerprint string `json:"sshFingerprint"`

	// SshSettings SSH settings.
	SshSettings *LinuxHostSSHSettingsModel `json:"sshSettings,omitempty"`

	// Type Type of the server.
	Type EManagedServerType `json:"type"`
}

// LinuxHostSSHSettingsModel SSH settings.
type LinuxHostSSHSettingsModel struct {
	// ManagementPort Port used as a control channel from the Veeam Backup & Replication console to the Linux server.
	ManagementPort *int `json:"managementPort,omitempty"`

	// PortRangeEnd End port used for data transfer.
	PortRangeEnd *int `json:"portRangeEnd,omitempty"`

	// PortRangeStart Start port used for data transfer.
	PortRangeStart *int `json:"portRangeStart,omitempty"`

	// ServerThisSide If *true*, the server is run on this side.
	ServerThisSide *bool `json:"serverThisSide,omitempty"`

	// SshTimeOutMs SSH timeout, in ms. If a task targeted at the server is inactive after the timeout, the task is terminated.
	SshTimeOutMs *int `json:"sshTimeOutMs,omitempty"`
}

// LinuxLocalRepositorySettingsModel Repository settings.
type LinuxLocalRepositorySettingsModel struct {
	// AdvancedSettings Advanced settings for the backup repository.
	AdvancedSettings *RepositoryAdvancedSettingsModel `json:"advancedSettings,omitempty"`

	// MakeRecentBackupsImmutableDays Number of days to keep immutable backups.
	MakeRecentBackupsImmutableDays *int `json:"makeRecentBackupsImmutableDays,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// Path Path to the folder where backup files are stored.
	Path *string `json:"path,omitempty"`

	// ReadWriteRate Maximum rate that restricts the total speed of reading and writing data to the backup repository disk.
	ReadWriteRate *int `json:"readWriteRate,omitempty"`

	// UseFastCloningOnXFSVolumes [For Linux repository] If *true*, fast cloning on XFS volumes is used.
	UseFastCloningOnXFSVolumes *bool `json:"useFastCloningOnXFSVolumes,omitempty"`

	// UseImmutableBackups If *true*, the Object Lock feature is used to protect recent backups.
	UseImmutableBackups *bool `json:"useImmutableBackups,omitempty"`
}

// LinuxLocalStorageImportSpec defines model for LinuxLocalStorageImportSpec.
type LinuxLocalStorageImportSpec struct {
	// Description Description of the backup repository.
	Description string `json:"description"`

	// HostName ID of the server that is used as a backup repository.
	HostName    string                        `json:"hostName"`
	MountServer MountServerSettingsImportSpec `json:"mountServer"`

	// Name Name of the backup repository.
	Name string `json:"name"`

	// Repository Repository settings.
	Repository LinuxLocalRepositorySettingsModel `json:"repository"`

	// Tag VMware vSphere tag assigned to the backup repository.
	Tag string `json:"tag"`

	// Type Repository type.
	Type ERepositoryType `json:"type"`
}

// ManageServerExportSpec defines model for ManageServerExportSpec.
type ManageServerExportSpec struct {
	// Ids Array of server IDs.
	Ids *[]openapi_types.UUID `json:"ids,omitempty"`

	// Names Array of server names. Wildcard characters are supported.
	Names *[]string `json:"names,omitempty"`

	// Types Array of server types.
	Types *[]EManagedServerType `json:"types,omitempty"`
}

// ManageServerImportSpecCollection defines model for ManageServerImportSpecCollection.
type ManageServerImportSpecCollection struct {
	// LinuxHosts Array of managed Linux servers.
	LinuxHosts *[]LinuxHostImportSpec `json:"linuxHosts,omitempty"`

	// ViHosts Array of VMware vSphere servers.
	ViHosts *[]ViHostImportSpec `json:"viHosts,omitempty"`

	// WindowsHosts Array of managed Microsoft Windows servers.
	WindowsHosts *[]WindowsHostImportSpec `json:"windowsHosts,omitempty"`
}

// ManagedServerModel defines model for ManagedServerModel.
type ManagedServerModel struct {
	// CredentialsId ID of a credentials record used to connect to the server.
	CredentialsId openapi_types.UUID `json:"credentialsId"`

	// Description Description of the server.
	Description string `json:"description"`

	// Id ID of the server.
	Id openapi_types.UUID `json:"id"`

	// Name Full DNS name or IP address of the server.
	Name string `json:"name"`

	// Type Type of the server.
	Type EManagedServerType `json:"type"`
}

// ManagedServerSpec defines model for ManagedServerSpec.
type ManagedServerSpec struct {
	// CredentialsId ID of the credentials used to connect to the server.
	CredentialsId openapi_types.UUID `json:"credentialsId"`

	// Description Description of the server.
	Description string `json:"description"`

	// Name Full DNS name or IP address of the server.
	Name string `json:"name"`

	// Type Type of the server.
	Type EManagedServerType `json:"type"`
}

// ManagedServersResult defines model for ManagedServersResult.
type ManagedServersResult struct {
	// Data Array of managed servers.
	Data []ManagedServerModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// MountServerSettingsImportSpec defines model for MountServerSettingsImportSpec.
type MountServerSettingsImportSpec struct {
	// MountServerName Name of the mount server.
	MountServerName string `json:"mountServerName"`

	// VPowerNFSEnabled If *true*, the vPower NFS Service is enabled on the mount server.
	VPowerNFSEnabled bool `json:"vPowerNFSEnabled"`

	// VPowerNFSPortSettings Network ports used by the vPower NFS Service.
	VPowerNFSPortSettings *VPowerNFSPortSettingsModel `json:"vPowerNFSPortSettings,omitempty"`

	// WriteCacheFolder Path to the folder used for writing cache during mount operations.
	WriteCacheFolder string `json:"writeCacheFolder"`
}

// NetworkRepositorySettingsModel Repository settings.
type NetworkRepositorySettingsModel struct {
	// AdvancedSettings Advanced settings for the backup repository.
	AdvancedSettings *RepositoryAdvancedSettingsModel `json:"advancedSettings,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// ReadWriteRate Maximum rate that restricts the total speed of reading and writing data to the backup repository disk.
	ReadWriteRate *int `json:"readWriteRate,omitempty"`
}

// NfsRepositoryShareSettingsSpec defines model for NfsRepositoryShareSettingsSpec.
type NfsRepositoryShareSettingsSpec struct {
	// GatewayServer Settings for the gateway server.
	GatewayServer *RepositoryShareGatewayImportSpec `json:"gatewayServer,omitempty"`

	// SharePath Path to the shared folder that that is used as a backup repository.
	SharePath string `json:"sharePath"`
}

// NfsStorageImportSpec defines model for NfsStorageImportSpec.
type NfsStorageImportSpec struct {
	// Description Description of the backup repository.
	Description string                        `json:"description"`
	MountServer MountServerSettingsImportSpec `json:"mountServer"`

	// Name Name of the backup repository.
	Name string `json:"name"`

	// Repository Repository settings.
	Repository NetworkRepositorySettingsModel `json:"repository"`
	Share      NfsRepositoryShareSettingsSpec `json:"share"`

	// Tag VMware vSphere tag assigned to the backup repository.
	Tag string `json:"tag"`

	// Type Repository type.
	Type ERepositoryType `json:"type"`
}

// NotificationSettingsModel Notification settings for the backup job.
type NotificationSettingsModel struct {
	// EmailNotifications Email notification settings for the backup job.
	EmailNotifications *EmailNotificationSettingsModel `json:"emailNotifications,omitempty"`

	// SendSNMPNotifications If *true*, SNMP notifications are enabled for this job.
	SendSNMPNotifications *bool `json:"sendSNMPNotifications,omitempty"`

	// VmAttribute VM attribute settings.
	VmAttribute *NotificationVmAttributeSettingsModel `json:"vmAttribute,omitempty"`
}

// NotificationVmAttributeSettingsModel VM attribute settings.
type NotificationVmAttributeSettingsModel struct {
	// AppendToExisitingValue If *true*, information about successfully performed backup is appended to the existing value of the attribute added by the user.
	AppendToExisitingValue *bool `json:"appendToExisitingValue,omitempty"`

	// IsEnabled If *true*, information about successfully performed backup is written to a VM attribute.
	IsEnabled bool `json:"isEnabled"`

	// Notes Name of the VM attribute.
	Notes *string `json:"notes,omitempty"`
}

// ObjectRestorePointDiskModel defines model for ObjectRestorePointDiskModel.
type ObjectRestorePointDiskModel struct {
	// Capacity Capacity of the disk.
	Capacity int64 `json:"capacity"`

	// Name Name of the disk.
	Name string `json:"name"`

	// State Process state of the disk.
	State EDiskInfoProcessState `json:"state"`

	// Type Type of the disk.
	Type EDiskInfoType `json:"type"`

	// Uid ID of the disk.
	Uid string `json:"uid"`
}

// ObjectRestorePointDisksResult defines model for ObjectRestorePointDisksResult.
type ObjectRestorePointDisksResult struct {
	// Data Array of disks.
	Data []ObjectRestorePointDiskModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// ObjectRestorePointModel defines model for ObjectRestorePointModel.
type ObjectRestorePointModel struct {
	// AllowedOperations Array of operations allowed for the restore point.
	AllowedOperations []EObjectRestorePointOperation `json:"allowedOperations"`

	// BackupId ID of a backup that contains the restore point.
	BackupId openapi_types.UUID `json:"backupId"`

	// CreationTime Date and time when the restore point was created.
	CreationTime time.Time          `json:"creationTime"`
	Id           openapi_types.UUID `json:"id"`
	Name         string             `json:"name"`

	// PlatformId ID of a platform on which the object was created.
	PlatformId   openapi_types.UUID `json:"platformId"`
	PlatformName *EPlatformType     `json:"platformName,omitempty"`
}

// ObjectRestorePointsResult defines model for ObjectRestorePointsResult.
type ObjectRestorePointsResult struct {
	// Data Array of restore points.
	Data []ObjectRestorePointModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// PaginationResult Pagination settings.
type PaginationResult struct {
	// Count Number of returned results.
	Count int32 `json:"count"`

	// Limit Maximum number of results to return.
	Limit *int32 `json:"limit,omitempty"`

	// Skip Number of skipped results.
	Skip *int32 `json:"skip,omitempty"`

	// Total Total number of results.
	Total int32 `json:"total"`
}

// PerformanceExtentModel defines model for PerformanceExtentModel.
type PerformanceExtentModel struct {
	// Id ID of the backup repository added as a performance extent.
	Id openapi_types.UUID `json:"id"`

	// Name Name of the backup repository added as a performance extent.
	Name   string                      `json:"name"`
	Status ERepositoryExtentStatusType `json:"status"`
}

// PerformanceTierAdvancedSettingsModel Advanced settings of the performance tier.
type PerformanceTierAdvancedSettingsModel struct {
	// FullWhenExtentOffline If *true*, Veeam Backup & Replication creates a full backup file instead of an incremental backup file in case the required extent is offline.
	FullWhenExtentOffline *bool `json:"fullWhenExtentOffline,omitempty"`

	// PerVmBackup If *true*, Veeam Backup & Replication creates a separate backup file for every VM in the job.
	PerVmBackup *bool `json:"perVmBackup,omitempty"`
}

// PerformanceTierModel Performance tier.
type PerformanceTierModel struct {
	// AdvancedSettings Advanced settings of the performance tier.
	AdvancedSettings *PerformanceTierAdvancedSettingsModel `json:"advancedSettings,omitempty"`

	// PerformanceExtents Array of performance extents.
	PerformanceExtents *[]PerformanceExtentModel `json:"performanceExtents,omitempty"`
}

// PlacementPolicyModel Backup file placement policy.
type PlacementPolicyModel struct {
	Settings []BackupPlacementSettingsModel `json:"settings"`

	// Type Type of placement policy.
	Type EPlacementPolicyType `json:"type"`
}

// PreferredNetworkModel defines model for PreferredNetworkModel.
type PreferredNetworkModel struct {
	// CidrNotation CIDR notation.
	CidrNotation *string `json:"cidrNotation,omitempty"`

	// IpAddress IP address.
	IpAddress *string `json:"ipAddress,omitempty"`

	// SubnetMask Subnet mask.
	SubnetMask *string `json:"subnetMask,omitempty"`
}

// PreferredNetworksModel Preferred networks used for backup and replication traffic.
type PreferredNetworksModel struct {
	// IsEnabled If *true*, prefered networks are enabled.
	IsEnabled bool `json:"isEnabled"`

	// Networks Array of networks.
	Networks *[]PreferredNetworkModel `json:"networks,omitempty"`
}

// PrimaryStorageIntegrationSettingsModel Primary storage integration settings for the backup job.
type PrimaryStorageIntegrationSettingsModel struct {
	// FailoverToStandardBackup If *true*, failover to the regular VM processing mode is enabled. In this case, if backup from storage snapshot fails, VM snapshots are used.
	FailoverToStandardBackup *bool `json:"failoverToStandardBackup,omitempty"`

	// IsEnabled If *true*, the primary storage integration is enabled. In this case, storage snapshots (instead of VM snapshots) are used for VM data processing.
	IsEnabled bool `json:"isEnabled"`

	// LimitProcessedVm If *true*, the number of processed VMs per storage snapshot is limited.
	LimitProcessedVm *bool `json:"limitProcessedVm,omitempty"`

	// LimitProcessedVmCount Number of processed VMs per storage snapshot.
	LimitProcessedVmCount *int `json:"limitProcessedVmCount,omitempty"`
}

// PrivateKeyChangeSpec defines model for PrivateKeyChangeSpec.
type PrivateKeyChangeSpec struct {
	// Passphrase Passphrase that protects the private key.
	Passphrase *string `json:"passphrase,omitempty"`

	// PrivateKey Private key.
	PrivateKey string `json:"privateKey"`
}

// ProxiesResult defines model for ProxiesResult.
type ProxiesResult struct {
	// Data Array of backup proxies.
	Data []ProxyModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// ProxyDatastoreModel defines model for ProxyDatastoreModel.
type ProxyDatastoreModel struct {
	// Datastore VMware object.
	Datastore *VmwareObjectModel `json:"datastore,omitempty"`

	// VmCount Number of VMs.
	VmCount *int `json:"vmCount,omitempty"`
}

// ProxyDatastoreSettingsModel Datastores to which the backup proxy has a direct SAN or NFS connection.
type ProxyDatastoreSettingsModel struct {
	// AutoSelect If *true*, all datastores that the backup proxy can access are detected automatically.
	AutoSelect bool `json:"autoSelect"`

	// Datastores Array of datastores to which the backup proxy has a direct SAN or NFS connection.
	Datastores *[]ProxyDatastoreModel `json:"datastores,omitempty"`
}

// ProxyExportSpec defines model for ProxyExportSpec.
type ProxyExportSpec struct {
	// Ids Array of backup proxy IDs.
	Ids *[]openapi_types.UUID `json:"ids,omitempty"`

	// Names Array of backup proxy names. Wildcard characters are supported.
	Names *[]string `json:"names,omitempty"`

	// Types Array of backup proxy types.
	Types *[]EProxyType `json:"types,omitempty"`
}

// ProxyImportSpec defines model for ProxyImportSpec.
type ProxyImportSpec struct {
	// Description Description of the backup proxy.
	Description string `json:"description"`

	// Server Settings of the server that is used as a backup proxy.
	Server ProxyServerSettingsImportSpec `json:"server"`

	// Type Type of the backup proxy.
	Type EProxyType `json:"type"`
}

// ProxyImportSpecCollection defines model for ProxyImportSpecCollection.
type ProxyImportSpecCollection struct {
	// Proxies Array of backup proxies.
	Proxies []ProxyImportSpec `json:"proxies"`
}

// ProxyModel defines model for ProxyModel.
type ProxyModel struct {
	// Description Description of the backup proxy.
	Description string `json:"description"`

	// Id ID of the backup proxy.
	Id openapi_types.UUID `json:"id"`

	// Name Name of the backup proxy.
	Name string `json:"name"`

	// Type Type of the backup proxy.
	Type EProxyType `json:"type"`
}

// ProxyServerSettingsImportSpec Settings of the server that is used as a backup proxy.
type ProxyServerSettingsImportSpec struct {
	// ConnectedDatastores Datastores to which the backup proxy has a direct SAN or NFS connection.
	ConnectedDatastores *ProxyDatastoreSettingsModel `json:"connectedDatastores,omitempty"`
	FailoverToNetwork   *bool                        `json:"failoverToNetwork,omitempty"`

	// HostName Name of the server.
	HostName string `json:"hostName"`

	// HostTag Tag assigned to the server.
	HostTag *string `json:"hostTag,omitempty"`

	// HostToProxyEncryption [For the Network mode] If *true*, VM data is transferred over an encrypted TLS connection.
	HostToProxyEncryption *bool `json:"hostToProxyEncryption,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// TransportMode Transport mode of the backup proxy.
	TransportMode *EBackupProxyTransportMode `json:"transportMode,omitempty"`
}

// ProxySpec defines model for ProxySpec.
type ProxySpec struct {
	// Description Description of the backup proxy.
	Description string `json:"description"`

	// Type Type of the backup proxy.
	Type EProxyType `json:"type"`
}

// RepositoriesResult defines model for RepositoriesResult.
type RepositoriesResult struct {
	// Data Array of backup repositories.
	Data []RepositoryModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// RepositoryAdvancedSettingsModel Advanced settings for the backup repository.
type RepositoryAdvancedSettingsModel struct {
	// AlignDataBlocks If *true*, Veeam Backup & Replication aligns VM data saved to a backup file at a 4 KB block boundary.
	AlignDataBlocks *bool `json:"alignDataBlocks,omitempty"`

	// DecompressBeforeStoring If *true*, Veeam Backup & Replication decompresses backup data blocks before storing to improve deduplication ratios.
	DecompressBeforeStoring *bool `json:"decompressBeforeStoring,omitempty"`

	// PerVmBackup If *true*, Veeam Backup & Replication creates a separate backup file for every VM in the job.
	PerVmBackup *bool `json:"perVmBackup,omitempty"`

	// RotatedDrives If *true*, the repository drive is rotated.
	RotatedDrives *bool `json:"rotatedDrives,omitempty"`
}

// RepositoryExportSpec defines model for RepositoryExportSpec.
type RepositoryExportSpec struct {
	// Ids Array of backup repository IDs.
	Ids *[]openapi_types.UUID `json:"ids,omitempty"`

	// Names Array of repository names. Wildcard characters are supported.
	Names *[]string `json:"names,omitempty"`

	// Types Array of backup repository types.
	Types *[]ERepositoryType `json:"types,omitempty"`
}

// RepositoryImportSpecCollection defines model for RepositoryImportSpecCollection.
type RepositoryImportSpecCollection struct {
	// LinuxLocalRepositories Array of linux local storages.
	LinuxLocalRepositories *[]LinuxLocalStorageImportSpec `json:"LinuxLocalRepositories,omitempty"`

	// NfsRepositories Array of network attached storages.
	NfsRepositories *[]NfsStorageImportSpec `json:"NfsRepositories,omitempty"`

	// SmbRepositories Array of network attached storages.
	SmbRepositories *[]SmbStorageImportSpec `json:"SmbRepositories,omitempty"`

	// WindowsLocalRepositories Array of windows local storages.
	WindowsLocalRepositories *[]WindowsLocalStorageImportSpec `json:"WindowsLocalRepositories,omitempty"`
}

// RepositoryModel defines model for RepositoryModel.
type RepositoryModel struct {
	// Description Description of the backup repository.
	Description string `json:"description"`

	// Id ID of the backup repository.
	Id openapi_types.UUID `json:"id"`

	// Name Name of the backup repository.
	Name string `json:"name"`

	// Tag VMware vSphere tag assigned to the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type ERepositoryType `json:"type"`
}

// RepositoryShareGatewayImportSpec Settings for the gateway server.
type RepositoryShareGatewayImportSpec struct {
	// AutoSelect If *true*, Veeam Backup & Replication automatically selects a gateway server.
	AutoSelect *bool `json:"autoSelect,omitempty"`

	// GatewayServerName Name of the gateway server.
	GatewayServerName *string `json:"gatewayServerName,omitempty"`
}

// RepositorySpec defines model for RepositorySpec.
type RepositorySpec struct {
	// Description Description of the backup repository.
	Description string `json:"description"`

	// Name Name of the backup repository.
	Name string `json:"name"`

	// Tag VMware vSphere tag assigned to the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type ERepositoryType `json:"type"`
}

// RepositoryStateModel defines model for RepositoryStateModel.
type RepositoryStateModel struct {
	// CapacityGB Repository capacity in GB.
	CapacityGB  float64 `json:"capacityGB"`
	Description string  `json:"description"`

	// FreeGB Repository free space in GB.
	FreeGB float64 `json:"freeGB"`

	// HostId ID of the server that is used as a backup repository.
	HostId *openapi_types.UUID `json:"hostId,omitempty"`

	// HostName Name of the server that is used as a backup repository.
	HostName *string `json:"hostName,omitempty"`

	// Id ID of the backup repository.
	Id openapi_types.UUID `json:"id"`

	// Name Name of the backup repository.
	Name string `json:"name"`

	// Path Path to the folder where backup files are stored.
	Path *string `json:"path,omitempty"`

	// Type Repository type.
	Type ERepositoryType `json:"type"`

	// UsedSpaceGB Repository used space in GB.
	UsedSpaceGB float64 `json:"usedSpaceGB"`
}

// RepositoryStatesResult defines model for RepositoryStatesResult.
type RepositoryStatesResult struct {
	// Data Array of repository states.
	Data []RepositoryStateModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// ScaleOutExtentMaintenanceSpec defines model for ScaleOutExtentMaintenanceSpec.
type ScaleOutExtentMaintenanceSpec struct {
	RepositoryIds []openapi_types.UUID `json:"repositoryIds"`
}

// ScaleOutRepositoriesResult defines model for ScaleOutRepositoriesResult.
type ScaleOutRepositoriesResult struct {
	// Data Array of scale-out backup repositories.
	Data []ScaleOutRepositoryModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// ScaleOutRepositoryModel defines model for ScaleOutRepositoryModel.
type ScaleOutRepositoryModel struct {
	// ArchiveTier Archive tier.
	ArchiveTier *ArchiveTierModel `json:"archiveTier,omitempty"`

	// CapacityTier Capacity tier.
	CapacityTier *CapacityTierModel `json:"capacityTier,omitempty"`

	// Description Description of the scale-out backup repository.
	Description string `json:"description"`

	// Id ID of the scale-out backup repository.
	Id openapi_types.UUID `json:"id"`

	// Name Name of the scale-out backup repository.
	Name string `json:"name"`

	// PerformanceTier Performance tier.
	PerformanceTier PerformanceTierModel `json:"performanceTier"`

	// PlacementPolicy Backup file placement policy.
	PlacementPolicy *PlacementPolicyModel `json:"placementPolicy,omitempty"`

	// Tag Tag assigned to of the scale-out backup repository.
	Tag string `json:"tag"`
}

// ScheduleAfterThisJobModel Job chaining options.
type ScheduleAfterThisJobModel struct {
	// IsEnabled If *true*, job chaining is enabled.
	IsEnabled bool `json:"isEnabled"`

	// JobName Name of the preceding job.
	JobName *string `json:"jobName,omitempty"`
}

// ScheduleBackupWindowModel defines model for ScheduleBackupWindowModel.
type ScheduleBackupWindowModel struct {
	// WindowSetting Time scheme.
	WindowSetting *BackupWindowSettingModel `json:"WindowSetting,omitempty"`

	// IsEnabled If *true*, periodic schedule is enabled.
	IsEnabled bool `json:"isEnabled"`
}

// ScheduleDailyModel Daily scheduling options.
type ScheduleDailyModel struct {
	// DailyKind Kind of daily scheduling scheme.
	DailyKind *EDailyKinds `json:"dailyKind,omitempty"`

	// Days Days of the week when the job must start.
	Days *[]EDayOfWeek `json:"days,omitempty"`

	// IsEnabled If *true*, daily schedule is enabled.
	IsEnabled bool `json:"isEnabled"`

	// LocalTime Local time when the job must start.
	LocalTime *string `json:"localTime,omitempty"`
}

// ScheduleMonthlyModel Monthly scheduling options.
type ScheduleMonthlyModel struct {
	DayNumberInMonth *EDayNumberInMonth `json:"dayNumberInMonth,omitempty"`

	// DayOfMonth Day of the month when the job must start.
	DayOfMonth *int        `json:"dayOfMonth,omitempty"`
	DayOfWeek  *EDayOfWeek `json:"dayOfWeek,omitempty"`

	// IsEnabled If *true*, monthly schedule is enabled.
	IsEnabled bool `json:"isEnabled"`

	// LocalTime Local time when the job must start.
	LocalTime *string `json:"localTime,omitempty"`

	// Months Months when the job must start.
	Months *[]EMonth `json:"months,omitempty"`
}

// SchedulePeriodicallyModel Periodic scheduling options.
type SchedulePeriodicallyModel struct {
	// BackupWindow Time scheme.
	BackupWindow *BackupWindowSettingModel `json:"backupWindow,omitempty"`

	// Frequency Number of time units that defines the time interval.
	Frequency *int `json:"frequency,omitempty"`

	// IsEnabled If *true*, periodic schedule is enabled.
	IsEnabled bool `json:"isEnabled"`

	// PeriodicallyKind Time unit for periodic job scheduling.
	PeriodicallyKind *EPeriodicallyKinds `json:"periodicallyKind,omitempty"`
}

// ScheduleRetryModel Retry options.
type ScheduleRetryModel struct {
	// AwaitMinutes Time interval between job retries in minutes.
	AwaitMinutes *int `json:"awaitMinutes,omitempty"`

	// IsEnabled If *true*, retry options are enabled.
	IsEnabled *bool `json:"isEnabled,omitempty"`

	// RetryCount Number of retries set for the job.
	RetryCount *int `json:"retryCount,omitempty"`
}

// ScriptCommand Script settings.
type ScriptCommand struct {
	// Command Path to the script.
	Command *string `json:"command,omitempty"`

	// IsEnabled If *true*, script execution is enabled.
	IsEnabled bool `json:"isEnabled"`
}

// ServerTimeModel defines model for ServerTimeModel.
type ServerTimeModel struct {
	// ServerTime Current date and time on the server.
	ServerTime time.Time `json:"serverTime"`
	TimeZone   *string   `json:"timeZone,omitempty"`
}

// ServicesModel defines model for ServicesModel.
type ServicesModel struct {
	// Name Name of the service.
	Name string `json:"name"`

	// Port Port used to communicate with the service.
	Port int `json:"port"`
}

// ServicesResult defines model for ServicesResult.
type ServicesResult struct {
	// Data Array of services.
	Data []ServicesModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// SessionLogRecordModel Record of the session log.
type SessionLogRecordModel struct {
	// Description Description of the log record.
	Description *string `json:"description,omitempty"`

	// Id ID of the log record.
	Id *int `json:"id,omitempty"`

	// StartTime Date and time the operation was started.
	StartTime *time.Time            `json:"startTime,omitempty"`
	Status    *ETaskLogRecordStatus `json:"status,omitempty"`

	// Title Title of the log record.
	Title *string `json:"title,omitempty"`

	// UpdateTime Date and time the log record was updated.
	UpdateTime *time.Time `json:"updateTime,omitempty"`
}

// SessionLogResult Log of the session.
type SessionLogResult struct {
	// Records Array of log records.
	Records *[]SessionLogRecordModel `json:"records,omitempty"`

	// TotalRecords Total number of records.
	TotalRecords *int `json:"totalRecords,omitempty"`
}

// SessionModel defines model for SessionModel.
type SessionModel struct {
	// ActivityId ID of the activity.
	ActivityId openapi_types.UUID `json:"activityId"`

	// CreationTime Date and time the session was created.
	CreationTime time.Time `json:"creationTime"`

	// EndTime Date and time the session was ended.
	EndTime *time.Time `json:"endTime,omitempty"`

	// Id ID of the session.
	Id openapi_types.UUID `json:"id"`

	// Name Name of the session.
	Name string `json:"name"`

	// ParentSessionId ID of the parent session.
	ParentSessionId *openapi_types.UUID `json:"parentSessionId,omitempty"`

	// ProgressPercent Progress percentage of the session.
	ProgressPercent *int `json:"progressPercent,omitempty"`

	// ResourceId ID of the resource.
	ResourceId *openapi_types.UUID `json:"resourceId,omitempty"`

	// ResourceReference URI of the resource.
	ResourceReference *string             `json:"resourceReference,omitempty"`
	Result            *SessionResultModel `json:"result,omitempty"`

	// SessionType Type of the session.
	SessionType ESessionType `json:"sessionType"`

	// State State of the session.
	State ESessionState `json:"state"`

	// Usn Update sequence number.
	Usn int64 `json:"usn"`
}

// SessionResultModel defines model for SessionResultModel.
type SessionResultModel struct {
	// IsCanceled If *true*, the session has been canceled.
	IsCanceled *bool `json:"isCanceled,omitempty"`

	// Message Message that explains the session result.
	Message *string `json:"message,omitempty"`

	// Result Result of the session.
	Result ESessionResult `json:"result"`
}

// SessionsResult defines model for SessionsResult.
type SessionsResult struct {
	// Data Array of sessions.
	Data []SessionModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// SmbRepositoryShareSettingsSpec defines model for SmbRepositoryShareSettingsSpec.
type SmbRepositoryShareSettingsSpec struct {
	Credentials CredentialsImportModel `json:"credentials"`

	// GatewayServer Settings for the gateway server.
	GatewayServer *RepositoryShareGatewayImportSpec `json:"gatewayServer,omitempty"`

	// SharePath Path to the shared folder that that is used as a backup repository.
	SharePath string `json:"sharePath"`
}

// SmbStorageImportSpec defines model for SmbStorageImportSpec.
type SmbStorageImportSpec struct {
	// Description Description of the backup repository.
	Description string                        `json:"description"`
	MountServer MountServerSettingsImportSpec `json:"mountServer"`

	// Name Name of the backup repository.
	Name string `json:"name"`

	// Repository Repository settings.
	Repository NetworkRepositorySettingsModel `json:"repository"`
	Share      SmbRepositoryShareSettingsSpec `json:"share"`

	// Tag VMware vSphere tag assigned to the backup repository.
	Tag string `json:"tag"`

	// Type Repository type.
	Type ERepositoryType `json:"type"`
}

// SyntheticFullSettingsModel Synthetic full backup settings.
type SyntheticFullSettingsModel struct {
	// Days Days of the week when Veeam Backup & Replication creates a synthetic full backup.
	Days *[]EDayOfWeek `json:"days,omitempty"`

	// IsEnabled If *true*, synthetic full backups are enabled.
	IsEnabled bool `json:"isEnabled"`
}

// TokenLoginSpec defines model for TokenLoginSpec.
type TokenLoginSpec struct {
	// Code Authorization code. Required if the `grant_type` value is `authorization_code`.
	Code *string `json:"code,omitempty"`

	// GrantType Authorization grant type.
	//
	// Available values:
	// - `password` — used to obtain an access token by providing a user name and password.
	// - `refresh_token` — used to refresh an expired or lost access token by providing a refresh token.
	// - `authorization_code` — used to obtain an access token by providing an authorization code.
	GrantType ELoginGrantType `json:"grant_type"`

	// Password Password. Required if the `grant_type` value is `password`.
	Password *string `json:"password,omitempty"`

	// RefreshToken Refresh token. Required if the `grant_type` value is `refresh_token`.
	RefreshToken *string `json:"refresh_token,omitempty"`

	// UseShortTermRefresh If *true*, a short-term refresh token is used. Lifetime of the short-term refresh token is the access token lifetime plus 15 minutes.
	UseShortTermRefresh *bool `json:"use_short_term_refresh,omitempty"`

	// Username User name. Required if the `grant_type` value is `password`.
	Username *string `json:"username,omitempty"`
}

// TokenModel defines model for TokenModel.
type TokenModel struct {
	// DotExpires Date and time the access token expires.
	DotExpires time.Time `json:".expires"`

	// DotIssued Date and time the access token is issued.
	DotIssued time.Time `json:".issued"`

	// AccessToken String that represents authorization issued to the client. It must be specified in all requests. An access token can be used multiple times, but its lifetime is 15 minutes.
	AccessToken string `json:"access_token"`

	// ExpiresIn Lifetime of the access token, in seconds.
	ExpiresIn int32 `json:"expires_in"`

	// RefreshToken String that is used to obtain a new access token if the current access token expires or becomes lost. A refresh token can be used only once, and its default lifetime is 14 days.
	RefreshToken string `json:"refresh_token"`

	// TokenType Type of the access token.
	TokenType string `json:"token_type"`
}

// TrafficRuleModel defines model for TrafficRuleModel.
type TrafficRuleModel struct {
	// EncryptionEnabled If *true*, traffic encryption is enabled.
	EncryptionEnabled *bool `json:"encryptionEnabled,omitempty"`

	// Id ID of the rule.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Name of the rule.
	Name string `json:"name"`

	// SourceIPEnd End IP address of the range for the backup infrastructure components on the source side.
	SourceIPEnd string `json:"sourceIPEnd"`

	// SourceIPStart Start IP address of the range for the backup infrastructure components on the source side.
	SourceIPStart string `json:"sourceIPStart"`

	// TargetIPEnd End IP address of the range for the backup infrastructure components on the target side.
	TargetIPEnd string `json:"targetIPEnd"`

	// TargetIPStart Start IP address of the range for the backup infrastructure components on the target side.
	TargetIPStart string `json:"targetIPStart"`

	// ThrottlingEnabled If *true*, traffic throttling is enabled.
	ThrottlingEnabled *bool `json:"throttlingEnabled,omitempty"`

	// ThrottlingUnit Traffic speed unit.
	ThrottlingUnit *ESpeedUnit `json:"throttlingUnit,omitempty"`

	// ThrottlingValue Maximum speed that must be used to transfer data from source to target.
	ThrottlingValue *int32 `json:"throttlingValue,omitempty"`

	// ThrottlingWindowEnabled If *true*, throttling window during which the speed must be limited is enabled.
	ThrottlingWindowEnabled *bool `json:"throttlingWindowEnabled,omitempty"`

	// ThrottlingWindowOptions Time scheme.
	ThrottlingWindowOptions *BackupWindowSettingModel `json:"throttlingWindowOptions,omitempty"`
}

// VCenterInventoryResult defines model for VCenterInventoryResult.
type VCenterInventoryResult struct {
	// Data Array of vCenter Servers.
	Data []VmwareObjectSizeModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// VPowerNFSPortSettingsModel Network ports used by the vPower NFS Service.
type VPowerNFSPortSettingsModel struct {
	// MountPort Mount port.
	MountPort *int `json:"mountPort,omitempty"`

	// VPowerNFSPort vPower NFS port.
	VPowerNFSPort *int `json:"vPowerNFSPort,omitempty"`
}

// VSphereChangedBlockTrackingSettingsModel CBT settings for the backup job.
type VSphereChangedBlockTrackingSettingsModel struct {
	// EnableCBTautomatically If *true*, CBT is enabled for all processed VMs even if CBT is disabled in VM configuration. CBT is used for VMs with virtual hardware version 7 or later. These VMs must not have existing snapshots.
	EnableCBTautomatically *bool `json:"enableCBTautomatically,omitempty"`

	// IsEnabled If *true*, CBT data is used.
	IsEnabled bool `json:"isEnabled"`

	// ResetCBTonActiveFull If *true*, CBT is reset before creating active full backups.
	ResetCBTonActiveFull *bool `json:"resetCBTonActiveFull,omitempty"`
}

// ViHostImportSpec defines model for ViHostImportSpec.
type ViHostImportSpec struct {
	// CertificateThumbprint [Optional] Certificate thumbprint used to verify the server identity.
	CertificateThumbprint *string                `json:"certificateThumbprint,omitempty"`
	Credentials           CredentialsImportModel `json:"credentials"`

	// Description Description of the server.
	Description string `json:"description"`

	// Name Full DNS name or IP address of the server.
	Name string `json:"name"`

	// Port Port used to communicate with the server.
	Port *int `json:"port,omitempty"`

	// Type Type of the server.
	Type EManagedServerType `json:"type"`

	// ViHostType Type of the VMware vSphere server.
	ViHostType EViHostType `json:"viHostType"`
}

// ViRootsResult defines model for ViRootsResult.
type ViRootsResult struct {
	// Data Array of VMware vSphere servers.
	Data []VmwareObjectSizeModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// VmwareFcdInstantRecoveryDiskInfo defines model for VmwareFcdInstantRecoveryDiskInfo.
type VmwareFcdInstantRecoveryDiskInfo struct {
	// MountedDiskName Name of the VMDK file that is stored in the datastore.
	MountedDiskName string `json:"mountedDiskName"`

	// NameInBackup Disk name displayed in the backup.
	NameInBackup string `json:"nameInBackup"`

	// ObjectId FCD ID.
	ObjectId string `json:"objectId"`

	// RegisteredFcdName Name under which the disk is registered as an FCD in the vCenter Managed Object Browser.
	RegisteredFcdName string `json:"registeredFcdName"`
}

// VmwareFcdInstantRecoveryDiskSpec defines model for VmwareFcdInstantRecoveryDiskSpec.
type VmwareFcdInstantRecoveryDiskSpec struct {
	// MountedDiskName Name of the VMDK file that will be stored in the datastore.
	MountedDiskName string `json:"mountedDiskName"`

	// NameInBackup Disk name displayed in the backup.
	NameInBackup string `json:"nameInBackup"`

	// RegisteredFcdName Name under which the disk will be registered as an FCD in the vCenter Managed Object Browser.
	RegisteredFcdName string `json:"registeredFcdName"`
}

// VmwareFcdInstantRecoveryMount defines model for VmwareFcdInstantRecoveryMount.
type VmwareFcdInstantRecoveryMount struct {
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// Id Mount ID.
	Id openapi_types.UUID `json:"id"`

	// MountedDisks Array of mounted disks.
	MountedDisks *[]VmwareFcdInstantRecoveryDiskInfo `json:"mountedDisks,omitempty"`

	// SessionId ID of the restore session. Use the ID to track the progress. For details, see [Get Session](#operation/GetSession).
	SessionId openapi_types.UUID           `json:"sessionId"`
	Spec      VmwareFcdInstantRecoverySpec `json:"spec"`

	// State Mount state.
	State EInstantRecoveryMountState `json:"state"`
}

// VmwareFcdInstantRecoverySpec defines model for VmwareFcdInstantRecoverySpec.
type VmwareFcdInstantRecoverySpec struct {
	// DestinationCluster Destination cluster.
	DestinationCluster VmwareObjectModel `json:"destinationCluster"`

	// DisksMapping Array of disks that will be restored.
	DisksMapping []VmwareFcdInstantRecoveryDiskSpec `json:"disksMapping"`

	// ObjectRestorePointId ID of the restore point.
	ObjectRestorePointId openapi_types.UUID `json:"objectRestorePointId"`

	// WriteCache Write cache for recovered disks.
	WriteCache *VmwareFcdWriteCacheSpec `json:"writeCache,omitempty"`
}

// VmwareFcdQuickMigrationSpec defines model for VmwareFcdQuickMigrationSpec.
type VmwareFcdQuickMigrationSpec struct {
	// MountedDiskNames Array of disks that will be migrated to the `targetDatastore` associated with the `storagePolicy`.
	MountedDiskNames *[]string `json:"mountedDiskNames,omitempty"`

	// StoragePolicy Storage policy that will be applied to the migrated disks. For details on how to get a storage policy model, see [Get VMware vSphere Server Objects](#operation/GetVmwareHostObject).
	StoragePolicy *VmwareObjectModel `json:"storagePolicy,omitempty"`

	// TargetDatastore Target datastore. For details on how to get a datastore model, see [Get VMware vSphere Server Objects](#operation/GetVmwareHostObject).
	TargetDatastore VmwareObjectModel `json:"targetDatastore"`
}

// VmwareFcdWriteCacheSpec Write cache for recovered disks.
type VmwareFcdWriteCacheSpec struct {
	// CacheDatastore VMware object.
	CacheDatastore *VmwareObjectModel `json:"cacheDatastore,omitempty"`

	// RedirectIsEnabled If *true*, cache redirection is enabled. In this case, all changes made to the recovered disks while the Instant FCD Recovery is active are redirected to the specified `cacheDatastore` associated with the `storagePolicy`.
	RedirectIsEnabled bool `json:"redirectIsEnabled"`

	// StoragePolicy VMware object.
	StoragePolicy *VmwareObjectModel `json:"storagePolicy,omitempty"`
}

// VmwareObjectDiskModel defines model for VmwareObjectDiskModel.
type VmwareObjectDiskModel struct {
	// Disks Array of disks.
	Disks []string `json:"disks"`

	// DisksToProcess Type of disk selection.
	DisksToProcess EVmwareDisksTypeToProcess `json:"disksToProcess"`

	// RemoveFromVMConfiguration If *true*, the disk is removed from VM configuration.
	RemoveFromVMConfiguration *bool `json:"removeFromVMConfiguration,omitempty"`

	// VmObject VMware object.
	VmObject VmwareObjectModel `json:"vmObject"`
}

// VmwareObjectModel VMware object.
type VmwareObjectModel struct {
	// HostName Name of the host.
	HostName string `json:"hostName"`

	// Name Name of the VMware vSphere object.
	Name string `json:"name"`

	// ObjectId ID of the VMware vSphere object.
	ObjectId *string `json:"objectId,omitempty"`

	// Type Type of the VMware vSphere object.
	Type EVmwareInventoryType `json:"type"`
}

// VmwareObjectSizeModel defines model for VmwareObjectSizeModel.
type VmwareObjectSizeModel struct {
	// InventoryObject VMware object.
	InventoryObject VmwareObjectModel `json:"inventoryObject"`

	// Size Size used by the VMware vSphere object.
	Size *string `json:"size,omitempty"`
}

// WindowsHostComponentPortModel Ports used by Veeam Backup & Replication components.
type WindowsHostComponentPortModel struct {
	// ComponentName Veeam Backup & Replication component.
	ComponentName EWindowsHostComponentType `json:"componentName"`

	// Port Port used by the component.
	Port int `json:"port"`
}

// WindowsHostImportSpec defines model for WindowsHostImportSpec.
type WindowsHostImportSpec struct {
	Credentials *CredentialsImportModel `json:"credentials,omitempty"`

	// Description Description of the server.
	Description string `json:"description"`

	// Name Full DNS name or IP address of the server.
	Name string `json:"name"`

	// NetworkSettings Network ports.
	NetworkSettings *WindowsHostPortsModel `json:"networkSettings,omitempty"`

	// Type Type of the server.
	Type EManagedServerType `json:"type"`
}

// WindowsHostPortsModel Network ports.
type WindowsHostPortsModel struct {
	Components *[]WindowsHostComponentPortModel `json:"components,omitempty"`

	// PortRangeEnd End port used for data transfer.
	PortRangeEnd *int `json:"portRangeEnd,omitempty"`

	// PortRangeStart Start port used for data transfer.
	PortRangeStart *int `json:"portRangeStart,omitempty"`

	// ServerThisSide If *true*, the server is run on this side.
	ServerThisSide *bool `json:"serverThisSide,omitempty"`
}

// WindowsLocalRepositorySettingsModel Repository settings.
type WindowsLocalRepositorySettingsModel struct {
	// AdvancedSettings Advanced settings for the backup repository.
	AdvancedSettings *RepositoryAdvancedSettingsModel `json:"advancedSettings,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// Path Path to the folder where backup files are stored.
	Path *string `json:"path,omitempty"`

	// ReadWriteRate Maximum rate that restricts the total speed of reading and writing data to the backup repository disk.
	ReadWriteRate *int `json:"readWriteRate,omitempty"`
}

// WindowsLocalStorageImportSpec defines model for WindowsLocalStorageImportSpec.
type WindowsLocalStorageImportSpec struct {
	// Description Description of the backup repository.
	Description string `json:"description"`

	// HostName ID of the server that is used as a backup repository.
	HostName    string                        `json:"hostName"`
	MountServer MountServerSettingsImportSpec `json:"mountServer"`

	// Name Name of the backup repository.
	Name string `json:"name"`

	// Repository Repository settings.
	Repository WindowsLocalRepositorySettingsModel `json:"repository"`

	// Tag VMware vSphere tag assigned to the backup repository.
	Tag string `json:"tag"`

	// Type Repository type.
	Type ERepositoryType `json:"type"`
}

// ApiVersionParam defines model for apiVersionParam.
type ApiVersionParam = string

// BadRequest defines model for BadRequest.
type BadRequest = Error

// Deleted Empty success response (200, 201, 204).
type Deleted = EmptySuccessResponse

// Forbidden defines model for Forbidden.
type Forbidden = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// CreateAuthorizationCodeParams defines parameters for CreateAuthorizationCode.
type CreateAuthorizationCodeParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// LogoutParams defines parameters for Logout.
type LogoutParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// CreateTokenParams defines parameters for CreateToken.
type CreateTokenParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ExportCredentialsParams defines parameters for ExportCredentials.
type ExportCredentialsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ImportCredentialsParams defines parameters for ImportCredentials.
type ImportCredentialsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ExportEncryptionPasswordsParams defines parameters for ExportEncryptionPasswords.
type ExportEncryptionPasswordsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ImportEncryptionPasswordsParams defines parameters for ImportEncryptionPasswords.
type ImportEncryptionPasswordsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ExportJobsParams defines parameters for ExportJobs.
type ExportJobsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ImportJobsParams defines parameters for ImportJobs.
type ImportJobsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ExportManagedServersParams defines parameters for ExportManagedServers.
type ExportManagedServersParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ImportManagedServersParams defines parameters for ImportManagedServers.
type ImportManagedServersParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ExportProxiesParams defines parameters for ExportProxies.
type ExportProxiesParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ImportProxiesParams defines parameters for ImportProxies.
type ImportProxiesParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ExportRepositoriesParams defines parameters for ExportRepositories.
type ExportRepositoriesParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ImportRepositoriesParams defines parameters for ImportRepositories.
type ImportRepositoriesParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllAutomationSessionsParams defines parameters for GetAllAutomationSessions.
type GetAllAutomationSessionsParams struct {
	// Skip Number of sessions to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of sessions to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts sessions by one of the session parameters.
	OrderColumn *ESessionsFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts sessions in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters sessions by the `nameFilter` pattern. The pattern can match any session parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// CreatedAfterFilter Returns sessions that are created after the specified date and time.
	CreatedAfterFilter *time.Time `form:"createdAfterFilter,omitempty" json:"createdAfterFilter,omitempty"`

	// CreatedBeforeFilter Returns sessions that are created before the specified date and time.
	CreatedBeforeFilter *time.Time `form:"createdBeforeFilter,omitempty" json:"createdBeforeFilter,omitempty"`

	// EndedAfterFilter Returns sessions that are finished after the specified date and time.
	EndedAfterFilter *time.Time `form:"endedAfterFilter,omitempty" json:"endedAfterFilter,omitempty"`

	// EndedBeforeFilter Returns sessions that are finished before the specified date and time.
	EndedBeforeFilter *time.Time `form:"endedBeforeFilter,omitempty" json:"endedBeforeFilter,omitempty"`

	// TypeFilter Filters sessions by session type.
	TypeFilter *ESessionType `form:"typeFilter,omitempty" json:"typeFilter,omitempty"`

	// StateFilter Filters sessions by session state.
	StateFilter *ESessionState `form:"stateFilter,omitempty" json:"stateFilter,omitempty"`

	// ResultFilter Filters sessions by session result.
	ResultFilter *ESessionResult `form:"resultFilter,omitempty" json:"resultFilter,omitempty"`

	// JobIdFilter Filters sessions by job ID.
	JobIdFilter *openapi_types.UUID `form:"jobIdFilter,omitempty" json:"jobIdFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAutomationSessionParams defines parameters for GetAutomationSession.
type GetAutomationSessionParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAutomationSessionLogsParams defines parameters for GetAutomationSessionLogs.
type GetAutomationSessionLogsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// StopAutomationSessionParams defines parameters for StopAutomationSession.
type StopAutomationSessionParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllManagedServersParams defines parameters for GetAllManagedServers.
type GetAllManagedServersParams struct {
	// Skip Number of servers to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of servers to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts servers by one of the server parameters.
	OrderColumn *EManagedServersFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts servers in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters servers by the `nameFilter` pattern. The pattern can match any server parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// TypeFilter Filters servers by server type.
	TypeFilter *EManagedServerType `form:"typeFilter,omitempty" json:"typeFilter,omitempty"`

	// ViTypeFilter Filters servers by the type of VMware vSphere server.
	ViTypeFilter *EViHostType `form:"viTypeFilter,omitempty" json:"viTypeFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// CreateManagedServerParams defines parameters for CreateManagedServer.
type CreateManagedServerParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// DeleteManagedServerParams defines parameters for DeleteManagedServer.
type DeleteManagedServerParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetManagedServerParams defines parameters for GetManagedServer.
type GetManagedServerParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// UpdateManagedServerParams defines parameters for UpdateManagedServer.
type UpdateManagedServerParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllProxiesParams defines parameters for GetAllProxies.
type GetAllProxiesParams struct {
	// Skip Number of proxies to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of proxies to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts proxies by one of the proxy parameters.
	OrderColumn *EProxiesFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts proxies in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters proxies by the `nameFilter` pattern. The pattern can match any proxy parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// TypeFilter Filters proxies by proxy type.
	TypeFilter *EProxyType `form:"typeFilter,omitempty" json:"typeFilter,omitempty"`

	// HostIdFilter Filters proxies by ID of the backup server.
	HostIdFilter *openapi_types.UUID `form:"hostIdFilter,omitempty" json:"hostIdFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// CreateProxyParams defines parameters for CreateProxy.
type CreateProxyParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// DeleteProxyParams defines parameters for DeleteProxy.
type DeleteProxyParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetProxyParams defines parameters for GetProxy.
type GetProxyParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// UpdateProxyParams defines parameters for UpdateProxy.
type UpdateProxyParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllRepositoriesParams defines parameters for GetAllRepositories.
type GetAllRepositoriesParams struct {
	// Skip Number of repositories to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of repositories to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts repositories by one of the repository parameters.
	OrderColumn *ERepositoryFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts repositories in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters repositories by the `nameFilter` pattern. The pattern can match any repository parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// TypeFilter Filters repositories by repository type.
	TypeFilter *ERepositoryType `form:"typeFilter,omitempty" json:"typeFilter,omitempty"`

	// HostIdFilter Filters repositories by ID of the backup server.
	HostIdFilter *openapi_types.UUID `form:"hostIdFilter,omitempty" json:"hostIdFilter,omitempty"`

	// PathFilter Filters repositories by path to the folder where backup files are stored.
	PathFilter *string `form:"pathFilter,omitempty" json:"pathFilter,omitempty"`

	// VmbApiFilter Filters repositories by VM Backup API parameters converted to the base64 string.<br>
	// To compose the base64 string:<br>
	// <ol>
	//   <li>Prepare VM Backup API parameters in the JSON format.</li>
	//   <code>{<br>
	//   "protocolVersion":"string",<br>
	//   "assemblyVersion":"string",<br>
	//   "productId":"string",<br>
	//   "versionFlags":"string"<br>
	//   }<br></code>
	//   <li>Convert the JSON object into a string.</li>
	//   <li>Encode the string with base64 encoding.</li>
	// </ol>
	VmbApiFilter *string `form:"vmbApiFilter,omitempty" json:"vmbApiFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// CreateRepositoryParams defines parameters for CreateRepository.
type CreateRepositoryParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllRepositoriesStatesParams defines parameters for GetAllRepositoriesStates.
type GetAllRepositoriesStatesParams struct {
	// Skip Number of repository states to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of repository states to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts repository states by one of the state parameters.
	OrderColumn *ERepositoryStatesFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts repository states in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// IdFilter Filters repository states by repository ID.
	IdFilter *openapi_types.UUID `form:"idFilter,omitempty" json:"idFilter,omitempty"`

	// NameFilter Filters repository states by the `nameFilter` pattern. The pattern can match any repository state parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// TypeFilter Filters repository states by repository type.
	TypeFilter *ERepositoryType `form:"typeFilter,omitempty" json:"typeFilter,omitempty"`

	// CapacityFilter Filters repository states by repository capacity.
	CapacityFilter *float64 `form:"capacityFilter,omitempty" json:"capacityFilter,omitempty"`

	// FreeSpaceFilter Filters repository states by repository free space.
	FreeSpaceFilter *float64 `form:"freeSpaceFilter,omitempty" json:"freeSpaceFilter,omitempty"`

	// UsedSpaceFilter Filters repository states by repository used space.
	UsedSpaceFilter *float64 `form:"usedSpaceFilter,omitempty" json:"usedSpaceFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// DeleteRepositoryParams defines parameters for DeleteRepository.
type DeleteRepositoryParams struct {
	// DeleteBackups If *true*, Veeam Backup & Replication will remove backup files.
	DeleteBackups *bool `form:"deleteBackups,omitempty" json:"deleteBackups,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetRepositoryParams defines parameters for GetRepository.
type GetRepositoryParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// UpdateRepositoryParams defines parameters for UpdateRepository.
type UpdateRepositoryParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllScaleOutRepositoriesParams defines parameters for GetAllScaleOutRepositories.
type GetAllScaleOutRepositoriesParams struct {
	// Skip Number of repositories to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of repositories to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts repositories by one of the repository parameters.
	OrderColumn *EScaleOutRepositoryFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts repositories in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters repositories by the `nameFilter` substring. The substring can be part of any repository parameter.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetScaleOutRepositoryParams defines parameters for GetScaleOutRepository.
type GetScaleOutRepositoryParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// DisableScaleOutExtentMaintenanceModeParams defines parameters for DisableScaleOutExtentMaintenanceMode.
type DisableScaleOutExtentMaintenanceModeParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// EnableScaleOutExtentMaintenanceModeParams defines parameters for EnableScaleOutExtentMaintenanceMode.
type EnableScaleOutExtentMaintenanceModeParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllBackupObjectsParams defines parameters for GetAllBackupObjects.
type GetAllBackupObjectsParams struct {
	// Skip Number of backup objects to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of backup objects to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts backup objects by one of the backup object parameters.
	OrderColumn *EBackupObjectsFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts backup objects in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters backup objects by the `nameFilter` pattern. The pattern can match any backup object parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// PlatformNameFilter Filters backup objects by platform ID.
	PlatformNameFilter *EPlatformType `form:"platformNameFilter,omitempty" json:"platformNameFilter,omitempty"`

	// PlatformIdFilter Filters backup objects by platform ID.
	PlatformIdFilter *openapi_types.UUID `form:"platformIdFilter,omitempty" json:"platformIdFilter,omitempty"`

	// TypeFilter Filters backup objects by object type.
	TypeFilter *string `form:"typeFilter,omitempty" json:"typeFilter,omitempty"`

	// ViTypeFilter Filters backup objects by the type of VMware vSphere server.
	ViTypeFilter *string `form:"viTypeFilter,omitempty" json:"viTypeFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetBackupObjectParams defines parameters for GetBackupObject.
type GetBackupObjectParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetBackupObjectRestorePointsParams defines parameters for GetBackupObjectRestorePoints.
type GetBackupObjectRestorePointsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllBackupsParams defines parameters for GetAllBackups.
type GetAllBackupsParams struct {
	// Skip Number of backups to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of backups to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts backups by one of the backup parameters.
	OrderColumn *EBackupsFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts backups in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters backups by the `nameFilter` pattern. The pattern can match any backup parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// CreatedAfterFilter Returns backups that are created after the specified date and time.
	CreatedAfterFilter *time.Time `form:"createdAfterFilter,omitempty" json:"createdAfterFilter,omitempty"`

	// CreatedBeforeFilter Returns backups that are created before the specified date and time.
	CreatedBeforeFilter *time.Time `form:"createdBeforeFilter,omitempty" json:"createdBeforeFilter,omitempty"`

	// PlatformIdFilter Filters backups by ID of the backup object platform.
	PlatformIdFilter *openapi_types.UUID `form:"platformIdFilter,omitempty" json:"platformIdFilter,omitempty"`

	// JobIdFilter Filters backups by ID of the parent job.
	JobIdFilter *openapi_types.UUID `form:"jobIdFilter,omitempty" json:"jobIdFilter,omitempty"`

	// PolicyTagFilter Filters backups by retention policy tag.
	PolicyTagFilter *string `form:"policyTagFilter,omitempty" json:"policyTagFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetBackupParams defines parameters for GetBackup.
type GetBackupParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetBackupObjectsParams defines parameters for GetBackupObjects.
type GetBackupObjectsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetConfigBackupOptionsParams defines parameters for GetConfigBackupOptions.
type GetConfigBackupOptionsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// UpdateConfigBackupOptionsParams defines parameters for UpdateConfigBackupOptions.
type UpdateConfigBackupOptionsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// StartConfigBackupParams defines parameters for StartConfigBackup.
type StartConfigBackupParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetConnectionCertificateParams defines parameters for GetConnectionCertificate.
type GetConnectionCertificateParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllCredsParams defines parameters for GetAllCreds.
type GetAllCredsParams struct {
	// Skip Number of credentials records to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of credentials records to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts credentials by one of the credentials parameters.
	OrderColumn *ECredentialsFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts credentials in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters credentials by the `nameFilter` pattern. The pattern can match any credentials parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// CreateCredsParams defines parameters for CreateCreds.
type CreateCredsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// DeleteCredsParams defines parameters for DeleteCreds.
type DeleteCredsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetCredsParams defines parameters for GetCreds.
type GetCredsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// UpdateCredsParams defines parameters for UpdateCreds.
type UpdateCredsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ChangePasswordForCredsParams defines parameters for ChangePasswordForCreds.
type ChangePasswordForCredsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ChangePrivateKeyForCredsParams defines parameters for ChangePrivateKeyForCreds.
type ChangePrivateKeyForCredsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ChangeRootPasswordForCredsParams defines parameters for ChangeRootPasswordForCreds.
type ChangeRootPasswordForCredsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllEncryptionPasswordsParams defines parameters for GetAllEncryptionPasswords.
type GetAllEncryptionPasswordsParams struct {
	// Skip Number of passwords to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of passwords to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts passwords by one of the password parameters.
	OrderColumn *EEncryptionPasswordsFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts passwords in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// CreateEncryptionPasswordParams defines parameters for CreateEncryptionPassword.
type CreateEncryptionPasswordParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// DeleteEncryptionPasswordParams defines parameters for DeleteEncryptionPassword.
type DeleteEncryptionPasswordParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetEncryptionPasswordParams defines parameters for GetEncryptionPassword.
type GetEncryptionPasswordParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// UpdateEncryptionPasswordParams defines parameters for UpdateEncryptionPassword.
type UpdateEncryptionPasswordParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetGeneralOptionsParams defines parameters for GetGeneralOptions.
type GetGeneralOptionsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// UpdateGeneralOptionsParams defines parameters for UpdateGeneralOptions.
type UpdateGeneralOptionsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllInventoryVmwareHostsParams defines parameters for GetAllInventoryVmwareHosts.
type GetAllInventoryVmwareHostsParams struct {
	// Skip Number of VMware vSphere servers to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of VMware vSphere servers to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts VMware vSphere servers by one of the VMware vSphere server parameters.
	OrderColumn *EViRootFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts VMware vSphere servers in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters VMware vSphere servers by the `nameFilter` pattern. The pattern can match any VMware vSphere server parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetVmwareHostObjectParams defines parameters for GetVmwareHostObject.
type GetVmwareHostObjectParams struct {
	// Skip Number of objects to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of objects to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts objects by one of the object parameters.
	OrderColumn *EvCentersInventoryFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts objects in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// ObjectIdFilter Filters objects by object ID.
	ObjectIdFilter *string `form:"objectIdFilter,omitempty" json:"objectIdFilter,omitempty"`

	// HierarchyTypeFilter Filters objects by hierarchy type.
	HierarchyTypeFilter *EHierarchyType `form:"hierarchyTypeFilter,omitempty" json:"hierarchyTypeFilter,omitempty"`

	// NameFilter Filters objects by the `nameFilter` pattern. The pattern can match any object parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// TypeFilter Filters objects by virtual infrastructure type.
	TypeFilter *EVmwareInventoryType `form:"typeFilter,omitempty" json:"typeFilter,omitempty"`

	// ParentContainerNameFilter Filters objects by name of the parent container.
	ParentContainerNameFilter *string `form:"parentContainerNameFilter,omitempty" json:"parentContainerNameFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllJobsParams defines parameters for GetAllJobs.
type GetAllJobsParams struct {
	// Skip Number of jobs to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of jobs to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts jobs by one of the job parameters.
	OrderColumn *EJobFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts jobs in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters jobs by the `nameFilter` pattern. The pattern can match any job parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// TypeFilter Filters jobs by job type.
	TypeFilter *EJobType `form:"typeFilter,omitempty" json:"typeFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// CreateJobParams defines parameters for CreateJob.
type CreateJobParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllJobsStatesParams defines parameters for GetAllJobsStates.
type GetAllJobsStatesParams struct {
	// Skip Number of job states to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of job states to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts job states by one of the state parameters.
	OrderColumn *EJobStatesFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts job states in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// IdFilter Filters job states by job ID.
	IdFilter *openapi_types.UUID `form:"idFilter,omitempty" json:"idFilter,omitempty"`

	// NameFilter Filters job states by the `nameFilter` pattern. The pattern can match any state parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// TypeFilter Filters job states by job type.
	TypeFilter *EJobType `form:"typeFilter,omitempty" json:"typeFilter,omitempty"`

	// LastResultFilter Filters job states by status with which jobs must finish.
	LastResultFilter *ESessionResult `form:"lastResultFilter,omitempty" json:"lastResultFilter,omitempty"`

	// StatusFilter Filters job states by current status of the job.
	StatusFilter *EJobStatus `form:"statusFilter,omitempty" json:"statusFilter,omitempty"`

	// WorkloadFilter Filters job states by workloads that jobs must process.
	WorkloadFilter *EJobWorkload `form:"workloadFilter,omitempty" json:"workloadFilter,omitempty"`

	// LastRunAfterFilter Returns job states for jobs that have run after the specified date and time.
	LastRunAfterFilter *time.Time `form:"lastRunAfterFilter,omitempty" json:"lastRunAfterFilter,omitempty"`

	// LastRunBeforeFilter Returns job states for jobs that have not run after the specified date and time.
	LastRunBeforeFilter *time.Time `form:"lastRunBeforeFilter,omitempty" json:"lastRunBeforeFilter,omitempty"`

	// IsHighPriorityJobFilter If *true*, Returns job states for jobs with high priority.
	IsHighPriorityJobFilter *bool `form:"isHighPriorityJobFilter,omitempty" json:"isHighPriorityJobFilter,omitempty"`

	// RepositoryIdFilter Filters job states by repository ID.
	RepositoryIdFilter *openapi_types.UUID `form:"repositoryIdFilter,omitempty" json:"repositoryIdFilter,omitempty"`

	// ObjectsCountFilter Filters job states by number of objects processed by the job.
	ObjectsCountFilter *int `form:"objectsCountFilter,omitempty" json:"objectsCountFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// DeleteJobParams defines parameters for DeleteJob.
type DeleteJobParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetJobParams defines parameters for GetJob.
type GetJobParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// UpdateJobParams defines parameters for UpdateJob.
type UpdateJobParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// DisableJobParams defines parameters for DisableJob.
type DisableJobParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// EnableJobParams defines parameters for EnableJob.
type EnableJobParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// StartJobParams defines parameters for StartJob.
type StartJobParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// StopJobParams defines parameters for StopJob.
type StopJobParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllObjectRestorePointsParams defines parameters for GetAllObjectRestorePoints.
type GetAllObjectRestorePointsParams struct {
	// Skip Number of restore points to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of restore points to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts restore points by one of the restore point parameters.
	OrderColumn *EObjectRestorePointsFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts restore points in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// CreatedAfterFilter Returns restore points that are created after the specified date and time.
	CreatedAfterFilter *time.Time `form:"createdAfterFilter,omitempty" json:"createdAfterFilter,omitempty"`

	// CreatedBeforeFilter Returns restore points that are created before the specified date and time.
	CreatedBeforeFilter *time.Time `form:"createdBeforeFilter,omitempty" json:"createdBeforeFilter,omitempty"`

	// NameFilter Filters restore points by the `nameFilter` pattern. The pattern can match any restore point parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// PlatformNameFilter Filters restore points by name of the backup object platform.
	PlatformNameFilter *EPlatformType `form:"platformNameFilter,omitempty" json:"platformNameFilter,omitempty"`

	// PlatformIdFilter Filters restore points by ID of the backup object platform.
	PlatformIdFilter *openapi_types.UUID `form:"platformIdFilter,omitempty" json:"platformIdFilter,omitempty"`

	// BackupIdFilter Filters restore points by backup ID.
	BackupIdFilter *openapi_types.UUID `form:"backupIdFilter,omitempty" json:"backupIdFilter,omitempty"`

	// BackupObjectIdFilter Filters restore points by backup object ID.
	BackupObjectIdFilter *openapi_types.UUID `form:"backupObjectIdFilter,omitempty" json:"backupObjectIdFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetObjectRestorePointParams defines parameters for GetObjectRestorePoint.
type GetObjectRestorePointParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetObjectRestorePointDisksParams defines parameters for GetObjectRestorePointDisks.
type GetObjectRestorePointDisksParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// InstantRecoveryVmwareFcdMountParams defines parameters for InstantRecoveryVmwareFcdMount.
type InstantRecoveryVmwareFcdMountParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetVmwareFcdInstantRecoveryMountModelParams defines parameters for GetVmwareFcdInstantRecoveryMountModel.
type GetVmwareFcdInstantRecoveryMountModelParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// InstantRecoveryVmwareFcdDismountParams defines parameters for InstantRecoveryVmwareFcdDismount.
type InstantRecoveryVmwareFcdDismountParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// InstantRecoveryVmwareFcdMigrateParams defines parameters for InstantRecoveryVmwareFcdMigrate.
type InstantRecoveryVmwareFcdMigrateParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetServerCertificateParams defines parameters for GetServerCertificate.
type GetServerCertificateParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetServerTimeParams defines parameters for GetServerTime.
type GetServerTimeParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllServicesParams defines parameters for GetAllServices.
type GetAllServicesParams struct {
	// Skip Number of services to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of services to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts services by one of the service parameters.
	OrderColumn *EServicesFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts services in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters services by the `nameFilter` pattern. The pattern can match any service parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllSessionsParams defines parameters for GetAllSessions.
type GetAllSessionsParams struct {
	// Skip Number of sessions to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of sessions to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts sessions by one of the session parameters.
	OrderColumn *ESessionsFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts sessions in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters sessions by the `nameFilter` pattern. The pattern can match any session parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// CreatedAfterFilter Returns sessions that are created after the specified date and time.
	CreatedAfterFilter *time.Time `form:"createdAfterFilter,omitempty" json:"createdAfterFilter,omitempty"`

	// CreatedBeforeFilter Returns sessions that are created before the specified date and time.
	CreatedBeforeFilter *time.Time `form:"createdBeforeFilter,omitempty" json:"createdBeforeFilter,omitempty"`

	// EndedAfterFilter Returns sessions that are finished after the specified date and time.
	EndedAfterFilter *time.Time `form:"endedAfterFilter,omitempty" json:"endedAfterFilter,omitempty"`

	// EndedBeforeFilter Returns sessions that are finished before the specified date and time.
	EndedBeforeFilter *time.Time `form:"endedBeforeFilter,omitempty" json:"endedBeforeFilter,omitempty"`

	// TypeFilter Filters sessions by session type.
	TypeFilter *ESessionType `form:"typeFilter,omitempty" json:"typeFilter,omitempty"`

	// StateFilter Filters sessions by session state.
	StateFilter *ESessionState `form:"stateFilter,omitempty" json:"stateFilter,omitempty"`

	// ResultFilter Filters sessions by session result.
	ResultFilter *ESessionResult `form:"resultFilter,omitempty" json:"resultFilter,omitempty"`

	// JobIdFilter Filters sessions by job ID.
	JobIdFilter *openapi_types.UUID `form:"jobIdFilter,omitempty" json:"jobIdFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetSessionParams defines parameters for GetSession.
type GetSessionParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetSessionLogsParams defines parameters for GetSessionLogs.
type GetSessionLogsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// StopSessionParams defines parameters for StopSession.
type StopSessionParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllTrafficRulesParams defines parameters for GetAllTrafficRules.
type GetAllTrafficRulesParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// UpdateTrafficRulesParams defines parameters for UpdateTrafficRules.
type UpdateTrafficRulesParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following
	// format: *\<version\>-\<revision\>*.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// CreateTokenFormdataRequestBody defines body for CreateToken for application/x-www-form-urlencoded ContentType.
type CreateTokenFormdataRequestBody = TokenLoginSpec

// ExportCredentialsJSONRequestBody defines body for ExportCredentials for application/json ContentType.
type ExportCredentialsJSONRequestBody = CredentialsExportSpec

// ImportCredentialsJSONRequestBody defines body for ImportCredentials for application/json ContentType.
type ImportCredentialsJSONRequestBody = CredentialsImportSpecCollection

// ExportEncryptionPasswordsJSONRequestBody defines body for ExportEncryptionPasswords for application/json ContentType.
type ExportEncryptionPasswordsJSONRequestBody = EncryptionPasswordExportSpec

// ImportEncryptionPasswordsJSONRequestBody defines body for ImportEncryptionPasswords for application/json ContentType.
type ImportEncryptionPasswordsJSONRequestBody = EncryptionPasswordImportSpecCollection

// ExportJobsJSONRequestBody defines body for ExportJobs for application/json ContentType.
type ExportJobsJSONRequestBody = JobExportSpec

// ImportJobsJSONRequestBody defines body for ImportJobs for application/json ContentType.
type ImportJobsJSONRequestBody = JobImportSpecCollection

// ExportManagedServersJSONRequestBody defines body for ExportManagedServers for application/json ContentType.
type ExportManagedServersJSONRequestBody = ManageServerExportSpec

// ImportManagedServersJSONRequestBody defines body for ImportManagedServers for application/json ContentType.
type ImportManagedServersJSONRequestBody = ManageServerImportSpecCollection

// ExportProxiesJSONRequestBody defines body for ExportProxies for application/json ContentType.
type ExportProxiesJSONRequestBody = ProxyExportSpec

// ImportProxiesJSONRequestBody defines body for ImportProxies for application/json ContentType.
type ImportProxiesJSONRequestBody = ProxyImportSpecCollection

// ExportRepositoriesJSONRequestBody defines body for ExportRepositories for application/json ContentType.
type ExportRepositoriesJSONRequestBody = RepositoryExportSpec

// ImportRepositoriesJSONRequestBody defines body for ImportRepositories for application/json ContentType.
type ImportRepositoriesJSONRequestBody = RepositoryImportSpecCollection

// CreateManagedServerJSONRequestBody defines body for CreateManagedServer for application/json ContentType.
type CreateManagedServerJSONRequestBody = ManagedServerSpec

// UpdateManagedServerJSONRequestBody defines body for UpdateManagedServer for application/json ContentType.
type UpdateManagedServerJSONRequestBody = ManagedServerModel

// CreateProxyJSONRequestBody defines body for CreateProxy for application/json ContentType.
type CreateProxyJSONRequestBody = ProxySpec

// UpdateProxyJSONRequestBody defines body for UpdateProxy for application/json ContentType.
type UpdateProxyJSONRequestBody = ProxyModel

// CreateRepositoryJSONRequestBody defines body for CreateRepository for application/json ContentType.
type CreateRepositoryJSONRequestBody = RepositorySpec

// UpdateRepositoryJSONRequestBody defines body for UpdateRepository for application/json ContentType.
type UpdateRepositoryJSONRequestBody = RepositoryModel

// DisableScaleOutExtentMaintenanceModeJSONRequestBody defines body for DisableScaleOutExtentMaintenanceMode for application/json ContentType.
type DisableScaleOutExtentMaintenanceModeJSONRequestBody = ScaleOutExtentMaintenanceSpec

// EnableScaleOutExtentMaintenanceModeJSONRequestBody defines body for EnableScaleOutExtentMaintenanceMode for application/json ContentType.
type EnableScaleOutExtentMaintenanceModeJSONRequestBody = ScaleOutExtentMaintenanceSpec

// UpdateConfigBackupOptionsJSONRequestBody defines body for UpdateConfigBackupOptions for application/json ContentType.
type UpdateConfigBackupOptionsJSONRequestBody = ConfigBackupModel

// GetConnectionCertificateJSONRequestBody defines body for GetConnectionCertificate for application/json ContentType.
type GetConnectionCertificateJSONRequestBody = HostConnectionSpec

// CreateCredsJSONRequestBody defines body for CreateCreds for application/json ContentType.
type CreateCredsJSONRequestBody = CredentialsSpec

// UpdateCredsJSONRequestBody defines body for UpdateCreds for application/json ContentType.
type UpdateCredsJSONRequestBody = CredentialsModel

// ChangePasswordForCredsJSONRequestBody defines body for ChangePasswordForCreds for application/json ContentType.
type ChangePasswordForCredsJSONRequestBody = CredentialsPasswordChangeSpec

// ChangePrivateKeyForCredsJSONRequestBody defines body for ChangePrivateKeyForCreds for application/json ContentType.
type ChangePrivateKeyForCredsJSONRequestBody = PrivateKeyChangeSpec

// ChangeRootPasswordForCredsJSONRequestBody defines body for ChangeRootPasswordForCreds for application/json ContentType.
type ChangeRootPasswordForCredsJSONRequestBody = CredentialsPasswordChangeSpec

// CreateEncryptionPasswordJSONRequestBody defines body for CreateEncryptionPassword for application/json ContentType.
type CreateEncryptionPasswordJSONRequestBody = EncryptionPasswordSpec

// UpdateEncryptionPasswordJSONRequestBody defines body for UpdateEncryptionPassword for application/json ContentType.
type UpdateEncryptionPasswordJSONRequestBody = EncryptionPasswordModel

// UpdateGeneralOptionsJSONRequestBody defines body for UpdateGeneralOptions for application/json ContentType.
type UpdateGeneralOptionsJSONRequestBody = GeneralOptionsModel

// CreateJobJSONRequestBody defines body for CreateJob for application/json ContentType.
type CreateJobJSONRequestBody = JobSpec

// UpdateJobJSONRequestBody defines body for UpdateJob for application/json ContentType.
type UpdateJobJSONRequestBody = JobModel

// StartJobJSONRequestBody defines body for StartJob for application/json ContentType.
type StartJobJSONRequestBody = JobStartSpec

// StopJobJSONRequestBody defines body for StopJob for application/json ContentType.
type StopJobJSONRequestBody = JobStopSpec

// InstantRecoveryVmwareFcdMountJSONRequestBody defines body for InstantRecoveryVmwareFcdMount for application/json ContentType.
type InstantRecoveryVmwareFcdMountJSONRequestBody = VmwareFcdInstantRecoverySpec

// InstantRecoveryVmwareFcdMigrateJSONRequestBody defines body for InstantRecoveryVmwareFcdMigrate for application/json ContentType.
type InstantRecoveryVmwareFcdMigrateJSONRequestBody = VmwareFcdQuickMigrationSpec

// UpdateTrafficRulesJSONRequestBody defines body for UpdateTrafficRules for application/json ContentType.
type UpdateTrafficRulesJSONRequestBody = GlobalNetworkTrafficRulesModel
